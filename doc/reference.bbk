<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<book id="reference" last-revision="$Date: 2016/08/05 20:23:10 $" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Boost.Python Reference Manual</title>
  <bookinfo>
    <authorgroup>
    <author>
      <firstname>David</firstname> <surname>Abrahams</surname>
    </author>
    <author>
      <firstname>Stefan</firstname> <surname>Seefeld</surname>
    </author>
    </authorgroup>
    <copyright>
      <year>2002</year> <year>2003</year> <year>2004</year> <year>2005</year> <year>2015</year>
      <holder>David Abrahams, Stefan Seefeld</holder>
    </copyright>
    <legalnotice id="reference.legal">
      <para>
        Distributed under the Boost Software License, Version 1.0. (See accompanying
        file LICENSE_1_0.txt or copy at <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>
      </para>
    </legalnotice>
  </bookinfo>
  <chapter id="concepts" last-revision="$Date: 2016/08/05 20:23:10 $" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Concepts</title>
    <section id="concepts.callpolicies">
      <title><link linkend="concepts.callpolicies">CallPolicies</link></title>
      <section id="concepts.callpolicies.introduction">
        <title><link linkend="concepts.callpolicies.introduction">Introduction</link></title>
        <para>
          Models of the CallPolicies concept are used to specialize the behavior
          of Python callable objects generated by Boost.Python to wrapped C++ objects
          like function and member function pointers, providing three behaviors:
        </para>
        <orderedlist>
          <listitem>
            <simpara>
              <code><phrase role="identifier">precall</phrase></code> - Python argument
              tuple management before the wrapped object is invoked
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <code><phrase role="identifier">result_converter</phrase></code> -
              C++ return value handling
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <code><phrase role="identifier">postcall</phrase></code> - Python argument
              tuple and result management after the wrapped object is invoked
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <code><phrase role="identifier">extract_return_type</phrase></code>
              - metafunction for extracting the return type from a given signature
              type sequence
            </simpara>
          </listitem>
        </orderedlist>
      </section>
      <section id="concepts.callpolicies.callpolicies_composition">
        <title><link linkend="concepts.callpolicies.callpolicies_composition">CallPolicies
        Composition</link></title>
        <para>
          In order to allow the use of multiple models of CallPolicies in the same
          callable object, Boost.Python's CallPolicies class templates provide a
          chaining interface which allows them to be recursively composed. This interface
          takes the form of an optional template parameter, <code><phrase role="identifier">Base</phrase></code>,
          which defaults to <code><phrase role="identifier">default_call_policies</phrase></code>.
          By convention, the <code><phrase role="identifier">precall</phrase></code>
          function of the <code><phrase role="identifier">Base</phrase></code> is
          invoked after the <code><phrase role="identifier">precall</phrase></code>
          function supplied by the <code><phrase role="identifier">outer</phrase></code>
          template, and the <code><phrase role="identifier">postcall</phrase></code>
          function of the <code><phrase role="identifier">Base</phrase></code> is
          invoked before the <code><phrase role="identifier">postcall</phrase></code>
          function of the <code><phrase role="identifier">outer</phrase></code> template.
          If a <code><phrase role="identifier">result_converter</phrase></code> is
          supplied by the <code><phrase role="identifier">outer</phrase></code> template,
          it replaces any <code><phrase role="identifier">result_converter</phrase></code>
          supplied by the <code><phrase role="identifier">Base</phrase></code>. For
          an example, see <code><phrase role="identifier">return_internal_reference</phrase></code>.
        </para>
      </section>
      <section id="concepts.callpolicies.concept_requirements">
        <title><link linkend="concepts.callpolicies.concept_requirements">Concept
        Requirements</link></title>
        <informaltable frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>
                    Expression
                  </para>
                </entry>
                <entry>
                  <para>
                    Type
                  </para>
                </entry>
                <entry>
                  <para>
                    Result/Semantics
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase
                    role="identifier">precall</phrase><phrase role="special">(</phrase><phrase
                    role="identifier">a</phrase><phrase role="special">)</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    convertible to <code><phrase role="keyword">bool</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    returns <code><phrase role="keyword">false</phrase></code> and
                    <code><phrase role="identifier">PyErr_Occurred</phrase><phrase
                    role="special">()</phrase> <phrase role="special">!=</phrase>
                    <phrase role="number">0</phrase></code> upon failure, <code><phrase
                    role="keyword">true</phrase></code> otherwise.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">P</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">result_converter</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    A model of <code><phrase role="identifier">ResultConverterGenerator</phrase></code>.
                  </para>
                </entry>
                <entry>
                  <para>
                    An MPL unary Metafunction Class used produce the &quot;preliminary&quot;
                    result object.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase
                    role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase
                    role="identifier">a</phrase><phrase role="special">,</phrase>
                    <phrase role="identifier">r</phrase><phrase role="special">)</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    convertible to <code><phrase role="identifier">PyObject</phrase><phrase
                    role="special">*</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="number">0</phrase></code> and <code><phrase
                    role="identifier">PyErr_Occurred</phrase><phrase role="special">()</phrase>
                    <phrase role="special">!=</phrase> <phrase role="number">0</phrase></code>
                    upon failure. Must &quot;conserve references&quot; even in the
                    event of an exception. In other words, if <code><phrase role="identifier">r</phrase></code>
                    is not returned, its reference count must be decremented; if
                    another existing object is returned, its reference count must
                    be incremented.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">P</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">extract_return_type</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    A model of Metafunction.
                  </para>
                </entry>
                <entry>
                  <para>
                    An MPL unary Metafunction used extract the return type from a
                    given signature. By default it is derived from <code><phrase
                    role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">front</phrase></code>.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
    </section>
    <section id="concepts.dereferenceable">
      <title><link linkend="concepts.dereferenceable">Dereferenceable</link></title>
      <section id="concepts.dereferenceable.introduction">
        <title><link linkend="concepts.dereferenceable.introduction">Introduction</link></title>
        <para>
          Instances of a <code><phrase role="identifier">Dereferenceable</phrase></code>
          type can be used like a pointer to access an lvalue.
        </para>
      </section>
      <section id="concepts.dereferenceable.concept_requirements">
        <title><link linkend="concepts.dereferenceable.concept_requirements">Concept
        Requirements</link></title>
        <para>
          In the table below, <code><phrase role="identifier">T</phrase></code> is
          a model of Dereferenceable, and <code><phrase role="identifier">x</phrase></code>
          denotes an object of type <code><phrase role="identifier">T</phrase></code>.
          In addition, all pointers are <code><phrase role="identifier">Dereferenceable</phrase></code>.
        </para>
        <informaltable frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>
                    Expression
                  </para>
                </entry>
                <entry>
                  <para>
                    Result
                  </para>
                </entry>
                <entry>
                  <para>
                    Operational Semantics
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">get_pointer</phrase><phrase role="special">(</phrase><phrase
                    role="identifier">x</phrase><phrase role="special">)</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    convertible to <code><phrase role="identifier">pointee</phrase><phrase
                    role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
                    role="special">&gt;::</phrase><phrase role="identifier">type</phrase><phrase
                    role="special">*</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="special">&amp;*</phrase><phrase role="identifier">x</phrase></code>,
                    or a null pointer
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
    </section>
    <section id="concepts.extractor">
      <title><link linkend="concepts.extractor">Extractor</link></title>
      <section id="concepts.extractor.introduction">
        <title><link linkend="concepts.extractor.introduction">Introduction</link></title>
        <para>
          An Extractor is a class which Boost.Python can use to extract C++ objects
          from Python objects, and is typically used by facilities that define <code><phrase
          role="identifier">from_python</phrase></code> conversions for &quot;traditional&quot;
          Python extension types.
        </para>
      </section>
      <section id="concepts.extractor.concept_requirements">
        <title><link linkend="concepts.extractor.concept_requirements">Concept Requirements</link></title>
        <para>
          In the table below, <code><phrase role="identifier">X</phrase></code> denotes
          a model of <code><phrase role="identifier">Extractor</phrase></code> and
          <code><phrase role="identifier">a</phrase></code> denotes an instance of
          a Python object type.
        </para>
        <informaltable frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>
                    Expression
                  </para>
                </entry>
                <entry>
                  <para>
                    Type
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">execute</phrase><phrase role="special">(</phrase><phrase
                    role="identifier">a</phrase><phrase role="special">)</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    non-void
                  </para>
                </entry>
                <entry>
                  <para>
                    Returns the C++ object being extracted. The execute function
                    must not be overloaded.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <code><phrase role="special">&amp;</phrase><phrase role="identifier">a</phrase><phrase
                    role="special">.</phrase><phrase role="identifier">ob_type</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="identifier">PyTypeObject</phrase><phrase
                    role="special">**</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    Points to the <code><phrase role="identifier">ob_type</phrase></code>
                    field of an object which is layout-compatible with <code><phrase
                    role="identifier">PyObject</phrase></code>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="concepts.extractor.notes">
        <title><link linkend="concepts.extractor.notes">Notes</link></title>
        <para>
          Informally, an Extractor's execute member must be a non-overloaded static
          function whose single argument is a Python object type. Acceptable Python
          object types include those publicly (and unambiguously) derived from PyObject,
          and POD types which are layout-compatible with PyObject.
        </para>
      </section>
    </section>
    <section id="concepts.holdergenerator">
      <title><link linkend="concepts.holdergenerator">HolderGenerator</link></title>
      <section id="concepts.holdergenerator.introduction">
        <title><link linkend="concepts.holdergenerator.introduction">Introduction</link></title>
        <para>
          A HolderGenerator is a unary metafunction class which returns types suitable
          for holding instances of its argument in a wrapped C++ class instance.
        </para>
      </section>
      <section id="concepts.holdergenerator.concept_requirements">
        <title><link linkend="concepts.holdergenerator.concept_requirements">Concept
        Requirements</link></title>
        <para>
          In the table below, <code><phrase role="identifier">G</phrase></code> denotes
          an type which models <code><phrase role="identifier">HolderGenerator</phrase></code>,
          and <code><phrase role="identifier">X</phrase></code> denotes a class type.
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>
                    Expression
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">G</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">apply</phrase><phrase role="special">&lt;</phrase><phrase
                    role="identifier">X</phrase><phrase role="special">&gt;::</phrase><phrase
                    role="identifier">type</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    A concrete subclass of <code><phrase role="identifier">instance_holder</phrase></code>
                    which can hold objects of type <code><phrase role="identifier">X</phrase></code>.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
    </section>
    <section id="concepts.resultconverter">
      <title><link linkend="concepts.resultconverter">ResultConverter</link></title>
      <section id="concepts.resultconverter.introduction">
        <title><link linkend="concepts.resultconverter.introduction">Introduction</link></title>
        <para>
          A ResultConverter for a type <code><phrase role="identifier">T</phrase></code>
          is a type whose instances can be used to convert C++ return values of type
          <code><phrase role="identifier">T</phrase></code> <code><phrase role="identifier">to_python</phrase></code>.
          A ResultConverterGenerator is an MPL unary metafunction class which, given
          the return type of a C++ function, returns a ResultConverter for that type.
          ResultConverters in Boost.Python generally inspect library's registry of
          converters to find a suitable converter, but converters which don't use
          the registry are also possible.
        </para>
      </section>
      <section id="concepts.resultconverter.resultconverter_concept_requirem">
        <title><link linkend="concepts.resultconverter.resultconverter_concept_requirem">ResultConverter
        Concept Requirements</link></title>
        <para>
          In the table below, <code><phrase role="identifier">C</phrase></code> denotes
          a ResultConverter type for a type <code><phrase role="identifier">R</phrase></code>,
          <code><phrase role="identifier">c</phrase></code> denotes an object of
          type <code><phrase role="identifier">C</phrase></code>, and <code><phrase
          role="identifier">r</phrase></code> denotes an object of type <code><phrase
          role="identifier">R</phrase></code>.
        </para>
        <informaltable frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>
                    Expression
                  </para>
                </entry>
                <entry>
                  <para>
                    Type
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">C</phrase> <phrase role="identifier">c</phrase></code>
                  </para>
                </entry>
                <entry>
                </entry>
                <entry>
                  <para>
                    Constructs a <code><phrase role="identifier">c</phrase></code>
                    object.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase
                    role="identifier">convertible</phrase><phrase role="special">()</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    convertible to <code><phrase role="keyword">bool</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="keyword">false</phrase></code> iff no conversion
                    from any <code><phrase role="identifier">R</phrase></code> value
                    to a Python object is possible.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">c</phrase><phrase role="special">(</phrase><phrase
                    role="identifier">r</phrase><phrase role="special">)</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    convertible to <code><phrase role="identifier">PyObject</phrase><phrase
                    role="special">*</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    A pointer to a Python object corresponding to <code><phrase role="identifier">r</phrase></code>,
                    or <code><phrase role="number">0</phrase></code> iff <code><phrase
                    role="identifier">r</phrase></code> could not be converted <code><phrase
                    role="identifier">to_python</phrase></code>, in which case <code><phrase
                    role="identifier">PyErr_Occurred</phrase></code> should return
                    non-zero.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase
                    role="identifier">get_pytype</phrase><phrase role="special">()</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="identifier">PyTypeObject</phrase> <phrase
                    role="keyword">const</phrase> <phrase role="special">*</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    A pointer to a Python Type object corresponding to result of
                    the conversion, or <code><phrase role="number">0</phrase></code>.
                    Used for documentation generation. If <code><phrase role="number">0</phrase></code>
                    is returned the generated type in the documentation will be object.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="concepts.resultconverter.resultconvertergenerator_concept">
        <title><link linkend="concepts.resultconverter.resultconvertergenerator_concept">ResultConverterGenerator
        Concept Requirements</link></title>
        <para>
          In the table below, <code><phrase role="identifier">G</phrase></code> denotes
          a ResultConverterGenerator type and <code><phrase role="identifier">R</phrase></code>
          denotes a possible C++ function return type.
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>
                    Expression
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">G</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">apply</phrase><phrase role="special">&lt;</phrase><phrase
                    role="identifier">R</phrase><phrase role="special">&gt;::</phrase><phrase
                    role="identifier">type</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    A ResultConverter type for <code><phrase role="identifier">R</phrase></code>.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
    </section>
    <section id="concepts.objectwrapper">
      <title><link linkend="concepts.objectwrapper">ObjectWrapper</link></title>
      <section id="concepts.objectwrapper.introduction">
        <title><link linkend="concepts.objectwrapper.introduction">Introduction</link></title>
        <para>
          This page defines two concepts used to describe classes which manage a
          Python objects, and which are intended to support usage with a Python-like
          syntax.
        </para>
      </section>
      <section id="concepts.objectwrapper.objectwrapper_concept_requiremen">
        <title><link linkend="concepts.objectwrapper.objectwrapper_concept_requiremen">ObjectWrapper
        Concept Requirements</link></title>
        <para>
          Models of the ObjectWrapper concept have <link linkend="object_wrappers.boost_python_object_hpp.class_object">object</link>
          as a publicly-accessible base class, and are used to supply special construction
          behavior and/or additional convenient functionality through (often templated)
          member functions. Except when the return type R is itself an <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>,
          a member function invocation of the form
        </para>
<programlisting><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">some_function</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">a2</phrase><phrase role="special">,...</phrase><phrase role="identifier">an</phrase><phrase role="special">)</phrase></programlisting>
        <para>
          always has semantics equivalent to:
        </para>
<programlisting><phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">R</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;some_function&quot;</phrase><phrase role="special">)(</phrase><phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">),</phrase> <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">a2</phrase><phrase role="special">),...</phrase><phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">an</phrase><phrase role="special">)))()</phrase></programlisting>
        <para>
          (see <link linkend="concepts.objectwrapper.caveat">caveat</link> below).
        </para>
      </section>
      <section id="concepts.objectwrapper.typewrapper_concept_requirements">
        <title><link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper
        Concept Requirements</link></title>
        <para>
          TypeWrapper is a refinement of <link linkend="concepts.objectwrapper.objectwrapper_concept_requiremen">ObjectWrapper</link>
          which is associated with a particular Python type <code><phrase role="identifier">X</phrase></code>.
          For a given TypeWrapper <code><phrase role="identifier">T</phrase></code>,
          a valid constructor expression
        </para>
<programlisting><phrase role="identifier">T</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">a2</phrase><phrase role="special">,...</phrase><phrase role="identifier">an</phrase><phrase role="special">)</phrase></programlisting>
        <para>
          builds a new T object managing the result of invoking X with arguments
          corresponding to
        </para>
<programlisting><phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">),</phrase> <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">a2</phrase><phrase role="special">),...</phrase><phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">an</phrase><phrase role="special">)</phrase></programlisting>
        <para>
          . When used as arguments to wrapped C++ functions, or as the template parameter
          to <link linkend="to_from_python_type_conversion.boost_python_extract_hpp.class_template_extract">extract&lt;&gt;</link>,
          only instances of the associated Python type will be considered a match.
        </para>
      </section>
      <section id="concepts.objectwrapper.caveat">
        <title><link linkend="concepts.objectwrapper.caveat">Caveat</link></title>
        <para>
          The upshot of the special member function invocation rules when the return
          type is a TypeWrapper is that it is possible for the returned object to
          manage a Python object of an inappropriate type. This is not usually a
          serious problem; the worst-case result is that errors will be detected
          at runtime a little later than they might otherwise be. For an example
          of how this can occur, note that the <link linkend="object_wrappers.boost_python_dict_hpp.class_dict">dict</link>
          member function <code><phrase role="identifier">items</phrase></code> returns
          an object of type <link linkend="object_wrappers.boost_python_list_hpp.class_list">list</link>.
          Now suppose the user defines this <code><phrase role="identifier">dict</phrase></code>
          subclass in Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">mydict</phrase><phrase role="special">(</phrase><phrase role="identifier">dict</phrase><phrase role="special">):</phrase>
<phrase role="special">...</phrase>     <phrase role="identifier">def</phrase> <phrase role="identifier">items</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">):</phrase>
<phrase role="special">...</phrase>         <phrase role="keyword">return</phrase> <phrase role="identifier">tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">dict</phrase><phrase role="special">.</phrase><phrase role="identifier">items</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">))</phrase> <phrase role="special">#</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">tuple</phrase>
</programlisting>
        <para>
          Since an instance of <code><phrase role="identifier">mydict</phrase></code>
          is also an instance of <code><phrase role="identifier">dict</phrase></code>,
          when used as an argument to a wrapped C++ function, <link linkend="object_wrappers.boost_python_dict_hpp.class_dict">boost::python::dict</link>
          can accept objects of Python type <code><phrase role="identifier">mydict</phrase></code>.
          Invoking <code><phrase role="identifier">items</phrase><phrase role="special">()</phrase></code>
          on this object can result in an instance of <link linkend="object_wrappers.boost_python_list_hpp.class_list">boost::python::list</link>
          which actually holds a Python <code><phrase role="identifier">tuple</phrase></code>.
          Subsequent attempts to use <code><phrase role="identifier">list</phrase></code>
          methods (e.g. <code><phrase role="identifier">append</phrase></code>, or
          any other mutating operation) on this object will raise the same exception
          that would occur if you tried to do it from Python.
        </para>
      </section>
    </section>
  </chapter>
  <chapter id="high_level_components" last-revision="$Date: 2016/08/05 20:23:10 $"
  xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>High Level Components</title>
    <section id="high_level_components.boost_python_class_hpp">
      <title><link linkend="high_level_components.boost_python_class_hpp">boost/python/class.hpp</link></title>
      <section id="high_level_components.boost_python_class_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_class_hpp.introduction">Introduction</link></title>
        <para>
          <code><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase
          role="special">/</phrase><phrase role="identifier">python</phrase><phrase
          role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase
          role="identifier">hpp</phrase><phrase role="special">&gt;</phrase></code>
          defines the interface through which users expose their C++ classes to Python.
          It declares the <code><phrase role="identifier">class_</phrase></code>
          class template, which is parameterized on the class type being exposed.
          It also exposes the <code><phrase role="identifier">init</phrase></code>,
          <code><phrase role="identifier">optional</phrase></code> and <code><phrase
          role="identifier">bases</phrase></code> utility class templates, which
          are used in conjunction with <code><phrase role="identifier">class_</phrase></code>.
        </para>
        <para>
          <code><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase
          role="special">/</phrase><phrase role="identifier">python</phrase><phrase
          role="special">/</phrase><phrase role="identifier">class_fwd</phrase><phrase
          role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase
          role="special">&gt;</phrase></code> contains a forward declaration of the
          <code><phrase role="identifier">class_</phrase></code> class template.
        </para>
      </section>
      <section id="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel">
        <title><link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel">Class
        template <code><phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase
        role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="identifier">Bases</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">HeldType</phrase><phrase
        role="special">,</phrase> <phrase role="identifier">NonCopyable</phrase><phrase
        role="special">&gt;</phrase></code></link></title>
        <para>
          Creates a Python class associated with the C++ type passed as its first
          parameter. Although it has four template parameters, only the first one
          is required. The three optional arguments can actually be supplied <emphasis
          role="bold">in any order</emphasis>; Boost.Python determines the role of
          the argument from its type.
        </para>
        <informaltable frame="all">
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Template Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
                <entry>
                  <para>
                    Default
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">T</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    A class type.
                  </para>
                </entry>
                <entry>
                  <para>
                    The class being wrapped
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Bases
                  </para>
                </entry>
                <entry>
                  <para>
                    A specialization of <link linkend="high_level_components.boost_python_class_hpp.class_template_bases_t1_t2_tn">bases&lt;...&gt;</link>
                    which specifies previously-exposed C++ base classes of <code><phrase
                    role="identifier">T</phrase></code>.
                  </para>
                </entry>
                <entry>
                  <para>
                    Registers <code><phrase role="identifier">from_python</phrase></code>
                    conversions from wrapped <code><phrase role="identifier">T</phrase></code>
                    instances to each of its exposed direct and indirect bases. For
                    each polymorphic base <code><phrase role="identifier">B</phrase></code>,
                    registers conversions from indirectly-held wrapped <code><phrase
                    role="identifier">B</phrase></code> instances to <code><phrase
                    role="identifier">T</phrase></code>.
                  </para>
                </entry>
                <entry>
                  <para>
                    <link linkend="high_level_components.boost_python_class_hpp.class_template_bases_t1_t2_tn">bases&lt;&gt;</link>
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    HeldType
                  </para>
                </entry>
                <entry>
                  <para>
                    Must be <code><phrase role="identifier">T</phrase></code>, a
                    class derived from <code><phrase role="identifier">T</phrase></code>,
                    or a <link linkend="concepts.dereferenceable.concept_requirements">Dereferenceable</link>
                    type for which <code><phrase role="identifier">pointee</phrase><phrase
                    role="special">&lt;</phrase><phrase role="identifier">HeldType</phrase><phrase
                    role="special">&gt;::</phrase><phrase role="identifier">type</phrase></code>
                    is <code><phrase role="identifier">T</phrase></code> or a class
                    derived from <code><phrase role="identifier">T</phrase></code>.
                  </para>
                </entry>
                <entry>
                  <para>
                    Specifies the type that is actually embedded in a Python object
                    wrapping a <code><phrase role="identifier">T</phrase></code>
                    instance when <code><phrase role="identifier">T</phrase></code>'s
                    constructor is called or when a <code><phrase role="identifier">T</phrase></code>
                    or <code><phrase role="identifier">T</phrase><phrase role="special">*</phrase></code>
                    is converted to Python without the use of <link linkend="function_invocation_and_creation.boost_python_ptr_hpp.functions">ptr</link>,
                    <code><phrase role="identifier">ref</phrase></code>, or <link
                    linkend="concepts.callpolicies">Call Policies</link> such as
                    <link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.class_template_return_internal_r">return_internal_reference</link>.
                    More details below.
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="identifier">T</phrase></code>
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    NonCopyable
                  </para>
                </entry>
                <entry>
                  <para>
                    If supplied, must be <code><phrase role="identifier">boost</phrase><phrase
                    role="special">::</phrase><phrase role="identifier">noncopyable</phrase></code>.
                  </para>
                </entry>
                <entry>
                  <para>
                    Suppresses automatic registration of <code><phrase role="identifier">to_python</phrase></code>
                    conversions which copy <code><phrase role="identifier">T</phrase></code>
                    instances. Required when <code><phrase role="identifier">T</phrase></code>
                    has no publicly-accessible copy constructor.
                  </para>
                </entry>
                <entry>
                  <para>
                    An unspecified type other than boost::noncopyable.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <section id="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.heldtype_semantics">
          <title><link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.heldtype_semantics">HeldType
          Semantics</link></title>
          <orderedlist>
            <listitem>
              <simpara>
                If HeldType is derived from <code><phrase role="identifier">T</phrase></code>,
                its exposed constructor(s) must accept an initial <code><phrase role="identifier">PyObject</phrase><phrase
                role="special">*</phrase></code> argument which refers back to the
                Python object that contains the HeldType instance, as shown in this
                example. This argument is not included in the <link linkend="high_level_components.boost_python_init_hpp.introduction.init_expressions">init-expression</link>
                passed to <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu">def(init_expr)</link>,
                below, nor is it passed explicitly by users when Python instances
                of <code><phrase role="identifier">T</phrase></code> are created.
                This idiom allows C++ virtual functions which will be overridden
                in Python to access the Python object so the Python method can be
                invoked. Boost.Python automatically registers additional converters
                which allow wrapped instances of <code><phrase role="identifier">T</phrase></code>
                to be passed to wrapped C++ functions expecting HeldType arguments.
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                Because Boost.Python will always allow wrapped instances of <code><phrase
                role="identifier">T</phrase></code> to be passed in place of HeldType
                arguments, specifying a smart pointer for HeldType allows users to
                pass Python <code><phrase role="identifier">T</phrase></code> instances
                where a smart pointer-to-T is expected. Smart pointers such as <code><phrase
                role="identifier">std</phrase><phrase role="special">::</phrase><phrase
                role="identifier">auto_ptr</phrase><phrase role="special">&lt;&gt;</phrase></code>
                or <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
                role="identifier">shared_ptr</phrase><phrase role="special">&lt;&gt;</phrase></code>
                which contain a nested type <code><phrase role="identifier">element_type</phrase></code>
                designating the referent type are automatically supported; additional
                smart pointer types can be supported by specializing <code><phrase
                role="identifier">pointee</phrase><phrase role="special">&lt;</phrase><phrase
                role="identifier">HeldType</phrase><phrase role="special">&gt;</phrase></code>.
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                As in case 1 above, when HeldType is a smart pointer to a class derived
                from <code><phrase role="identifier">T</phrase></code>, the initial
                <code><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase></code>
                argument must be supplied by all of HeldType's exposed constructors.
              </simpara>
            </listitem>
            <listitem>
              <simpara>
                Except in cases 1 and 3, users may optionally specify that T itself
                gets initialized with a similar initial <code><phrase role="identifier">PyObject</phrase><phrase
                role="special">*</phrase></code> argument by specializing <link linkend="utility_and_infrastructure.boost_python_has_back_reference_.class_template_has_back_referenc">has_back_reference&lt;T&gt;</link>.
              </simpara>
            </listitem>
          </orderedlist>
        </section>
        <section id="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_synopsis">
          <title><link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_synopsis">Class
          template <code><phrase role="identifier">class_</phrase></code> synopsis</link></title>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase>
    <phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Bases</phrase> <phrase role="special">=</phrase> <phrase role="identifier">bases</phrase><phrase role="special">&lt;&gt;</phrase>
          <phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">HeldType</phrase> <phrase role="special">=</phrase> <phrase role="identifier">T</phrase>
          <phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">NonCopyable</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase>
         <phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">class_</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
<phrase role="special">{</phrase>
  <phrase role="comment">// Constructors with default __init__</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">docstring</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// Constructors, specifying non-default __init__</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Init</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Init</phrase><phrase role="special">);</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Init</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">docstring</phrase><phrase role="special">,</phrase> <phrase role="identifier">Init</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// Exposing additional __init__ functions</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Init</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">Init</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// defining methods</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">);</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A3</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

  <phrase role="comment">// declaring method as static</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">staticmethod</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// exposing operators</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;);</phrase>

  <phrase role="comment">// Raw attribute modification</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">U</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">setattr</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">U</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

  <phrase role="comment">// exposing data members</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readonly</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase> <phrase role="identifier">T</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">);</phrase>

  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readwrite</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase> <phrase role="identifier">T</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// exposing static data members</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readonly</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">);</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readwrite</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// property creation</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">void</phrase> <phrase role="identifier">add_property</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Set</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">void</phrase> <phrase role="identifier">add_property</phrase><phrase role="special">(</phrase>
      <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">,</phrase> <phrase role="identifier">Set</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fset</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>

  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">void</phrase> <phrase role="identifier">add_static_property</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">);</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Set</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">void</phrase> <phrase role="identifier">add_static_property</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">,</phrase> <phrase role="identifier">Set</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fset</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// pickle support</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">PickleSuite</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">self</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_pickle</phrase><phrase role="special">(</phrase><phrase role="identifier">PickleSuite</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
  <phrase role="identifier">self</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">enable_pickling</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_constructor">
          <title><link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_constructor">Class
          template <code><phrase role="identifier">class_</phrase></code> constructors</link></title>
<programlisting><phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">docstring</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Init</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Init</phrase> <phrase role="identifier">init_spec</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Init</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">docstring</phrase><phrase role="special">,</phrase> <phrase role="identifier">Init</phrase> <phrase role="identifier">init_spec</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                  <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                  naming rules</ulink>. If docstring is supplied, it must be an
                  <link linkend="ntbs">ntbs</link>. If <code><phrase role="identifier">init_spec</phrase></code>
                  is supplied, it must be either the special enumeration constant
                  <code><phrase role="identifier">no_init</phrase></code> or an
                  <link linkend="high_level_components.boost_python_init_hpp.introduction.init_expressions">init-expression</link>
                  compatible with <code><phrase role="identifier">T</phrase></code>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Constructs a <code><phrase role="identifier">class_</phrase></code>
                  object holding a Boost.Python extension class named name. The named
                  attribute of the <link linkend="high_level_components.boost_python_scope_hpp.introduction">current
                  scope</link> is bound to the new extension class.
                </para>
                <para>
                  * If supplied, the value of docstring is bound to the <code><phrase
                  role="identifier">__doc__</phrase></code> attribute of the extension
                  class. * If <code><phrase role="identifier">init_spec</phrase></code>
                  is <code><phrase role="identifier">no_init</phrase></code>, a special
                  <code><phrase role="identifier">__init__</phrase></code> function
                  is generated which always raises a Python exception. Otherwise,
                  <code><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase
                  role="identifier">def</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">init_spec</phrase><phrase role="special">)</phrase></code>
                  is called. * If <code><phrase role="identifier">init_spec</phrase></code>
                  is not supplied, <code><phrase role="keyword">this</phrase><phrase
                  role="special">-&gt;</phrase><phrase role="identifier">def</phrase><phrase
                  role="special">(</phrase><phrase role="identifier">init</phrase><phrase
                  role="special">&lt;&gt;())</phrase></code> is called.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Allowing the user to specify constructor arguments in the <code><phrase
                  role="identifier">class_</phrase><phrase role="special">&lt;&gt;</phrase></code>
                  constructor helps her to avoid the common run-time errors which
                  result from invoking wrapped member functions without having exposed
                  an <code><phrase role="identifier">__init__</phrase></code> function
                  which creates the requisite <code><phrase role="identifier">T</phrase></code>
                  instance. Types which are not default-constructible will cause
                  a compile-time error unless <code><phrase role="identifier">Init</phrase></code>
                  is supplied. The user must always supply name as there is currently
                  no portable method to derive the text of the class name from its
                  type.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu">
          <title><link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu">Class
          template <code><phrase role="identifier">class_</phrase></code> modifier
          functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Init</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">Init</phrase> <phrase role="identifier">init_expr</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">init_expr</phrase></code> is the
                  result of an <link linkend="high_level_components.boost_python_init_hpp.introduction.init_expressions">init-expression</link>
                  compatible with <code><phrase role="identifier">T</phrase></code>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  For each <link linkend="high_level_components.boost_python_init_hpp.introduction.init_expressions">valid
                  prefix</link> <code><phrase role="identifier">P</phrase></code>
                  of <code><phrase role="identifier">Init</phrase></code>, adds an
                  <code><phrase role="identifier">__init__</phrase><phrase role="special">(...)</phrase></code>
                  function overload to the extension class accepting P as arguments.
                  Each overload generated constructs an object of HeldType according
                  to the semantics described above, using a copy of init_expr's call
                  policies. If the longest <link linkend="high_level_components.boost_python_init_hpp.introduction.init_expressions">valid
                  prefix</link> of Init contains N types and init_expr holds M keywords,
                  an initial sequence of the keywords are used for all but the first
                  N - M arguments of each overload.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Allows users to easily expose a class' constructor to Python.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a1</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a2</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A3</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a2</phrase><phrase role="special">,</phrase> <phrase role="identifier">A3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a3</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                  <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                  naming rules</ulink>. * If a1 is the result of an <link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">overload-dispatch-expression</link>,
                  only the second form is allowed and fn must be a pointer to function
                  or pointer to member function whose <link linkend="arity">arity</link>
                  is the same as A1's <link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">maximum
                  arity</link>.
                </para>
                <para>
                  <emphasis role="bold">Effects:</emphasis> For each prefix <code><phrase
                  role="identifier">P</phrase></code> of <code><phrase role="identifier">Fn</phrase></code>'s
                  sequence of argument types, beginning with the one whose length
                  is <code><phrase role="identifier">A1</phrase></code>'s <link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">minimum
                  arity</link>, adds a <code><phrase role="identifier">name</phrase><phrase
                  role="special">(...)</phrase></code> method overload to the extension
                  class. Each overload generated invokes a1's call-expression with
                  <code><phrase role="identifier">P</phrase></code>, using a copy
                  of a1's call policies. If the longest valid prefix of <code><phrase
                  role="identifier">A1</phrase></code> contains <code><phrase role="identifier">N</phrase></code>
                  types and a1 holds <code><phrase role="identifier">M</phrase></code>
                  keywords, an initial sequence of the keywords are used for all
                  but the first <code><phrase role="identifier">N</phrase> <phrase
                  role="special">-</phrase> <phrase role="identifier">M</phrase></code>
                  arguments of each overload.
                </para>
                <para>
                  * Otherwise, a single method overload is built around fn, which
                  must not be null:
                </para>
                <para>
                  * If fn is a function pointer, its first argument must be of the
                  form U, U cv&amp;, U cv*, or U cv* const&amp;, where T* is convertible
                  to U*, and a1-a3, if supplied, may be selected in any order from
                  the table below. * Otherwise, if fn is a member function pointer,
                  its target must be T or one of its public base classes, and a1-a3,
                  if supplied, may be selected in any order from the table below.
                  * Otherwise, Fn must be [derived from] <link linkend="object_wrappers.boost_python_object_hpp.class_object">object</link>,
                  and a1-a2, if supplied, may be selcted in any order from the first
                  two rows of the table below. To be useful, fn should be <ulink
                  url="http://www.python.org/doc/current/lib/built-in-funcs.html#l2h-6">callable</ulink>.
                </para>
                <informaltable frame="all">
                  <tgroup cols="3">
                    <thead>
                      <row>
                        <entry>
                          <para>
                            Mnemonic Name
                          </para>
                        </entry>
                        <entry>
                          <para>
                            Requirements/Type properties
                          </para>
                        </entry>
                        <entry>
                          <para>
                            Effects
                          </para>
                        </entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>
                          <para>
                            docstring
                          </para>
                        </entry>
                        <entry>
                          <para>
                            Any <link linkend="ntbs">ntbs</link>
                          </para>
                        </entry>
                        <entry>
                          <para>
                            Value will be bound to the __doc__ attribute of the resulting
                            method overload. If an earlier overload supplied a docstring,
                            two newline characters and the new docstring are appended
                            to it.
                          </para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>
                            policies
                          </para>
                        </entry>
                        <entry>
                          <para>
                            A model of <link linkend="concepts.callpolicies">CallPolicies</link>
                          </para>
                        </entry>
                        <entry>
                          <para>
                            A copy will be used as the call policies of the resulting
                            method overload.
                          </para>
                        </entry>
                      </row>
                      <row>
                        <entry>
                          <para>
                            keywords
                          </para>
                        </entry>
                        <entry>
                          <para>
                            The result of a <link linkend="function_invocation_and_creation.boost_python_args_hpp.introduction.keyword_expressions">keyword-expression</link>
                            specifying no more arguments than the <link linkend="arity">arity</link>
                            of fn.
                          </para>
                        </entry>
                        <entry>
                          <para>
                            A copy will be used as the call policies of the resulting
                            method overload.
                          </para>
                        </entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">staticmethod</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                  <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                  naming rules</ulink>, and corresponds to a method whose overloads
                  have all been defined.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Replaces the existing named attribute <code><phrase role="identifier">x</phrase></code>
                  with the result of invoking <code><phrase role="identifier">staticmethod</phrase><phrase
                  role="special">(</phrase><phrase role="identifier">x</phrase><phrase
                  role="special">)</phrase></code> in Python. Specifies that the
                  corresponding method is static and therefore no object instance
                  will be passed to it. This is equivalent to the Python statement:
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">setattr</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">staticmethod</phrase><phrase role="special">(</phrase><phrase role="identifier">getattr</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="identifier">name</phrase><phrase role="special">)))</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Note</term>
              <listitem>
                <para>
                  Attempting to invoke def(name,...) after invoking staticmethod(name)
                  will <link linkend="raise">raise</link> a RuntimeError.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Adds a Python <ulink url="http://www.python.org/doc/ref/specialnames.html">special
                  method</ulink> as described <link linkend="high_level_components.boost_python_operators_hpp">here</link>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">U</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">setattr</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">U</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">u</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                  <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                  naming rules</ulink>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Converts <code><phrase role="identifier">u</phrase></code> to Python
                  and adds it to the attribute dictionary of the extension class:
                </para>
<programlisting><phrase role="identifier">PyObject_SetAttrString</phrase><phrase role="special">(</phrase><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">ptr</phrase><phrase role="special">(),</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">u</phrase><phrase role="special">).</phrase><phrase role="identifier">ptr</phrase><phrase role="special">());</phrase></programlisting>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">add_property</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Set</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">add_property</phrase><phrase role="special">(</phrase>
      <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">,</phrase> <phrase role="identifier">Set</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fset</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  name is an <link linkend="ntbs">ntbs</link> which conform to Python's
                  <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                  naming rules</ulink>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Creates a new Python <ulink url="http://www.python.org/2.2.2/descrintro.html#property">property</ulink>
                  class instance, passing <code><phrase role="identifier">object</phrase><phrase
                  role="special">(</phrase><phrase role="identifier">fget</phrase><phrase
                  role="special">)</phrase></code> (and <code><phrase role="identifier">object</phrase><phrase
                  role="special">(</phrase><phrase role="identifier">fset</phrase><phrase
                  role="special">)</phrase></code> in the second form) with an (optional)
                  docstring <code><phrase role="identifier">doc</phrase></code> to
                  its constructor, then adds that property to the Python class object
                  under construction with the given attribute name.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Allows users to easily expose functions that can be invoked from
                  Python with attribute access syntax.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">add_static_property</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Get</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Set</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">add_static_property</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Get</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fget</phrase><phrase role="special">,</phrase> <phrase role="identifier">Set</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">fset</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                  <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                  naming rules</ulink>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Creates a Boost.Python.StaticProperty object, passing <code><phrase
                  role="identifier">object</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">fget</phrase><phrase role="special">)</phrase></code>
                  (and <code><phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">fset</phrase><phrase role="special">)</phrase></code>
                  in the second form) to its constructor, then adds that property
                  to the Python class under construction with the given attribute
                  name. StaticProperty is a special subclass of Python's property
                  class which can be called without an initial self argument.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Allows users to easily expose functions that can be invoked from
                  Python with static attribute access syntax.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readonly</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase> <phrase role="identifier">T</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readonly</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                  <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                  naming rules</ulink>. <code><phrase role="identifier">doc</phrase></code>
                  is also an <link linkend="ntbs">ntbs</link>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
<programlisting><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">add_property</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">pm</phrase><phrase role="special">),</phrase> <phrase role="identifier">doc</phrase><phrase role="special">);</phrase></programlisting>
                <para>
                  and
                </para>
<programlisting><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">add_static_property</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">d</phrase><phrase role="special">));</phrase></programlisting>
                <para>
                  respectively.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Allows users to easily expose a class' data member or free variable
                  such that it can be inspected from Python with a natural syntax.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readwrite</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase> <phrase role="identifier">T</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_readwrite</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">D</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
<programlisting><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">add_property</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">pm</phrase><phrase role="special">),</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">pm</phrase><phrase role="special">),</phrase> <phrase role="identifier">doc</phrase><phrase role="special">);</phrase></programlisting>
                <para>
                  and
                </para>
<programlisting><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">add_static_property</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">d</phrase><phrase role="special">),</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">d</phrase><phrase role="special">));</phrase></programlisting>
                <para>
                  respectively.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Allows users to easily expose a class' data or free variable member
                  such that it can be inspected and set from Python with a natural
                  syntax.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">PickleSuite</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">def_pickle</phrase><phrase role="special">(</phrase><phrase role="identifier">PickleSuite</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  PickleSuite must be publically derived from <link linkend="topics.pickle_support.the_pickle_interface">pickle_suite</link>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Defines a legal combination of the special attributes and methods:
                  __getinitargs__, __getstate__, __setstate__, __getstate_manages_dict__,
                  __safe_for_unpickling__, __reduce__
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Provides an <link linkend="topics.pickle_support.the_pickle_interface">easy
                  to use high-level interface</link> for establishing complete <link
                  linkend="topics.pickle_support.the_pickle_interface">pickle support</link>
                  for the wrapped class. The user is protected by compile-time consistency
                  checks.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">class_</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">enable_pickling</phrase><phrase role="special">();</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Defines the __reduce__ method and the __safe_for_unpickling__ attribute.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Light-weight alternative to def_pickle(). Enables implementation
                  of pickle support from Python.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="high_level_components.boost_python_class_hpp.class_template_bases_t1_t2_tn">
        <title><link linkend="high_level_components.boost_python_class_hpp.class_template_bases_t1_t2_tn">Class
        template bases&lt;T1, T2, ...TN&gt;</link></title>
        <para>
          An MPL sequence which can be used in class_&lt;...&gt; instantiations indicate
          a list of base classes.
        </para>
        <section id="high_level_components.boost_python_class_hpp.class_template_bases_t1_t2_tn.class_template_bases_synopsis">
          <title><link linkend="high_level_components.boost_python_class_hpp.class_template_bases_t1_t2_tn.class_template_bases_synopsis">Class
          template bases synopsis</link></title>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">T1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">bases</phrase>
  <phrase role="special">{};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
      </section>
      <section id="high_level_components.boost_python_class_hpp.examples">
        <title><link linkend="high_level_components.boost_python_class_hpp.examples">Examples</link></title>
        <para>
          Given a C++ class declaration:
        </para>
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">Foo</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">Bar</phrase><phrase role="special">,</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">Baz</phrase>
<phrase role="special">{</phrase>
 <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">y</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">m_name</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="keyword">void</phrase> <phrase role="identifier">name</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*);</phrase>

   <phrase role="keyword">double</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase> <phrase role="comment">// public data</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="special">...</phrase>
<phrase role="special">};</phrase>
</programlisting>
        <para>
          A corresponding Boost.Python extension class can be created with:
        </para>
<programlisting><phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">,</phrase><phrase role="identifier">bases</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">,</phrase><phrase role="identifier">Baz</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;Foo&quot;</phrase><phrase role="special">,</phrase>
          <phrase role="string">&quot;This is Foo's docstring.&quot;</phrase>
          <phrase role="string">&quot;It describes our Foo extension class&quot;</phrase><phrase role="special">,</phrase>

          <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">,</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">,</phrase><phrase role="string">&quot;y&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;__init__ docstring&quot;</phrase><phrase role="special">)</phrase>
          <phrase role="special">)</phrase>
   <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">double</phrase><phrase role="special">&gt;())</phrase>
   <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_name&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">get_name</phrase><phrase role="special">,</phrase> <phrase role="identifier">return_internal_reference</phrase><phrase role="special">&lt;&gt;())</phrase>
   <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;set_name&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">set_name</phrase><phrase role="special">)</phrase>
   <phrase role="special">.</phrase><phrase role="identifier">def_readwrite</phrase><phrase role="special">(</phrase><phrase role="string">&quot;value&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_def_hpp">
      <title><link linkend="high_level_components.boost_python_def_hpp">boost/python/def.hpp</link></title>
      <section id="high_level_components.boost_python_def_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_def_hpp.introduction">Introduction</link></title>
        <para>
          <code><phrase role="identifier">def</phrase><phrase role="special">()</phrase></code>
          is the function which can be used to expose C++ functions and callable
          objects as Python functions in the <link linkend="high_level_components.boost_python_scope_hpp.introduction">current
          scope</link>.
        </para>
      </section>
      <section id="high_level_components.boost_python_def_hpp.functions">
        <title><link linkend="high_level_components.boost_python_def_hpp.functions">Functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Fn</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A3</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">Fn</phrase> <phrase role="identifier">fn</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                naming rules</ulink>.
              </para>
              <para>
                * If <code><phrase role="identifier">Fn</phrase></code> is [derived
                from] <link linkend="object_wrappers.boost_python_object_hpp.class_object">object</link>,
                it will be added to the <link linkend="high_level_components.boost_python_scope_hpp.introduction">current
                scope</link> as a single overload. To be useful, <code><phrase role="identifier">fn</phrase></code>
                should be <ulink url="http://www.python.org/doc/current/lib/built-in-funcs.html#l2h-6">callable</ulink>.
                * If <code><phrase role="identifier">a1</phrase></code> is the result
                of an <link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">overload-dispatch-expression</link>,
                only the second form is allowed and <code><phrase role="identifier">fn</phrase></code>
                must be a pointer to function or pointer to member function whose
                <link linkend="arity">arity</link> is the same as A1's <link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">maximum
                arity</link>.
              </para>
              <para>
                <emphasis role="bold">Effects:</emphasis> For each prefix <code><phrase
                role="identifier">P</phrase></code> of <code><phrase role="identifier">Fn</phrase></code>'s
                sequence of argument types, beginning with the one whose length is
                <code><phrase role="identifier">A1</phrase></code>'s <link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">minimum
                arity</link>, adds a <code><phrase role="identifier">name</phrase><phrase
                role="special">(...)</phrase></code> function overload to the <link
                linkend="high_level_components.boost_python_scope_hpp.introduction">current
                scope</link>. Each overload generated invokes a1's call-expression
                with P, using a copy of a1's call policies. If the longest valid
                prefix of A1 contains N types and a1 holds M keywords, an initial
                sequence of the keywords are used for all but the first N - M arguments
                of each overload.
              </para>
              <para>
                * Otherwise, fn must be a non-null function or member function pointer,
                and a single function overload built around fn is added to the current
                scope. If any of a1-a3 are supplied, they may be selected in any
                order from the table below.
              </para>
              <informaltable frame="all">
                <tgroup cols="3">
                  <thead>
                    <row>
                      <entry>
                        <para>
                          Mnemonic Name
                        </para>
                      </entry>
                      <entry>
                        <para>
                          Requirements/Type properties
                        </para>
                      </entry>
                      <entry>
                        <para>
                          Effects
                        </para>
                      </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>
                        <para>
                          docstring
                        </para>
                      </entry>
                      <entry>
                        <para>
                          Any <link linkend="ntbs">ntbs</link>
                        </para>
                      </entry>
                      <entry>
                        <para>
                          Value will be bound to the <code><phrase role="identifier">__doc__</phrase></code>
                          attribute of the resulting method overload.
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>
                          policies
                        </para>
                      </entry>
                      <entry>
                        <para>
                          A model of <link linkend="concepts.callpolicies">CallPolicies</link>
                        </para>
                      </entry>
                      <entry>
                        <para>
                          A copy will be used as the call policies of the resulting
                          method overload.
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>
                          keywords
                        </para>
                      </entry>
                      <entry>
                        <para>
                          The result of a <link linkend="function_invocation_and_creation.boost_python_args_hpp.introduction.keyword_expressions">keyword-expression</link>
                          specifying no more arguments than the <link linkend="arity">arity</link>
                          of <code><phrase role="identifier">fn</phrase></code>.
                        </para>
                      </entry>
                      <entry>
                        <para>
                          A copy will be used as the call policies of the resulting
                          method overload.
                        </para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_def_hpp.example">
        <title><link linkend="high_level_components.boost_python_def_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">args</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">y</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="string">&quot;foo&quot;</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">def_test</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo</phrase><phrase role="special">,</phrase> <phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;y&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo's docstring&quot;</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_def_visitor_hpp">
      <title><link linkend="high_level_components.boost_python_def_visitor_hpp">boost/python/def_visitor.hpp</link></title>
      <section id="high_level_components.boost_python_def_visitor_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_def_visitor_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/def_visitor.hpp&gt; provides a generic visitation interface
          through which the <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel">class_</link>
          def member functionality can be extended non-intrusively to avoid cluttering
          the <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel">class_</link>
          interface. It declares the <code><phrase role="identifier">def_visitor</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
          role="special">&gt;</phrase></code> class template, which is parameterized
          on the derived type <code><phrase role="identifier">DerivedVisitor</phrase></code>,
          which provides the actual <code><phrase role="identifier">def</phrase></code>
          functionality through its <code><phrase role="identifier">visit</phrase></code>
          member functions.
        </para>
      </section>
      <section id="high_level_components.boost_python_def_visitor_hpp.class_def_visitor">
        <title><link linkend="high_level_components.boost_python_def_visitor_hpp.class_def_visitor">Class
        <code><phrase role="identifier">def_visitor</phrase></code></link></title>
        <para>
          The class <code><phrase role="identifier">def_visitor</phrase></code> is
          a base class paramaterized by its derived class. The <code><phrase role="identifier">def_visitor</phrase></code>
          class is a protocol class. Its derived class, DerivedVisitor, is expected
          to have a member function <code><phrase role="identifier">visit</phrase></code>.
          The <code><phrase role="identifier">def_visitor</phrase></code> class is
          never instantiated directly. Instead, an instance of its subclass, DerivedVisitor,
          is passed on as an argument to the <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel">class_</link>
          <code><phrase role="identifier">def</phrase></code> member function.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">DerivedVisitor</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">def_visitor</phrase> <phrase role="special">{};</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                The client supplied class DerivedVisitor template parameter is expected
                to: * be privately derived from def_visitor * grant friend access
                to class def_visitor_access * define either or both visit member
                functions listed in the table below:
              </para>
              <informaltable frame="all">
                <tgroup cols="4">
                  <thead>
                    <row>
                      <entry>
                        <para>
                          Expression
                        </para>
                      </entry>
                      <entry>
                        <para>
                          Return Type
                        </para>
                      </entry>
                      <entry>
                        <para>
                          Requirements
                        </para>
                      </entry>
                      <entry>
                        <para>
                          Effects
                        </para>
                      </entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>
                        <para>
                          <code><phrase role="identifier">visitor</phrase><phrase
                          role="special">.</phrase><phrase role="identifier">visit</phrase><phrase
                          role="special">(</phrase><phrase role="identifier">cls</phrase><phrase
                          role="special">)</phrase></code>
                        </para>
                      </entry>
                      <entry>
                        <para>
                          <code><phrase role="keyword">void</phrase></code>
                        </para>
                      </entry>
                      <entry>
                        <para>
                          <code><phrase role="identifier">cls</phrase></code> is
                          an instance of a <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel">class_</link>
                          being wrapped to Python. <code><phrase role="identifier">visitor</phrase></code>
                          is a <code><phrase role="identifier">def_visitor</phrase></code>
                          derived class.
                        </para>
                      </entry>
                      <entry>
                        <para>
                          A call to <code><phrase role="identifier">cls</phrase><phrase
                          role="special">.</phrase><phrase role="identifier">def</phrase><phrase
                          role="special">(</phrase><phrase role="identifier">visitor</phrase><phrase
                          role="special">)</phrase></code> forwards to this member
                          function.
                        </para>
                      </entry>
                    </row>
                    <row>
                      <entry>
                        <para>
                          <code><phrase role="identifier">visitor</phrase><phrase
                          role="special">.</phrase><phrase role="identifier">visit</phrase><phrase
                          role="special">(</phrase><phrase role="identifier">cls</phrase><phrase
                          role="special">,</phrase> <phrase role="identifier">name</phrase><phrase
                          role="special">,</phrase> <phrase role="identifier">options</phrase><phrase
                          role="special">)</phrase></code>
                        </para>
                      </entry>
                      <entry>
                        <para>
                          <code><phrase role="keyword">void</phrase></code>
                        </para>
                      </entry>
                      <entry>
                        <para>
                          <code><phrase role="identifier">cls</phrase></code> is
                          a <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel">class_</link>
                          instance, name is a C string. <code><phrase role="identifier">visitor</phrase></code>
                          is a <code><phrase role="identifier">def_visitor</phrase></code>
                          derived class. options is a context specific optional argument.
                        </para>
                      </entry>
                      <entry>
                        <para>
                          A call to <code><phrase role="identifier">cls</phrase><phrase
                          role="special">.</phrase><phrase role="identifier">def</phrase><phrase
                          role="special">(</phrase><phrase role="identifier">name</phrase><phrase
                          role="special">,</phrase> <phrase role="identifier">visitor</phrase><phrase
                          role="special">)</phrase></code> or <code><phrase role="identifier">cls</phrase><phrase
                          role="special">.</phrase><phrase role="identifier">def</phrase><phrase
                          role="special">(</phrase><phrase role="identifier">name</phrase><phrase
                          role="special">,</phrase> <phrase role="identifier">visitor</phrase><phrase
                          role="special">,</phrase> <phrase role="identifier">options</phrase><phrase
                          role="special">)</phrase></code> forwards to this member
                          function.
                        </para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_def_visitor_hpp.example">
        <title><link linkend="high_level_components.boost_python_def_visitor_hpp.example">Example</link></title>
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">X</phrase> <phrase role="special">{/*...*/};</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">my_def_visitor</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">def_visitor</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">my_def_visitor</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">friend</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">def_visitor_access</phrase><phrase role="special">;</phrase>

  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">classT</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">void</phrase> <phrase role="identifier">visit</phrase><phrase role="special">(</phrase><phrase role="identifier">classT</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">c</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
  <phrase role="special">{</phrase>
    <phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">my_def_visitor</phrase><phrase role="special">::</phrase><phrase role="identifier">foo</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;bar&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">my_def_visitor</phrase><phrase role="special">::</phrase><phrase role="identifier">bar</phrase><phrase role="special">);</phrase>
  <phrase role="special">}</phrase>

  <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">foo</phrase><phrase role="special">(</phrase><phrase role="identifier">X</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">);</phrase>
  <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">bar</phrase><phrase role="special">(</phrase><phrase role="identifier">X</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">self</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">my_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">)</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">my_def_visitor</phrase><phrase role="special">());</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_docstring_options_h">
      <title><link linkend="high_level_components.boost_python_docstring_options_h">boost/python/docstring_options.hpp</link></title>
      <section id="high_level_components.boost_python_docstring_options_h.introduction">
        <title><link linkend="high_level_components.boost_python_docstring_options_h.introduction">Introduction</link></title>
        <para>
          Boost.Python supports user-defined docstrings with automatic appending
          of C++ signatures. These features are enabled by default. The class docstring_options
          is available to selectively suppress the user-defined docstrings, signatures,
          or both.
        </para>
      </section>
      <section id="high_level_components.boost_python_docstring_options_h.class_docstring_options">
        <title><link linkend="high_level_components.boost_python_docstring_options_h.class_docstring_options">Class
        <code><phrase role="identifier">docstring_options</phrase></code></link></title>
        <para>
          Controls the appearance of docstrings of wrapped functions and member functions
          for the life-time of the instance. The instances are noncopyable to eliminate
          the possibility of surprising side effects.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase>

  <phrase role="keyword">class</phrase> <phrase role="identifier">docstring_options</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase>
  <phrase role="special">{</phrase>
  <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">docstring_options</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">show_all</phrase><phrase role="special">=</phrase><phrase role="keyword">true</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">docstring_options</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">show_user_defined</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">show_signatures</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">docstring_options</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">show_user_defined</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">show_py_signatures</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">show_cpp_signatures</phrase><phrase role="special">);</phrase>
    <phrase role="special">~</phrase><phrase role="identifier">docstring_options</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">disable_user_defined</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">enable_user_defined</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">disable_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">enable_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">disable_py_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">enable_py_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">disable_cpp_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">enable_cpp_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">disable_all</phrase><phrase role="special">();</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">enable_all</phrase><phrase role="special">();</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_docstring_options_h.class_dostring_options_construct">
        <title><link linkend="high_level_components.boost_python_docstring_options_h.class_dostring_options_construct">Class
        dostring_options constructors</link></title>
<programlisting><phrase role="identifier">docstring_options</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">show_all</phrase><phrase role="special">=</phrase><phrase role="keyword">true</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Constructs a docstring_options object which controls the appearance
                of function and member-function docstrings defined in the code that
                follows. If show_all is true, both the user-defined docstrings and
                the automatically generated Python and C++ signatures are shown.
                If show_all is false the <code><phrase role="identifier">__doc__</phrase></code>
                attributes are <code><phrase role="identifier">None</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">docstring_options</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">show_user_defined</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">show_signatures</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Constructs a <code><phrase role="identifier">docstring_options</phrase></code>
                object which controls the appearance of function and member-function
                docstrings defined in the code that follows. Iff <code><phrase role="identifier">show_user_defined</phrase></code>
                is <code><phrase role="keyword">true</phrase></code>, the user-defined
                docstrings are shown. Iff <code><phrase role="identifier">show_signatures</phrase></code>
                is <code><phrase role="keyword">true</phrase></code>, Python and
                C++ signatures are automatically added. If both <code><phrase role="identifier">show_user_defined</phrase></code>
                and <code><phrase role="identifier">show_signatures</phrase></code>
                are <code><phrase role="keyword">false</phrase></code>, the <code><phrase
                role="identifier">__doc__</phrase></code> attributes are <code><phrase
                role="identifier">None</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">docstring_options</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">show_user_defined</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">show_py_signatures</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">show_cpp_signatures</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Constructs a <code><phrase role="identifier">docstring_options</phrase></code>
                object which controls the appearance of function and member-function
                docstrings defined in the code that follows. Iff <code><phrase role="identifier">show_user_defined</phrase></code>
                is <code><phrase role="keyword">true</phrase></code>, the user-defined
                docstrings are shown. Iff <code><phrase role="identifier">show_py_signatures</phrase></code>
                is <code><phrase role="keyword">true</phrase></code>, Python signatures
                are automatically added. Iff <code><phrase role="identifier">show_cpp_signatures</phrase></code>
                is true, C++ signatures are automatically added. If all parameters
                are <code><phrase role="keyword">false</phrase></code>, the <code><phrase
                role="identifier">__doc__</phrase></code> attributes are <code><phrase
                role="identifier">None</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_docstring_options_h.class_docstring_options_destruct">
        <title><link linkend="high_level_components.boost_python_docstring_options_h.class_docstring_options_destruct">Class
        docstring_options destructor</link></title>
<programlisting><phrase role="special">~</phrase><phrase role="identifier">docstring_options</phrase><phrase role="special">();</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Restores the previous state of the docstring options. In particular,
                if <code><phrase role="identifier">docstring_options</phrase></code>
                instances are in nested C++ scopes the settings effective in the
                enclosing scope are restored. If the last <code><phrase role="identifier">docstring_options</phrase></code>
                instance goes out of scope the default &quot;all on&quot; settings
                are restored.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_docstring_options_h.class_docstring_options_modifier">
        <title><link linkend="high_level_components.boost_python_docstring_options_h.class_docstring_options_modifier">Class
        <code><phrase role="identifier">docstring_options</phrase></code> modifier
        functions</link></title>
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">disable_user_defined</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">enable_user_defined</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">disable_signatures</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">enable_signatures</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">disable_py_signatures</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">enable_py_signatures</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">disable_cpp_signatures</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">enable_cpp_signatures</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">disable_all</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">enable_all</phrase><phrase role="special">();</phrase>
</programlisting>
        <para>
          These member functions dynamically change the appearance of docstrings
          in the code that follows. The <code><phrase role="special">*</phrase><phrase
          role="identifier">_user_defined</phrase><phrase role="special">()</phrase></code>
          and <code><phrase role="special">*</phrase><phrase role="identifier">_signatures</phrase><phrase
          role="special">()</phrase></code> member functions are provided for fine-grained
          control. The <code><phrase role="special">*</phrase><phrase role="identifier">_all</phrase><phrase
          role="special">()</phrase></code> member functions are convenient shortcuts
          to manipulate all settings simultaneously.
        </para>
      </section>
      <section id="high_level_components.boost_python_docstring_options_h.example">
        <title><link linkend="high_level_components.boost_python_docstring_options_h.example">Example</link></title>
        <section id="high_level_components.boost_python_docstring_options_h.example.docstring_options_defined_at_com">
          <title><link linkend="high_level_components.boost_python_docstring_options_h.example.docstring_options_defined_at_com">Docstring
          options defined at compile time</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">docstring_options</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">foo</phrase><phrase role="special">()</phrase> <phrase role="special">{}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">demo</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">docstring_options</phrase> <phrase role="identifier">doc_options</phrase><phrase role="special">(</phrase><phrase role="identifier">DEMO_DOCSTRING_SHOW_ALL</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;foo doc&quot;</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            If compiled with <code><phrase role="special">-</phrase><phrase role="identifier">DDEMO_DOCSTRING_SHOW_ALL</phrase><phrase
            role="special">=</phrase><phrase role="keyword">true</phrase></code>:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">demo</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">foo</phrase><phrase role="special">()</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">None</phrase> <phrase role="special">:</phrase> <phrase role="identifier">foo</phrase> <phrase role="identifier">doc</phrase>
<phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">foo</phrase><phrase role="special">(</phrase><phrase role="keyword">void</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="keyword">void</phrase>
</programlisting>
          <para>
            If compiled with <code><phrase role="special">-</phrase><phrase role="identifier">DDEMO_DOCSTRING_SHOW_ALL</phrase><phrase
            role="special">=</phrase><phrase role="keyword">false</phrase></code>:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">demo</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">None</phrase>
</programlisting>
        </section>
        <section id="high_level_components.boost_python_docstring_options_h.example.selective_suppressions">
          <title><link linkend="high_level_components.boost_python_docstring_options_h.example.selective_suppressions">Selective
          suppressions</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">args</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">docstring_options</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">foo1</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">i</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">foo2</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">l</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">l</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">foo3</phrase><phrase role="special">(</phrase><phrase role="keyword">float</phrase> <phrase role="identifier">f</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">f</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">foo4</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase> <phrase role="identifier">d</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">d</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">demo</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">docstring_options</phrase> <phrase role="identifier">doc_options</phrase><phrase role="special">;</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo1&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo1</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;i&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo1 doc&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">doc_options</phrase><phrase role="special">.</phrase><phrase role="identifier">disable_user_defined</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo2&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo2</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;l&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo2 doc&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">doc_options</phrase><phrase role="special">.</phrase><phrase role="identifier">disable_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo3&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo3</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo3 doc&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">doc_options</phrase><phrase role="special">.</phrase><phrase role="identifier">enable_user_defined</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo4&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo4</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;d&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo4 doc&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">doc_options</phrase><phrase role="special">.</phrase><phrase role="identifier">enable_py_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo5&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo4</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;d&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo5 doc&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">doc_options</phrase><phrase role="special">.</phrase><phrase role="identifier">disable_py_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">doc_options</phrase><phrase role="special">.</phrase><phrase role="identifier">enable_cpp_signatures</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo6&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo4</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;d&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo6 doc&quot;</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">demo</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo1</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">foo1</phrase><phrase role="special">(</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">)</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">:</phrase> <phrase role="identifier">foo1</phrase> <phrase role="identifier">doc</phrase>
<phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">foo1</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="keyword">int</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo2</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">foo2</phrase><phrase role="special">(</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">)</phrase><phrase role="identifier">l</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">:</phrase>
<phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">foo2</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">l</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="keyword">int</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo3</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">None</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo4</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">foo4</phrase> <phrase role="identifier">doc</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo5</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">foo5</phrase><phrase role="special">(</phrase> <phrase role="special">(</phrase><phrase role="keyword">float</phrase><phrase role="special">)</phrase><phrase role="identifier">d</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="keyword">int</phrase> <phrase role="special">:</phrase> <phrase role="identifier">foo5</phrase> <phrase role="identifier">doc</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo6</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">foo6</phrase> <phrase role="identifier">doc</phrase>
<phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">foo6</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase> <phrase role="identifier">d</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="keyword">int</phrase>
</programlisting>
        </section>
        <section id="high_level_components.boost_python_docstring_options_h.example.wrapping_from_multiple_c_scopes">
          <title><link linkend="high_level_components.boost_python_docstring_options_h.example.wrapping_from_multiple_c_scopes">Wrapping
          from multiple C++ scopes</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">args</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">docstring_options</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">foo1</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">i</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">foo2</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">l</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">l</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">bar1</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">i</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">bar2</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">l</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">l</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">namespace</phrase> <phrase role="special">{</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">wrap_foos</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
        <phrase role="comment">// no docstring_options here</phrase>
        <phrase role="comment">//   -&gt; settings from outer C++ scope are in effect</phrase>
        <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo1&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo1</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;i&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo1 doc&quot;</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo2&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo2</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;l&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;foo2 doc&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">void</phrase> <phrase role="identifier">wrap_bars</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">show_user_defined</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">bool</phrase> <phrase role="identifier">show_signatures</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">docstring_options</phrase> <phrase role="identifier">doc_options</phrase><phrase role="special">(</phrase><phrase role="identifier">show_user_defined</phrase><phrase role="special">,</phrase> <phrase role="identifier">show_signatures</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;bar1&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">bar1</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;i&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;bar1 doc&quot;</phrase><phrase role="special">);</phrase>
        <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;bar2&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">bar2</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;l&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;bar2 doc&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">demo</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">docstring_options</phrase> <phrase role="identifier">doc_options</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">wrap_foos</phrase><phrase role="special">();</phrase>
    <phrase role="identifier">wrap_bars</phrase><phrase role="special">();</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">demo</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo1</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">None</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">foo2</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">None</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">bar1</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">bar1</phrase> <phrase role="identifier">doc</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">demo</phrase><phrase role="special">.</phrase><phrase role="identifier">bar2</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">bar2</phrase> <phrase role="identifier">doc</phrase>
</programlisting>
        </section>
      </section>
    </section>
    <section id="high_level_components.boost_python_enum_hpp">
      <title><link linkend="high_level_components.boost_python_enum_hpp">boost/python/enum.hpp</link></title>
      <section id="high_level_components.boost_python_enum_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_enum_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/enum.hpp&gt; defines the interface through which users
          expose their C++ enumeration types to Python. It declares the <code><phrase
          role="identifier">enum_</phrase></code> class template, which is parameterized
          on the enumeration type being exposed.
        </para>
      </section>
      <section id="high_level_components.boost_python_enum_hpp.class_template_enum">
        <title><link linkend="high_level_components.boost_python_enum_hpp.class_template_enum">Class
        template <code><phrase role="identifier">enum_</phrase></code></link></title>
        <para>
          Creates a Python class derived from Python's <code><phrase role="keyword">int</phrase></code>
          type which is associated with the C++ type passed as its first parameter.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">enum_</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
  <phrase role="special">{</phrase>
    <phrase role="identifier">enum_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">enum_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">enum_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">export_values</phrase><phrase role="special">();</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_enum_hpp.class_template_enum_constructors">
        <title><link linkend="high_level_components.boost_python_enum_hpp.class_template_enum_constructors">Class
        template <code><phrase role="identifier">enum_</phrase></code> constructors</link></title>
<programlisting><phrase role="identifier">enum_</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                naming rules</ulink>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Constructs an <code><phrase role="identifier">enum_</phrase></code>
                object holding a Python extension type derived from <code><phrase
                role="keyword">int</phrase></code> which is named <code><phrase role="identifier">name</phrase></code>.
                The named attribute of the <link linkend="high_level_components.boost_python_scope_hpp">current
                scope</link> is bound to the new extension type.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_enum_hpp.class_template_enum_modifier_fun">
        <title><link linkend="high_level_components.boost_python_enum_hpp.class_template_enum_modifier_fun">Class
        template <code><phrase role="identifier">enum_</phrase></code> modifier functions</link></title>
<programlisting><phrase role="identifier">enum_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                name is an <link linkend="ntbs">ntbs</link> which conforms to Python's
                <ulink url="http://www.python.org/doc/current/ref/identifiers.html">identifier
                naming rules</ulink>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                adds an instance of the wrapped enumeration type with value x to
                the type's dictionary as the named attribute.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">enum_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">export_values</phrase><phrase role="special">();</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                sets attributes in the <link linkend="high_level_components.boost_python_scope_hpp">current
                scope</link> with the same names and values as all enumeration values
                exposed so far by calling value().
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_enum_hpp.example">
        <title><link linkend="high_level_components.boost_python_enum_hpp.example">Example</link></title>
        <para>
          C++ module definition
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">enum</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">enum</phrase> <phrase role="identifier">color</phrase> <phrase role="special">{</phrase> <phrase role="identifier">red</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="identifier">green</phrase> <phrase role="special">=</phrase> <phrase role="number">2</phrase><phrase role="special">,</phrase> <phrase role="identifier">blue</phrase> <phrase role="special">=</phrase> <phrase role="number">4</phrase> <phrase role="special">};</phrase>

<phrase role="identifier">color</phrase> <phrase role="identifier">identity_</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">enums</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">enum_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">color</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;color&quot;</phrase><phrase role="special">)</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">(</phrase><phrase role="string">&quot;red&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">red</phrase><phrase role="special">)</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">(</phrase><phrase role="string">&quot;green&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">green</phrase><phrase role="special">)</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">export_values</phrase><phrase role="special">()</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">(</phrase><phrase role="string">&quot;blue&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">blue</phrase><phrase role="special">)</phrase>
    <phrase role="special">;</phrase>

  <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;identity&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">identity_</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          Interactive Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">enums</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">red</phrase><phrase role="special">)</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">red</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">red</phrase><phrase role="special">)</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">red</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">green</phrase><phrase role="special">)</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">green</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">green</phrase><phrase role="special">)</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">green</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">blue</phrase><phrase role="special">)</phrase>
<phrase role="identifier">Traceback</phrase> <phrase role="special">(</phrase><phrase role="identifier">most</phrase> <phrase role="identifier">recent</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">last</phrase><phrase role="special">):</phrase>
  <phrase role="identifier">File</phrase> <phrase role="string">&quot;&lt;stdin&gt;&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">line</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="identifier">in</phrase> <phrase role="special">?</phrase>
<phrase role="identifier">NameError</phrase><phrase role="special">:</phrase> <phrase role="identifier">name</phrase> <phrase role="char">'blue'</phrase> <phrase role="identifier">is</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">defined</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">blue</phrase><phrase role="special">)</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">blue</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">))</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">red</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase><phrase role="special">(</phrase><phrase role="number">2</phrase><phrase role="special">))</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">green</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">))</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">)</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="identifier">color</phrase><phrase role="special">(</phrase><phrase role="number">4</phrase><phrase role="special">))</phrase>
<phrase role="identifier">enums</phrase><phrase role="special">.</phrase><phrase role="identifier">color</phrase><phrase role="special">.</phrase><phrase role="identifier">blue</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">identity</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase>
<phrase role="identifier">Traceback</phrase> <phrase role="special">(</phrase><phrase role="identifier">most</phrase> <phrase role="identifier">recent</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">last</phrase><phrase role="special">):</phrase>
  <phrase role="identifier">File</phrase> <phrase role="string">&quot;&lt;stdin&gt;&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">line</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="identifier">in</phrase> <phrase role="special">?</phrase>
<phrase role="identifier">TypeError</phrase><phrase role="special">:</phrase> <phrase role="identifier">bad</phrase> <phrase role="identifier">argument</phrase> <phrase role="identifier">type</phrase> <phrase role="keyword">for</phrase> <phrase role="identifier">built</phrase><phrase role="special">-</phrase><phrase role="identifier">in</phrase> <phrase role="identifier">operation</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_errors_hpp">
      <title><link linkend="high_level_components.boost_python_errors_hpp">boost/python/errors.hpp</link></title>
      <section id="high_level_components.boost_python_errors_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_errors_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/errors.hpp&gt; provides types and functions for managing
          and translating between Python and C++ exceptions. This is relatively low-level
          functionality that is mostly used internally by Boost.Python. Users should
          seldom need it.
        </para>
      </section>
      <section id="high_level_components.boost_python_errors_hpp.class_error_already_set">
        <title><link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">Class
        <code><phrase role="identifier">error_already_set</phrase></code></link></title>
        <para>
          error_already_set is an exception type which can be thrown to indicate
          that a Python error has occurred. If thrown, the precondition is that
          <ulink url="http://www.python.org/doc/2.2/api/exceptionHandling.html#l2h-71">PyErr_Occurred()</ulink>
          returns a value convertible to <code><phrase role="keyword">true</phrase></code>.
          Portable code shouldn't throw this exception type directly, but should
          instead use <link linkend="high_level_components.boost_python_errors_hpp.functions">throw_error_already_set()</link>,
          below.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">error_already_set</phrase> <phrase role="special">{};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_errors_hpp.functions">
        <title><link linkend="high_level_components.boost_python_errors_hpp.functions">Functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">handle_exception</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="identifier">f</phrase><phrase role="special">)</phrase> <phrase role="keyword">throw</phrase><phrase role="special">();</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">handle_exception</phrase><phrase role="special">()</phrase> <phrase role="keyword">throw</phrase><phrase role="special">();</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                The first form requires that the expression function0&lt;void&gt;(f)
                is valid. The second form requires that a C++ exception is currently
                being handled (see section 15.1 in the C++ standard).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                The first form calls f() inside a try block which first attempts
                to use all registered <link linkend="high_level_components.boost_python_exception_translato">exception
                translators</link>. If none of those translates the exception, the
                catch clauses then set an appropriate Python exception for the C++
                exception caught, returning true if an exception was thrown, false
                otherwise. The second form passes a function which rethrows the exception
                currently being handled to the first form.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Postconditions</term>
            <listitem>
              <para>
                No exception is being handled
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                nothing
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                At inter-language boundaries it is important to ensure that no C++
                exceptions escape, since the calling language usually doesn't have
                the equipment necessary to properly unwind the stack. Use handle_exception
                to manage exception translation whenever your C++ code is called
                directly from the Python API. This is done for you automatically
                by the usual function wrapping facilities: <link linkend="function_invocation_and_creation.boost_python_make_function_hpp.functions">make_function()</link>,
                <link linkend="function_invocation_and_creation.boost_python_make_function_hpp.functions">make_constructor()</link>,
                <link linkend="high_level_components.boost_python_def_hpp.functions">def()</link>
                and <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu">class_::def()</link>.
                The second form can be more convenient to use (see the example below),
                but various compilers have problems when exceptions are rethrown
                from within an enclosing try block.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">expect_non_null</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                x
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                error_already_set() iff x == 0.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                Simplifies error-handling when calling functions in the Python/C
                API which return 0 on error.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">throw_error_already_set</phrase><phrase role="special">();</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                throw error_already_set();
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                Simplifies error-handling when calling functions in the Python/C
                API which return 0 on error.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">throw_error_already_set</phrase><phrase role="special">();</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                throw error_already_set();
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                Many platforms and compilers are not able to consistently catch exceptions
                thrown across shared library boundaries. Using this function from
                the Boost.Python library ensures that the appropriate catch block
                in handle_exception() can catch the exception.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_errors_hpp.example">
        <title><link linkend="high_level_components.boost_python_errors_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">errors</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">object</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">handle</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Returns a std::string which has the same value as obj's &quot;__name__&quot;</phrase>
<phrase role="comment">// attribute.</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">get_name</phrase><phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">object</phrase> <phrase role="identifier">obj</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="comment">// throws if there's no __name__ attribute</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">expect_non_null</phrase><phrase role="special">(</phrase>
      <phrase role="identifier">PyObject_GetAttrString</phrase><phrase role="special">(</phrase><phrase role="identifier">obj</phrase><phrase role="special">.</phrase><phrase role="identifier">ptr</phrase><phrase role="special">(),</phrase> <phrase role="string">&quot;__name__&quot;</phrase><phrase role="special">));</phrase>

   <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">s</phrase> <phrase role="special">=</phrase> <phrase role="identifier">PyString_AsString</phrase><phrase role="special">(</phrase><phrase role="identifier">p</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">s</phrase> <phrase role="special">!=</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">Py_DECREF</phrase><phrase role="special">(</phrase><phrase role="identifier">p</phrase><phrase role="special">);</phrase>

   <phrase role="comment">// throws if it's not a Python string</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">result</phrase><phrase role="special">(</phrase>
      <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">expect_non_null</phrase><phrase role="special">(</phrase>
         <phrase role="identifier">PyString_AsString</phrase><phrase role="special">(</phrase><phrase role="identifier">p</phrase><phrase role="special">)));</phrase>

   <phrase role="identifier">Py_DECREF</phrase><phrase role="special">(</phrase><phrase role="identifier">p</phrase><phrase role="special">);</phrase> <phrase role="comment">// Done with p</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">//</phrase>
<phrase role="comment">// Demonstrate form 1 of handle_exception</phrase>
<phrase role="comment">//</phrase>

<phrase role="comment">// Place into result a Python Int object whose value is 1 if a and b have</phrase>
<phrase role="comment">// identical &quot;__name__&quot; attributes, 0 otherwise.</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">same_name_impl</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*&amp;</phrase> <phrase role="identifier">result</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">object</phrase> <phrase role="identifier">a</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">object</phrase> <phrase role="identifier">b</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">PyInt_FromLong</phrase><phrase role="special">(</phrase>
      <phrase role="identifier">get_name</phrase><phrase role="special">(</phrase><phrase role="identifier">a</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">get_name</phrase><phrase role="special">(</phrase><phrase role="identifier">a2</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">object</phrase> <phrase role="identifier">borrowed_object</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">object</phrase><phrase role="special">(</phrase>
        <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;&gt;(</phrase>
             <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">)));</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">// This is an example Python 'C' API interface function</phrase>
<phrase role="keyword">extern</phrase> <phrase role="string">&quot;C&quot;</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase>
<phrase role="identifier">same_name</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">keywords</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">a1</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">a2</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">if</phrase> <phrase role="special">(!</phrase><phrase role="identifier">PyArg_ParseTuple</phrase><phrase role="special">(</phrase><phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="keyword">const_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">*&gt;(</phrase><phrase role="string">&quot;OO&quot;</phrase><phrase role="special">),</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">a2</phrase><phrase role="special">))</phrase>
      <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="comment">// Use boost::bind to make an object compatible with</phrase>
   <phrase role="comment">// boost::Function0&lt;void&gt;</phrase>
   <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">handle_exception</phrase><phrase role="special">(</phrase>
         <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">bind</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">void</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">same_name_impl</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">ref</phrase><phrase role="special">(</phrase><phrase role="identifier">result</phrase><phrase role="special">),</phrase> <phrase role="identifier">borrowed_object</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">),</phrase> <phrase role="identifier">borrowed_object</phrase><phrase role="special">(</phrase><phrase role="identifier">a2</phrase><phrase role="special">))))</phrase>
   <phrase role="special">{</phrase>
      <phrase role="comment">// an exception was thrown; the Python error was set by</phrase>
      <phrase role="comment">// handle_exception()</phrase>
      <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="special">}</phrase>

   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">//</phrase>
<phrase role="comment">// Demonstrate form 2 of handle_exception. Not well-supported by all</phrase>
<phrase role="comment">// compilers.</phrase>
<phrase role="comment">//</phrase>
<phrase role="keyword">extern</phrase> <phrase role="string">&quot;C&quot;</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase>
<phrase role="identifier">same_name2</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">keywords</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">a1</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">a2</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">if</phrase> <phrase role="special">(!</phrase><phrase role="identifier">PyArg_ParseTuple</phrase><phrase role="special">(</phrase><phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="keyword">const_cast</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase><phrase role="special">*&gt;(</phrase><phrase role="string">&quot;OO&quot;</phrase><phrase role="special">),</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">a2</phrase><phrase role="special">))</phrase>
      <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">try</phrase> <phrase role="special">{</phrase>
      <phrase role="keyword">return</phrase> <phrase role="identifier">PyInt_FromLong</phrase><phrase role="special">(</phrase>
         <phrase role="identifier">get_name</phrase><phrase role="special">(</phrase><phrase role="identifier">borrowed_object</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">))</phrase> <phrase role="special">==</phrase> <phrase role="identifier">get_name</phrase><phrase role="special">(</phrase><phrase role="identifier">borrowed_object</phrase><phrase role="special">(</phrase><phrase role="identifier">a2</phrase><phrase role="special">)));</phrase>
   <phrase role="special">}</phrase>
   <phrase role="keyword">catch</phrase><phrase role="special">(...)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="comment">// If an exception was thrown, translate it to Python</phrase>
      <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">handle_exception</phrase><phrase role="special">();</phrase>
      <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="special">}</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_exception_translato">
      <title><link linkend="high_level_components.boost_python_exception_translato">boost/python/exception_translator.hpp</link></title>
      <section id="high_level_components.boost_python_exception_translato.introduction">
        <title><link linkend="high_level_components.boost_python_exception_translato.introduction">Introduction</link></title>
        <para>
          As described <link linkend="high_level_components.boost_python_errors_hpp.introduction">here</link>,
          it is important to make sure that exceptions thrown by C++ code do not
          pass into the Python interpreter core. By default, Boost.Python translates
          all C++ exceptions thrown by wrapped functions and module init functions
          into Python, but the default translators are extremely limited: most C++
          exceptions will appear in Python as a <ulink url="http://www.python.org/doc/current/lib/module-exceptions.html">RuntimeError</ulink>
          exception whose representation is 'Unidentifiable C++ Exception'. To produce
          better error messages, users can register additional exception translators
          as described below.
        </para>
      </section>
      <section id="high_level_components.boost_python_exception_translato.function_register_exception_tran">
        <title><link linkend="high_level_components.boost_python_exception_translato.function_register_exception_tran">Function
        <code><phrase role="identifier">register_exception_translator</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">ExceptionType</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Translate</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">register_exception_translator</phrase><phrase role="special">(</phrase><phrase role="identifier">Translate</phrase> <phrase role="identifier">translate</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                Translate is CopyConstructible, and the following code must be well-formed:
              </para>
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="identifier">ExceptionType</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="identifier">translate</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase></programlisting>
              <para>
                . The expression <code><phrase role="identifier">translate</phrase><phrase
                role="special">(</phrase><phrase role="identifier">x</phrase><phrase
                role="special">)</phrase></code> must either throw a C++ exception,
                or a subsequent call to <code><phrase role="identifier">PyErr_Occurred</phrase><phrase
                role="special">()</phrase></code> must return 1.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Adds a copy of translate to the sequence of exception translators
                tried when Boost.Python catches an exception that is about to pass
                into Python's core interpreter. The new translator will get &quot;first
                shot&quot; at translating all exceptions matching the catch clause
                shown above. Any subsequently-registered translators will be allowed
                to translate the exception earlier. A translator which cannot translate
                a given C++ exception can re-throw it, and it will be handled by
                a translator which was registered earlier (or by the default translator).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_exception_translato.example">
        <title><link linkend="high_level_components.boost_python_exception_translato.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">exception_translator</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">exception</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">my_exception</phrase> <phrase role="special">:</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">exception</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">what</phrase><phrase role="special">()</phrase> <phrase role="keyword">throw</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="string">&quot;One of my exceptions&quot;</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">translate</phrase><phrase role="special">(</phrase><phrase role="identifier">my_exception</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">e</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// Use the Python 'C' API to set up an exception object</phrase>
    <phrase role="identifier">PyErr_SetString</phrase><phrase role="special">(</phrase><phrase role="identifier">PyExc_RuntimeError</phrase><phrase role="special">,</phrase> <phrase role="identifier">e</phrase><phrase role="special">.</phrase><phrase role="identifier">what</phrase><phrase role="special">());</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">something_which_throws</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
    <phrase role="special">...</phrase>
    <phrase role="keyword">throw</phrase> <phrase role="identifier">my_exception</phrase><phrase role="special">();</phrase>
    <phrase role="special">...</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">exception_translator_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
  <phrase role="identifier">register_exception_translator</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">my_exception</phrase><phrase role="special">&gt;(&amp;</phrase><phrase role="identifier">translate</phrase><phrase role="special">);</phrase>

  <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;something_which_throws&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">something_which_throws</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_init_hpp">
      <title><link linkend="high_level_components.boost_python_init_hpp">boost/python/init.hpp</link></title>
      <section id="high_level_components.boost_python_init_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_init_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/init.hpp&gt; defines the interface for exposing C++ constructors
          to Python as extension class <code><phrase role="identifier">__init__</phrase></code>
          functions.
        </para>
        <section id="high_level_components.boost_python_init_hpp.introduction.init_expressions">
          <title><link linkend="high_level_components.boost_python_init_hpp.introduction.init_expressions">init-expressions</link></title>
          <para>
            An init-expression is used to describe a family of <code><phrase role="identifier">__init__</phrase></code>
            methods to be generated for an extension class, and the result has the
            following properties:
          </para>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>docstring</term>
              <listitem>
                <para>
                  An <link linkend="ntbs">ntbs</link> whose value will bound to the
                  method's <code><phrase role="identifier">__doc__</phrase></code>
                  attribute
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>keywords</term>
              <listitem>
                <para>
                  A <link linkend="function_invocation_and_creation.boost_python_args_hpp.introduction.keyword_expressions">keyword-expression</link>
                  which will be used to name (a trailing subsequence of) the arguments
                  to the generated <code><phrase role="identifier">__init__</phrase></code>
                  function(s).
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>call_policies</term>
              <listitem>
                <para>
                  An instance of a model of <link linkend="concepts.callpolicies">CallPolicies</link>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>argument_types</term>
              <listitem>
                <para>
                  An MPL sequence of C++ argument types which will be used to construct
                  the wrapped C++ object. An init expression has one or more valid
                  prefixes which are given by a sequence of prefixes of its argument
                  types.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="high_level_components.boost_python_init_hpp.class_template_init">
        <title><link linkend="high_level_components.boost_python_init_hpp.class_template_init">Class
        template <code><phrase role="identifier">init</phrase></code></link></title>
        <para>
          A MPL sequence which can be used to specify a family of one or more __init__
          functions. Only the last Ti supplied may be an instantiation of optional&lt;...&gt;.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">T1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">init</phrase>
  <phrase role="special">{</phrase>
    <phrase role="identifier">init</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Keywords</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">init</phrase><phrase role="special">(</phrase><phrase role="identifier">Keywords</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">kw</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Keywords</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">init</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">,</phrase> <phrase role="identifier">Keywords</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">kw</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">CallPolicies</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">CallPolicies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="high_level_components.boost_python_init_hpp.class_template_init.class_template_init_constructors">
          <title><link linkend="high_level_components.boost_python_init_hpp.class_template_init.class_template_init_constructors">Class
          template <code><phrase role="identifier">init</phrase></code> constructors</link></title>
<programlisting><phrase role="identifier">init</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Keywords</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">init</phrase><phrase role="special">(</phrase><phrase role="identifier">Keywords</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">kw</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Keywords</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">init</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">doc</phrase><phrase role="special">,</phrase> <phrase role="identifier">Keywords</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">kw</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  If supplied, doc is an <link linkend="ntbs">ntbs</link>. If supplied,
                  kw is the result of a
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  The result is an init-expression whose docstring is doc and whose
                  keywords are a reference to kw. If the first form is used, the
                  resulting expression's keywords are empty. The expression's call
                  policies are an instance of <link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici">default_call_policies</link>.
                  If Tn is <link linkend="high_level_components.boost_python_init_hpp.class_template_optional">optional&lt;U1,
                  U2,... Um&gt;</link>, the expression's valid prefixes are given
                  by:
                </para>
<programlisting><phrase role="special">(</phrase><phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase><phrase role="special">-</phrase><phrase role="number">1</phrase><phrase role="special">),</phrase> <phrase role="special">(</phrase><phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase><phrase role="special">-</phrase><phrase role="number">1</phrase> <phrase role="special">,</phrase> <phrase role="identifier">U1</phrase><phrase role="special">),</phrase> <phrase role="special">(</phrase><phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase><phrase role="special">-</phrase><phrase role="number">1</phrase> <phrase role="special">,</phrase> <phrase role="identifier">U1</phrase><phrase role="special">,</phrase> <phrase role="identifier">U2</phrase><phrase role="special">),</phrase> <phrase role="special">...(</phrase><phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase><phrase role="special">-</phrase><phrase role="number">1</phrase> <phrase role="special">,</phrase> <phrase role="identifier">U1</phrase><phrase role="special">,</phrase> <phrase role="identifier">U2</phrase><phrase role="special">,...</phrase><phrase role="identifier">Um</phrase><phrase role="special">)</phrase></programlisting>
                <para>
                  . Otherwise, the expression has one valid prefix given by the template
                  arguments the user specified.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="high_level_components.boost_python_init_hpp.class_template_init.class_template_init_observer_fun">
          <title><link linkend="high_level_components.boost_python_init_hpp.class_template_init.class_template_init_observer_fun">Class
          template <code><phrase role="identifier">init</phrase></code> observer
          functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  Policies is a model of <link linkend="concepts.callpolicies">CallPolicies</link>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Returns a new <link linkend="high_level_components.boost_python_init_hpp.introduction.init_expressions">init-expression</link>
                  with all the same properties as the init object except that its
                  call policies are replaced by a reference to policies.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="high_level_components.boost_python_init_hpp.class_template_optional">
        <title><link linkend="high_level_components.boost_python_init_hpp.class_template_optional">Class
        template <code><phrase role="identifier">optional</phrase></code> </link></title>
        <para>
          A MPL sequence which can be used to specify the optional arguments to an
          __init__ function.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">T1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">optional</phrase> <phrase role="special">{};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_init_hpp.example">
        <title><link linkend="high_level_components.boost_python_init_hpp.example">Example</link></title>
        <para>
          Given the C++ declarations:
        </para>
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
 <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">Y</phrase><phrase role="special">*</phrase> <phrase role="identifier">y</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">m_y</phrase><phrase role="special">(</phrase><phrase role="identifier">y</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
   <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase><phrase role="special">);</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Y</phrase><phrase role="special">*</phrase> <phrase role="identifier">m_y</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
        <para>
          A corresponing Boost.Python extension class can be created with:
        </para>
<programlisting><phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;This is X's docstring.&quot;</phrase><phrase role="special">,</phrase>
          <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">,</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">,</phrase><phrase role="string">&quot;y&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;X.__init__'s docstring&quot;</phrase><phrase role="special">)[</phrase>
                <phrase role="identifier">with_custodian_and_ward</phrase><phrase role="special">&lt;</phrase><phrase role="number">1</phrase><phrase role="special">,</phrase><phrase role="number">3</phrase><phrase role="special">&gt;()]</phrase>
          <phrase role="special">)</phrase>
   <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">double</phrase><phrase role="special">&gt;())</phrase>
   <phrase role="special">;</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_iterator_hpp">
      <title><link linkend="high_level_components.boost_python_iterator_hpp">boost/python/iterator.hpp</link></title>
      <section id="high_level_components.boost_python_iterator_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/iterator.hpp&gt; provides types and functions for creating
          <ulink url="http://www.python.org/doc/current/lib/typeiter.html">Python
          iterators</ulink> from C++ Containers and Iterators. Note that if your
          <code><phrase role="identifier">class_</phrase></code> supports random-access
          iterators, implementing <ulink url="http://www.python.org/doc/current/ref/sequence-types.html#l2h-128">__getitem__</ulink>
          (also known as the Sequence Protocol) may serve you better than using this
          facility: Python will automatically create an iterator type for you (see
          <ulink url="http://www.python.org/doc/current/lib/built-in-funcs.html#l2h-35"><code><phrase
          role="identifier">iter</phrase><phrase role="special">()</phrase></code></ulink>),
          and each access can be range-checked, leaving no possiblity of accessing
          through an invalidated C++ iterator.
        </para>
      </section>
      <section id="high_level_components.boost_python_iterator_hpp.class_template_iterator">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.class_template_iterator">Class
        template <code><phrase role="identifier">iterator</phrase></code></link></title>
        <para>
          Instances of <code><phrase role="identifier">iterator</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">C</phrase><phrase role="special">,</phrase><phrase role="identifier">P</phrase><phrase
          role="special">&gt;</phrase></code> hold a reference to a callable Python
          object which, when invoked from Python, expects a single argument c convertible
          to C and creates a Python iterator that traverses <code><phrase role="special">[</phrase><phrase
          role="identifier">c</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase
          role="special">(),</phrase> <phrase role="identifier">c</phrase><phrase
          role="special">.</phrase><phrase role="identifier">end</phrase><phrase
          role="special">())</phrase></code>. The optional <link linkend="concepts.callpolicies">CallPolicies</link>
          <code><phrase role="identifier">P</phrase></code> can be used to control
          how elements are returned during iteration.
        </para>
        <para>
          In the table below, c is an instance of Container.
        </para>
        <informaltable frame="all">
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Template Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
                <entry>
                  <para>
                    Default
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    Container
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="special">[</phrase><phrase role="identifier">c</phrase><phrase
                    role="special">.</phrase><phrase role="identifier">begin</phrase><phrase
                    role="special">(),</phrase><phrase role="identifier">c</phrase><phrase
                    role="special">.</phrase><phrase role="identifier">end</phrase><phrase
                    role="special">()</phrase></code>) is a valid Iterator range.
                  </para>
                </entry>
                <entry>
                  <para>
                    The result will convert its argument to c and call c.begin()
                    and c.end() to acquire iterators. To invoke Container's const
                    <code><phrase role="identifier">begin</phrase><phrase role="special">()</phrase></code>
                    and <code><phrase role="identifier">end</phrase><phrase role="special">()</phrase></code>
                    functions, make it const.
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    NextPolicies
                  </para>
                </entry>
                <entry>
                  <para>
                    A default-constructible model of <link linkend="concepts.callpolicies">CallPolicies</link>.
                  </para>
                </entry>
                <entry>
                  <para>
                    Applied to the resulting iterators' <code><phrase role="identifier">next</phrase><phrase
                    role="special">()</phrase></code> method.
                  </para>
                </entry>
                <entry>
                  <para>
                    An unspecified model of <link linkend="concepts.callpolicies">CallPolicies</link>
                    which always makes a copy of the result of deferencing the underlying
                    C++ iterator
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
  <phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Container</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">NextPolicies</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">iterator</phrase> <phrase role="special">:</phrase> <phrase role="identifier">object</phrase>
    <phrase role="special">{</phrase>
      <phrase role="identifier">iterator</phrase><phrase role="special">();</phrase>
    <phrase role="special">};</phrase>
  <phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_iterator_hpp.class_template_iterator_construc">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.class_template_iterator_construc">Class
        template iterator constructors</link></title>
<programlisting><phrase role="identifier">iterator</phrase><phrase role="special">()</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Initializes its base class with the result of:
              </para>
<programlisting><phrase role="identifier">range</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">NextPolicies</phrase><phrase role="special">&gt;(&amp;</phrase><phrase role="identifier">iterators</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Container</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">begin</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">iterators</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Container</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">end</phrase><phrase role="special">)</phrase></programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Postconditions</term>
            <listitem>
              <para>
                <code><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase
                role="identifier">get</phrase><phrase role="special">()</phrase></code>
                points to a Python callable object which creates a Python iterator
                as described above.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                Provides an easy way to create iterators for the common case where
                a C++ class being wrapped provides <code><phrase role="identifier">begin</phrase><phrase
                role="special">()</phrase></code> and <code><phrase role="identifier">end</phrase><phrase
                role="special">()</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_iterator_hpp.class_template_iterators">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.class_template_iterators">Class
        template <code><phrase role="identifier">iterators</phrase></code></link></title>
        <para>
          A utility class template which provides a way to reliably call its argument's
          <code><phrase role="identifier">begin</phrase><phrase role="special">()</phrase></code>
          and <code><phrase role="identifier">end</phrase><phrase role="special">()</phrase></code>
          member functions. Note that there is no portable way to take the address
          of a member function of a C++ standard library container, so <code><phrase
          role="identifier">iterators</phrase><phrase role="special">&lt;&gt;</phrase></code>
          can be particularly helpful when wrapping them.
        </para>
        <para>
          In the table below, x is an instance of C.
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>
                    Required Valid Expression
                  </para>
                </entry>
                <entry>
                  <para>
                    Type
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    x.begin()
                  </para>
                </entry>
                <entry>
                  <para>
                    Convertible to C::const_iterator if C is a const type; convertible
                    to C::iterator otherwise.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    x.end()
                  </para>
                </entry>
                <entry>
                  <para>
                    Convertible to C::const_iterator if C is a const type; convertible
                    to C::iterator otherwise.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">C</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">iterators</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">C</phrase><phrase role="special">::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">iterator</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">(</phrase><phrase role="identifier">C</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">(</phrase><phrase role="identifier">C</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_iterator_hpp.class_template_iterators_nested_">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.class_template_iterators_nested_">Class
        template iterators nested types</link></title>
        <para>
          If C is a const type,
        </para>
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">C</phrase><phrase role="special">::</phrase><phrase role="identifier">const_iterator</phrase> <phrase role="identifier">iterator</phrase><phrase role="special">;</phrase></programlisting>
        <para>
          Otherwise:
        </para>
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">C</phrase><phrase role="special">::</phrase><phrase role="identifier">iterator</phrase> <phrase role="identifier">iterator</phrase><phrase role="special">;</phrase></programlisting>
      </section>
      <section id="high_level_components.boost_python_iterator_hpp.class_template_iterators_static_">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.class_template_iterators_static_">Class
        template iterators static functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">iterator</phrase> <phrase role="identifier">begin</phrase><phrase role="special">(</phrase><phrase role="identifier">C</phrase><phrase role="special">&amp;);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase
                role="identifier">begin</phrase><phrase role="special">()</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">iterator</phrase> <phrase role="identifier">end</phrase><phrase role="special">(</phrase><phrase role="identifier">C</phrase><phrase role="special">&amp;);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase
                role="identifier">end</phrase><phrase role="special">()</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_iterator_hpp.functions">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.functions">Functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">NextPolicies</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Target</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Accessor1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Accessor2</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">range</phrase><phrase role="special">(</phrase><phrase role="identifier">Accessor1</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">Accessor2</phrase> <phrase role="identifier">finish</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">NextPolicies</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Accessor1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Accessor2</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">range</phrase><phrase role="special">(</phrase><phrase role="identifier">Accessor1</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">Accessor2</phrase> <phrase role="identifier">finish</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Accessor1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Accessor2</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">range</phrase><phrase role="special">(</phrase><phrase role="identifier">Accessor1</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">Accessor2</phrase> <phrase role="identifier">finish</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                NextPolicies is a default-constructible model of <link linkend="concepts.callpolicies">CallPolicies</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                The first form creates a Python callable object which, when invoked,
                converts its argument to a Target object x, and creates a Python
                iterator which traverses <code><phrase role="special">[</phrase><phrase
                role="identifier">bind</phrase><phrase role="special">(</phrase><phrase
                role="identifier">start</phrase><phrase role="special">,</phrase><phrase
                role="identifier">_1</phrase><phrase role="special">)(</phrase><phrase
                role="identifier">x</phrase><phrase role="special">),</phrase> <phrase
                role="identifier">bind</phrase><phrase role="special">(</phrase><phrase
                role="identifier">finish</phrase><phrase role="special">,</phrase><phrase
                role="identifier">_1</phrase><phrase role="special">)(</phrase><phrase
                role="identifier">x</phrase><phrase role="special">))</phrase></code>,
                applying NextPolicies to the iterator's <code><phrase role="identifier">next</phrase><phrase
                role="special">()</phrase></code> function. The second form is identical
                to the first, except that Target is deduced from Accessor1 as follows:
              </para>
              <para>
                # If Accessor1 is a function type, Target is the type of its first
                argument. # If Accessor1 is a data member pointer of the form <code><phrase
                role="identifier">R</phrase> <phrase role="special">(</phrase><phrase
                role="identifier">T</phrase><phrase role="special">::*)</phrase></code>,
                Target is identical to <code><phrase role="identifier">T</phrase></code>.
                # If Accessor1 is a member function pointer of the form <code><phrase
                role="identifier">R</phrase> <phrase role="special">(</phrase><phrase
                role="identifier">T</phrase><phrase role="special">::*)(</phrase><phrase
                role="identifier">arguments</phrase><phrase role="special">...)</phrase>
                <phrase role="identifier">cv</phrase><phrase role="special">-</phrase><phrase
                role="identifier">opt</phrase></code>, where cv-opt is an optional
                cv-qualifier, Target is identical to <code><phrase role="identifier">T</phrase></code>.
              </para>
              <para>
                The third form is identical to the second, except that NextPolicies
                is an unspecified model of <link linkend="concepts.callpolicies">CallPolicies</link>
                which always makes a copy of the result of deferencing the underlying
                C++ iterator
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                The use of <code><phrase role="identifier">boost</phrase><phrase
                role="special">::</phrase><phrase role="identifier">bind</phrase><phrase
                role="special">()</phrase></code> allows C++ iterators to be accessed
                through functions, member functions or data member pointers. Customization
                of NextPolicies (e.g. using <link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.class_template_return_internal_r">return_internal_reference</link>)
                is useful when it is expensive to copy sequence elements of a wrapped
                class type. Customization of Target is useful when Accessor1 is a
                function object, or when a base class of the intended target type
                would otherwise be deduced.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_iterator_hpp.example">
        <title><link linkend="high_level_components.boost_python_iterator_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">vector</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">demo</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">double</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;dvec&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;__iter__&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">iterator</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">double</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;())</phrase>
        <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_module_hpp">
      <title><link linkend="high_level_components.boost_python_module_hpp">boost/python/module.hpp</link></title>
      <section id="high_level_components.boost_python_module_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_module_hpp.introduction">Introduction</link></title>
        <para>
          This header provides the basic facilities needed to create a Boost.Python
          extension module.
        </para>
      </section>
      <section id="high_level_components.boost_python_module_hpp.macros">
        <title><link linkend="high_level_components.boost_python_module_hpp.macros">Macros</link></title>
        <para>
          <code><phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase
          role="identifier">name</phrase><phrase role="special">)</phrase></code>
          is used to declare Python <ulink url="http://www.python.org/doc/2.2/ext/methodTable.html#SECTION003400000000000000000">module
          initialization functions</ulink>. The name argument must exactly match
          the name of the module to be initialized, and must conform to Python's
          <ulink url="http://www.python.org/doc/2.2/ref/identifiers.html">identifier
          naming rules</ulink>. Where you would normally write
        </para>
<programlisting><phrase role="keyword">extern</phrase> <phrase role="string">&quot;C&quot;</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">initname</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="special">...</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          Boost.Python modules should be initialized with
        </para>
<programlisting><phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="special">...</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          This macro generates two functions in the scope where it is used: <code><phrase
          role="keyword">extern</phrase> <phrase role="string">&quot;C&quot;</phrase>
          <phrase role="keyword">void</phrase> <phrase role="identifier">initname</phrase><phrase
          role="special">()</phrase></code>, and <code><phrase role="keyword">void</phrase>
          <phrase role="identifier">init_module_name</phrase><phrase role="special">()</phrase></code>,
          whose body must follow the macro invocation. <code><phrase role="identifier">init_name</phrase></code>
          passes <code><phrase role="identifier">init_module_name</phrase></code>
          to <link linkend="high_level_components.boost_python_errors_hpp.functions">handle_exception()</link>
          so that any C++ exceptions generated are safely processeed. During the
          body of <code><phrase role="identifier">init_name</phrase></code>, the
          <link linkend="high_level_components.boost_python_scope_hpp">current scope</link>
          refers to the module being initialized.
        </para>
      </section>
      <section id="high_level_components.boost_python_module_hpp.examples">
        <title><link linkend="high_level_components.boost_python_module_hpp.examples">Examples</link></title>
        <para>
          C++ module definition:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">xxx</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">throw</phrase> <phrase role="string">&quot;something bad happened&quot;</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          Interactive Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">xxx</phrase>
<phrase role="identifier">Traceback</phrase> <phrase role="special">(</phrase><phrase role="identifier">most</phrase> <phrase role="identifier">recent</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">last</phrase><phrase role="special">):</phrase>
  <phrase role="identifier">File</phrase> <phrase role="string">&quot;&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">line</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="identifier">in</phrase> <phrase role="special">?</phrase>
<phrase role="identifier">RuntimeError</phrase><phrase role="special">:</phrase> <phrase role="identifier">Unidentifiable</phrase> <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">Exception</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_operators_hpp">
      <title><link linkend="high_level_components.boost_python_operators_hpp">boost/python/operators.hpp</link></title>
      <section id="high_level_components.boost_python_operators_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_operators_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/operators.hpp&gt; provides types and functions for automatically
          generating Python <ulink url="http://www.python.org/doc/ref/specialnames.html">special
          methods</ulink> from the corresponding C++ constructs. Most of these constructs
          are operator expressions, hence the name. To use the facility, substitute
          the <link linkend="high_level_components.boost_python_operators_hpp.object_self">self</link>
          object for an object of the class type being wrapped in the expression
          to be exposed, and pass the result to <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu">class_&lt;&gt;::def()</link>.
          Much of what is exposed in this header should be considered part of the
          implementation, so is not documented in detail here.
        </para>
      </section>
      <section id="high_level_components.boost_python_operators_hpp.class_self_ns_self_t">
        <title><link linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t">Class
        <code><phrase role="identifier">self_ns</phrase><phrase role="special">::</phrase><phrase
        role="identifier">self_t</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">self_ns</phrase><phrase role="special">::</phrase><phrase
          role="identifier">self_t</phrase></code> is the actual type of the <link
          linkend="high_level_components.boost_python_operators_hpp.object_self">self</link>
          object. The library isolates <code><phrase role="identifier">self_t</phrase></code>
          in its own namespace, <code><phrase role="identifier">self_ns</phrase></code>,
          in order to prevent the generalized operator templates which operate on
          it from being found by argument-dependent lookup in other contexts. This
          should be considered an implementation detail, since users should never
          have to mention <code><phrase role="identifier">self_t</phrase></code>
          directly.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">self_ns</phrase> <phrase role="special">{</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">unspecified</phrase><phrase role="special">-</phrase><phrase role="identifier">type</phrase><phrase role="special">-</phrase><phrase role="identifier">declaration</phrase> <phrase role="identifier">self_t</phrase><phrase role="special">;</phrase>

   <phrase role="comment">// inplace operators</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">/=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">%=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;&gt;=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;&lt;=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&amp;=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">^=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">|=(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase><phrase role="special">);</phrase>

   <phrase role="comment">// comparisons</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!=(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;=(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;=(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

   <phrase role="comment">// non-member operations</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">/(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">%(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;&lt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&amp;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">^(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">|(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">pow</phrase><phrase role="special">(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

   <phrase role="comment">// unary operations</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">~(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>

   <phrase role="comment">// value operations</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">int_</phrase><phrase role="special">(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">long_</phrase><phrase role="special">(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">float_</phrase><phrase role="special">(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">complex_</phrase><phrase role="special">(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">operator_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">repr</phrase><phrase role="special">(</phrase><phrase role="identifier">self_t</phrase><phrase role="special">);</phrase>
<phrase role="special">}}};</phrase>
</programlisting>
        <para>
          The tables below describe the methods generated when the results of the
          expressions described are passed as arguments to <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu">class_&lt;&gt;::def()</link>.
          <code><phrase role="identifier">x</phrase></code> is an object of the class
          type being wrapped.
        </para>
        <section id="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_inplace_operators">
          <title><link linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_inplace_operators"><code><phrase
          role="identifier">self_t</phrase></code> inplace operators</link></title>
          <para>
            In the table below, If <code><phrase role="identifier">r</phrase></code>
            is an object of type <link linkend="high_level_components.boost_python_operators_hpp.class_template_other">other&lt;T&gt;</link>,
            <code><phrase role="identifier">y</phrase></code> is an object of type
            <code><phrase role="identifier">T</phrase></code>; otherwise, <code><phrase
            role="identifier">y</phrase></code> is an object of the same type as
            <code><phrase role="identifier">r</phrase></code>.
          </para>
          <informaltable frame="all">
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>
                    <para>
                      C++ Expression
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Python Method Name
                    </para>
                  </entry>
                  <entry>
                    <para>
                      C++ Implementation
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">+=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__iadd__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">+=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">-=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__isub__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">-=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">*=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__imul__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">*=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">/=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__idiv__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">/=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">%=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__imod__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">%=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&gt;&gt;=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__irshift__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&gt;&gt;=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&lt;&lt;=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__ilshift__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&amp;=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__iand__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&amp;=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">^=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__ixor__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">^=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">|=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__ior__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">|=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_comparison_functions">
          <title><link linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_comparison_functions"><code><phrase
          role="identifier">self_t</phrase></code> comparison functions</link></title>
          <para>
            In the tables below, if <code><phrase role="identifier">r</phrase></code>
            is of type <link linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t">self_t</link>,
            <code><phrase role="identifier">y</phrase></code> is an object of the
            same type as <code><phrase role="identifier">x</phrase></code>; if <code><phrase
            role="identifier">l</phrase></code> or <code><phrase role="identifier">r</phrase></code>
            is an object of type <link linkend="high_level_components.boost_python_operators_hpp.class_template_other">other&lt;T&gt;</link>,
            <code><phrase role="identifier">y</phrase></code> is an object of type
            <code><phrase role="identifier">T</phrase></code>; otherwise, <code><phrase
            role="identifier">y</phrase></code> is an object of the same type as
            <code><phrase role="identifier">l</phrase></code> or <code><phrase role="identifier">r</phrase></code>.
            <code><phrase role="identifier">l</phrase></code> is never of type <link
            linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t">self_t</link>.
          </para>
          <para>
            The column of Python Expressions illustrates the expressions that will
            be supported in Python for objects convertible to the types of x and
            y. The secondary operation arises due to Python's <ulink url="http://www.python.org/doc/ref/customization.html#l2h-89">reflection
            rules</ulink> for rich comparison operators, and are only used when the
            corresponding operation is not defined as a method of the y object.
          </para>
          <informaltable frame="all">
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>
                    <para>
                      C++ Expression
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Python Method Name
                    </para>
                  </entry>
                  <entry>
                    <para>
                      C++ Implementation
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Python Expression (primary, secondary)
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__eq__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">y</phrase></code>, <code><phrase
                      role="identifier">y</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__eq__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">x</phrase></code>, <code><phrase
                      role="identifier">x</phrase> <phrase role="special">==</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__nq__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">y</phrase></code>, <code><phrase
                      role="identifier">y</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__nq__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">x</phrase></code>, <code><phrase
                      role="identifier">x</phrase> <phrase role="special">!=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__lt__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">y</phrase></code>, <code><phrase
                      role="identifier">y</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__gt__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">x</phrase></code>, <code><phrase
                      role="identifier">x</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__gt__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">y</phrase></code>, <code><phrase
                      role="identifier">y</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__lt__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&lt;</phrase>
                      <phrase role="identifier">x</phrase></code>, <code><phrase
                      role="identifier">x</phrase> <phrase role="special">&gt;</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__le__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">y</phrase></code>, <code><phrase
                      role="identifier">y</phrase> <phrase role="special">&gt;=</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__ge__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&gt;=</phrase>
                      <phrase role="identifier">x</phrase></code>, <code><phrase
                      role="identifier">x</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&gt;=</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__ge__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&gt;=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&gt;=</phrase>
                      <phrase role="identifier">y</phrase></code>, <code><phrase
                      role="identifier">y</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__le__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&gt;=</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&lt;=</phrase>
                      <phrase role="identifier">x</phrase></code>, <code><phrase
                      role="identifier">x</phrase> <phrase role="special">&gt;=</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_non_member_operations">
          <title><link linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_non_member_operations"><code><phrase
          role="identifier">self_t</phrase></code> non-member operations</link></title>
          <para>
            The operations whose names begin with &quot;__r&quot; below will only
            be called if the left-hand operand does not already support the given
            operation, as described <ulink url="http://www.python.org/doc/current/ref/numeric-types.html#l2h-152">here</ulink>.
          </para>
          <informaltable frame="all">
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>
                    <para>
                      C++ Expression
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Python Method Name
                    </para>
                  </entry>
                  <entry>
                    <para>
                      C++ Implementation
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">+</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__add__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">+</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">+</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__radd__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">+</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">-</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__sub__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">-</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">-</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rsub__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">-</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">*</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__mult__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">*</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">*</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rmult__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">*</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">/</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__div__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">/</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">/</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rdiv__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">/</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">%</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__mod__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">%</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">%</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rmod__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">%</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&gt;&gt;</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rshift__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&gt;&gt;</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">&gt;&gt;</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rrshift__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&gt;&gt;</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&lt;&lt;</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__lshift__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&lt;&lt;</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">&lt;&lt;</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rlshift__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&lt;&lt;</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">&amp;</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__and__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">&amp;</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">&amp;</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rand__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">&amp;</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">^</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__xor__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">^</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">^</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rxor__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">^</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">self</phrase> <phrase role="special">|</phrase>
                      <phrase role="identifier">r</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__or__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">|</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">l</phrase> <phrase role="special">|</phrase>
                      <phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__ror__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">|</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">pow</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">self</phrase><phrase role="special">,</phrase>
                      <phrase role="identifier">r</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__pow__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">x</phrase> <phrase role="special">**</phrase>
                      <phrase role="identifier">y</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">pow</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">l</phrase><phrase role="special">,</phrase>
                      <phrase role="identifier">self</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__rpow__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">y</phrase> <phrase role="special">**</phrase>
                      <phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_unary_operations">
          <title><link linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_unary_operations"><code><phrase
          role="identifier">self_t</phrase></code> unary operations</link></title>
          <informaltable frame="all">
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>
                    <para>
                      C++ Expression
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Python Method Name
                    </para>
                  </entry>
                  <entry>
                    <para>
                      C++ Implementation
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="special">-</phrase><phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__neg__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="special">-</phrase><phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="special">+</phrase><phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__pos__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="special">+</phrase><phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="special">~</phrase><phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__invert__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="special">~</phrase><phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="keyword">not</phrase> <phrase role="identifier">self</phrase></code>
                      or <code><phrase role="special">!</phrase><phrase role="identifier">self</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__nonzero__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="special">!!</phrase><phrase role="identifier">x</phrase></code>
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_value_operations">
          <title><link linkend="high_level_components.boost_python_operators_hpp.class_self_ns_self_t.self_t_value_operations"><code><phrase
          role="identifier">self_t</phrase></code> value operations</link></title>
          <informaltable frame="all">
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>
                    <para>
                      C++ Expression
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Python Method Name
                    </para>
                  </entry>
                  <entry>
                    <para>
                      C++ Implementation
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">int_</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">self</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__int__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="keyword">long</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">x</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">long_</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">self</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__long__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">PyLong_FromLong</phrase><phrase
                      role="special">(</phrase><phrase role="identifier">x</phrase><phrase
                      role="special">)</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">float_</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">self</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__float__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="keyword">double</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">x</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">complex_</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">self</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__complex__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
                      role="identifier">complex</phrase><phrase role="special">&lt;</phrase><phrase
                      role="keyword">double</phrase><phrase role="special">&gt;(</phrase><phrase
                      role="identifier">x</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">self</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__str__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">lexical_cast</phrase><phrase
                      role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase
                      role="special">::</phrase><phrase role="identifier">string</phrase><phrase
                      role="special">&gt;(</phrase><phrase role="identifier">x</phrase><phrase
                      role="special">)</phrase></code>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      <code><phrase role="identifier">repr</phrase><phrase role="special">(</phrase><phrase
                      role="identifier">self</phrase><phrase role="special">)</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">__repr__</phrase></code>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      <code><phrase role="identifier">lexical_cast</phrase><phrase
                      role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase
                      role="special">::</phrase><phrase role="identifier">string</phrase><phrase
                      role="special">&gt;(</phrase><phrase role="identifier">x</phrase><phrase
                      role="special">)</phrase></code>
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
      </section>
      <section id="high_level_components.boost_python_operators_hpp.class_template_other">
        <title><link linkend="high_level_components.boost_python_operators_hpp.class_template_other">Class
        template <code><phrase role="identifier">other</phrase></code></link></title>
        <para>
          Instances of <code><phrase role="identifier">other</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">T</phrase><phrase role="special">&gt;</phrase></code>
          can be used in operator expressions with <link linkend="high_level_components.boost_python_operators_hpp.object_self">self</link>;
          the result is equivalent to the same expression with a <code><phrase role="identifier">T</phrase></code>
          object in place of <code><phrase role="identifier">other</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
          role="special">&gt;</phrase></code>. Use <code><phrase role="identifier">other</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
          role="special">&gt;</phrase></code> to prevent construction of a <code><phrase
          role="identifier">T</phrase></code> object in case it is heavyweight, when
          no constructor is available, or simply for clarity.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">other</phrase>
  <phrase role="special">{</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_operators_hpp.class_template_detail_operator">
        <title><link linkend="high_level_components.boost_python_operators_hpp.class_template_detail_operator">Class
        template <code><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase
        role="identifier">operator_</phrase></code></link></title>
        <para>
          Instantiations of <code><phrase role="identifier">detail</phrase><phrase
          role="special">::</phrase><phrase role="identifier">operator_</phrase><phrase
          role="special">&lt;&gt;</phrase></code> are used as the return type of
          operator expressions involving <link linkend="high_level_components.boost_python_operators_hpp.object_self">self</link>.
          This should be considered an implementation detail and is only documented
          here as a way of showing how the result of self-expressions match calls
          to <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu"><code><phrase
          role="identifier">class_</phrase><phrase role="special">&lt;&gt;::</phrase><phrase
          role="identifier">def</phrase><phrase role="special">()</phrase></code></link>.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">detail</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">unspecified</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">operator_</phrase>
  <phrase role="special">{</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_operators_hpp.object_self">
        <title><link linkend="high_level_components.boost_python_operators_hpp.object_self">Object
        <code><phrase role="identifier">self</phrase></code></link></title>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">using</phrase> <phrase role="identifier">self_ns</phrase><phrase role="special">::</phrase><phrase role="identifier">self</phrase><phrase role="special">;</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_operators_hpp.example">
        <title><link linkend="high_level_components.boost_python_operators_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">operators</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">operators</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">number</phrase>
   <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">integer_arithmetic</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">number</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">explicit</phrase> <phrase role="identifier">number</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">x_</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">x</phrase><phrase role="special">(</phrase><phrase role="identifier">x_</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="keyword">operator</phrase> <phrase role="keyword">long</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">number</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">x</phrase> <phrase role="special">+=</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">;</phrase> <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">number</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">x</phrase> <phrase role="special">-=</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">;</phrase> <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">number</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">x</phrase> <phrase role="special">*=</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">;</phrase> <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">number</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">/=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">x</phrase> <phrase role="special">/=</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">;</phrase> <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
    <phrase role="identifier">number</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">%=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase> <phrase role="identifier">x</phrase> <phrase role="special">%=</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">;</phrase> <phrase role="keyword">return</phrase> <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

   <phrase role="keyword">long</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">demo</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">number</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;number&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">long</phrase><phrase role="special">&gt;())</phrase>
      <phrase role="comment">// interoperate with self</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">+=</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">+</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">-=</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">-</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">*=</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">/=</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">/</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">%=</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">%</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>

      <phrase role="comment">// Convert to Python int</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">int_</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">))</phrase>

      <phrase role="comment">// interoperate with long</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">+=</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">+</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase><phrase role="special">()</phrase> <phrase role="special">+</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">-=</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">-</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase><phrase role="special">()</phrase> <phrase role="special">-</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">*=</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">*</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase><phrase role="special">()</phrase> <phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">/=</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">/</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase><phrase role="special">()</phrase> <phrase role="special">/</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">%=</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase> <phrase role="special">%</phrase> <phrase role="keyword">long</phrase><phrase role="special">())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase><phrase role="special">()</phrase> <phrase role="special">%</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase>
      <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_scope_hpp">
      <title><link linkend="high_level_components.boost_python_scope_hpp">boost/python/scope.hpp</link></title>
      <section id="high_level_components.boost_python_scope_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_scope_hpp.introduction">Introduction</link></title>
        <para>
          Defines facilities for querying and controlling the Python scope (namespace)
          which will contain new wrapped classes and functions.
        </para>
      </section>
      <section id="high_level_components.boost_python_scope_hpp.class_scope">
        <title><link linkend="high_level_components.boost_python_scope_hpp.class_scope">Class
        <code><phrase role="identifier">scope</phrase></code></link></title>
        <para>
          The scope class has an associated global Python object which controls the
          Python namespace in which new extension classes and wrapped functions will
          be defined as attributes. Default-constructing a new scope object binds
          it to the associated global Python object. Constructing a scope object
          with an argument changes the associated global Python object to the one
          held by the argument, until the lifetime of the scope object ends, at which
          time the associated global Python object reverts to what it was before
          the scope object was constructed.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">scope</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">scope</phrase><phrase role="special">(</phrase><phrase role="identifier">scope</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
      <phrase role="identifier">scope</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
      <phrase role="identifier">scope</phrase><phrase role="special">();</phrase>
      <phrase role="special">~</phrase><phrase role="identifier">scope</phrase><phrase role="special">()</phrase>
   <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
      <phrase role="keyword">void</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">scope</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_scope_hpp.class_scope_constructors_and_des">
        <title><link linkend="high_level_components.boost_python_scope_hpp.class_scope_constructors_and_des">Class
        scope constructors and destructor</link></title>
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">scope</phrase><phrase role="special">(</phrase><phrase role="identifier">scope</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
<phrase role="keyword">explicit</phrase> <phrase role="identifier">scope</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
</programlisting>
        <para>
          Stores a reference to the current associated scope object, and sets the
          associated scope object to the one referred to by x.ptr(). The object base
          class is initialized with x.
        </para>
<programlisting><phrase role="identifier">scope</phrase><phrase role="special">();</phrase></programlisting>
        <para>
          Stores a reference to the current associated scope object. The object base
          class is initialized with the current associated scope object. Outside
          any module initialization function, the current associated Python object
          is None.
        </para>
<programlisting><phrase role="special">~</phrase><phrase role="identifier">scope</phrase><phrase role="special">()</phrase></programlisting>
        <para>
          Sets the current associated Python object to the stored object.
        </para>
      </section>
      <section id="high_level_components.boost_python_scope_hpp.example">
        <title><link linkend="high_level_components.boost_python_scope_hpp.example">Example</link></title>
        <para>
          The following example shows how scope setting can be used to define nested
          classes.
        </para>
        <para>
          C++ Module definition:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">scope</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">void</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="special">{}</phrase>

  <phrase role="keyword">struct</phrase> <phrase role="identifier">Y</phrase> <phrase role="special">{</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">g</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="number">42</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase> <phrase role="special">};</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">nested</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="comment">// add some constants to the current (module) scope</phrase>
   <phrase role="identifier">scope</phrase><phrase role="special">().</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;yes&quot;</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">;</phrase>
   <phrase role="identifier">scope</phrase><phrase role="special">().</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;no&quot;</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>

   <phrase role="comment">// Change the current scope </phrase>
   <phrase role="identifier">scope</phrase> <phrase role="identifier">outer</phrase>
       <phrase role="special">=</phrase> <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">)</phrase>
            <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">)</phrase>
            <phrase role="special">;</phrase>

   <phrase role="comment">// Define a class Y in the current scope, X</phrase>
   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Y&quot;</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;g&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">Y</phrase><phrase role="special">::</phrase><phrase role="identifier">g</phrase><phrase role="special">)</phrase>
      <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          Interactive Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">nested</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">nested</phrase><phrase role="special">.</phrase><phrase role="identifier">yes</phrase>
<phrase role="number">1</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">y</phrase> <phrase role="special">=</phrase> <phrase role="identifier">nested</phrase><phrase role="special">.</phrase><phrase role="identifier">X</phrase><phrase role="special">.</phrase><phrase role="identifier">Y</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">g</phrase><phrase role="special">()</phrase>
<phrase role="number">42</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_stl_iterator_hpp">
      <title><link linkend="high_level_components.boost_python_stl_iterator_hpp">boost/python/stl_iterator.hpp</link></title>
      <section id="high_level_components.boost_python_stl_iterator_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_stl_iterator_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/stl_iterator.hpp&gt; provides types for creating C++ Iterators
          from <ulink url="http://www.python.org/doc/current/lib/typeiter.html">Python
          iterables</ulink>.
        </para>
      </section>
      <section id="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterato">
        <title><link linkend="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterato">Class
        template <code><phrase role="identifier">stl_input_iterator</phrase></code></link></title>
        <para>
          Instances of <code><phrase role="identifier">stl_input_iterator</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
          role="special">&gt;</phrase></code> hold a Python iterator and adapt it
          for use with STL algorithms. <code><phrase role="identifier">stl_input_iterator</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
          role="special">&gt;</phrase></code> satisfies the requirements for an Input
          Iterator.
        </para>
        <informaltable frame="all">
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Template Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
                <entry>
                  <para>
                    Default
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    ValueType
                  </para>
                </entry>
                <entry>
                  <para>
                    ValueType must be CopyConstructible.
                  </para>
                </entry>
                <entry>
                  <para>
                    Dereferencing an instance of <code><phrase role="identifier">stl_input_iterator</phrase><phrase
                    role="special">&lt;</phrase><phrase role="identifier">ValueType</phrase><phrase
                    role="special">&gt;</phrase></code> will return an rvalue of
                    type ValueType.
                  </para>
                </entry>
                <entry>
                  <para>
                    None
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">ValueType</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">stl_input_iterator</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">ptrdiff_t</phrase> <phrase role="identifier">difference_type</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">ValueType</phrase> <phrase role="identifier">value_type</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">ValueType</phrase><phrase role="special">*</phrase> <phrase role="identifier">pointer</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">ValueType</phrase> <phrase role="identifier">reference</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">input_iterator_tag</phrase> <phrase role="identifier">iterator_category</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">stl_input_iterator</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">stl_input_iterator</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">ob</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">stl_input_iterator</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">++();</phrase>
      <phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">operator</phrase><phrase role="special">++(</phrase><phrase role="keyword">int</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">ValueType</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">friend</phrase> <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lhs</phrase><phrase role="special">,</phrase> <phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">friend</phrase> <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!=(</phrase><phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lhs</phrase><phrase role="special">,</phrase> <phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
  <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">it</phrase><phrase role="special">;</phrase> <phrase role="comment">// For exposition only</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">ob</phrase><phrase role="special">;</phrase> <phrase role="comment">// For exposition only</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterat0">
        <title><link linkend="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterat0">Class
        template <code><phrase role="identifier">stl_input_iterator</phrase></code>
        constructors</link></title>
<programlisting><phrase role="identifier">stl_input_iterator</phrase><phrase role="special">()</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Creates a past-the-end input iterator, useful for signifying the
                end of a sequence.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Postconditions</term>
            <listitem>
              <para>
                <code><phrase role="keyword">this</phrase></code> is past-the-end
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                Nothing.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">stl_input_iterator</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">ob</phrase><phrase role="special">)</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Calls ob.attr(&quot;__iter__&quot;)() and stores the resulting Python
                iterator object in this-&gt;it. Then, calls this-&gt;it.attr(&quot;next&quot;)()
                and stores the result in this-&gt;ob. If the sequence is exhausted,
                sets this-&gt;ob to object().
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Postconditions</term>
            <listitem>
              <para>
                this is a dereferenceable or past-the-end.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterat1">
        <title><link linkend="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterat1">Class
        template <code><phrase role="identifier">stl_input_iterator</phrase></code>
        modifiers</link></title>
<programlisting><phrase role="identifier">stl_input_iterator</phrase> <phrase role="special">&amp;</phrase><phrase role="keyword">operator</phrase><phrase role="special">++()</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Calls this-&gt;it.attr(&quot;next&quot;)() and stores the result
                in this-&gt;ob. If the sequence is exhausted, sets this-&gt;ob to
                object().
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Postconditions</term>
            <listitem>
              <para>
                this is a dereferenceable or past-the-end.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">stl_input_iterator</phrase> <phrase role="special">&amp;</phrase><phrase role="keyword">operator</phrase><phrase role="special">++(</phrase><phrase role="keyword">int</phrase><phrase role="special">)</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                <code><phrase role="identifier">stl_input_iterator</phrase> <phrase
                role="identifier">tmp</phrase> <phrase role="special">=</phrase>
                <phrase role="special">*</phrase><phrase role="keyword">this</phrase><phrase
                role="special">;</phrase> <phrase role="special">++*</phrase><phrase
                role="keyword">this</phrase><phrase role="special">;</phrase> <phrase
                role="keyword">return</phrase> <phrase role="identifier">tmp</phrase><phrase
                role="special">;</phrase></code>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Postconditions</term>
            <listitem>
              <para>
                this is a dereferenceable or past-the-end.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterat2">
        <title><link linkend="high_level_components.boost_python_stl_iterator_hpp.class_template_stl_input_iterat2">Class
        template <code><phrase role="identifier">stl_input_iterator</phrase></code>
        observers</link></title>
<programlisting><phrase role="identifier">ValueType</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*()</phrase> <phrase role="keyword">const</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Returns the current element in the sequence.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase
                role="identifier">ValueType</phrase><phrase role="special">&gt;(</phrase><phrase
                role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase
                role="identifier">ob</phrase><phrase role="special">);</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">friend</phrase> <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lhs</phrase><phrase role="special">,</phrase> <phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Returns true if both iterators are dereferenceable or if both iterators
                are past-the-end, false otherwise.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="special">(</phrase><phrase role="identifier">lhs</phrase><phrase
                role="special">.</phrase><phrase role="identifier">ob</phrase> <phrase
                role="special">==</phrase> <phrase role="identifier">object</phrase><phrase
                role="special">())</phrase> <phrase role="special">==</phrase> <phrase
                role="special">(</phrase><phrase role="identifier">rhs</phrase><phrase
                role="special">.</phrase><phrase role="identifier">ob</phrase> <phrase
                role="special">==</phrase> <phrase role="identifier">object</phrase><phrase
                role="special">())</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">friend</phrase> <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!=(</phrase><phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">lhs</phrase><phrase role="special">,</phrase> <phrase role="identifier">stl_input_iterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Returns false if both iterators are dereferenceable or if both iterators
                are past-the-end, true otherwise.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="special">!(</phrase><phrase role="identifier">lhs</phrase>
                <phrase role="special">==</phrase> <phrase role="identifier">rhs</phrase><phrase
                role="special">)</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_stl_iterator_hpp.example">
        <title><link linkend="high_level_components.boost_python_stl_iterator_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">object</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">stl_iterator</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">list</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">list</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">sequence_to_int_list</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">ob</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">stl_input_iterator</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">begin</phrase><phrase role="special">(</phrase><phrase role="identifier">ob</phrase><phrase role="special">),</phrase> <phrase role="identifier">end</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">list</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">begin</phrase><phrase role="special">,</phrase> <phrase role="identifier">end</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="high_level_components.boost_python_wrapper_hpp">
      <title><link linkend="high_level_components.boost_python_wrapper_hpp">boost/python/wrapper.hpp</link></title>
      <section id="high_level_components.boost_python_wrapper_hpp.introduction">
        <title><link linkend="high_level_components.boost_python_wrapper_hpp.introduction">Introduction</link></title>
        <para>
          To wrap a class T such that its virtual functions can be &quot;overridden
          in Python&quot;—so that the corresponding method of a Python derived
          class will be called when the virtual function is invoked from C++—you
          must create a C++ wrapper class derived from <code><phrase role="identifier">T</phrase></code>
          that overrides those virtual functions so that they call into Python. This
          header contains classes that can be used to make that job easier.
        </para>
      </section>
      <section id="high_level_components.boost_python_wrapper_hpp.class_override">
        <title><link linkend="high_level_components.boost_python_wrapper_hpp.class_override">Class
        <code><phrase role="identifier">override</phrase></code></link></title>
        <para>
          Encapsulates a Python override of a C++ virtual function. An override object
          either holds a callable Python object or <code><phrase role="identifier">None</phrase></code>.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">override</phrase> <phrase role="special">:</phrase> <phrase role="identifier">object</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="special">...</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="special">...</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">An</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="special">...</phrase><phrase role="identifier">An</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_wrapper_hpp.class_override_observer_function">
        <title><link linkend="high_level_components.boost_python_wrapper_hpp.class_override_observer_function">Class
        <code><phrase role="identifier">override</phrase></code> observer functions</link></title>
<programlisting><phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">...</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="special">...</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">An</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">unspecified</phrase> <phrase role="keyword">operator</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="special">...</phrase><phrase role="identifier">An</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                If *this holds a callable Python object, it is invoked with the specified
                arguments in the manner specified here. Otherwise, throws <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An object of unspecified type that holds the Python result of the
                invocation and, when converted to a C++ type R, attempts to convert
                that result object to R. If that conversion fails, throws <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_wrapper_hpp.class_template_wrapper">
        <title><link linkend="high_level_components.boost_python_wrapper_hpp.class_template_wrapper">Class
        template <code><phrase role="identifier">wrapper</phrase></code></link></title>
        <para>
          Deriving your wrapper class from both <code><phrase role="identifier">T</phrase></code>
          and <code><phrase role="identifier">wrapper</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">T</phrase><phrase role="special">&gt;</phrase></code>
          makes writing that derived class easier.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">wrapper</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">protected</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">override</phrase> <phrase role="identifier">get_override</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </section>
      <section id="high_level_components.boost_python_wrapper_hpp.class_template_wrapper_observer_">
        <title><link linkend="high_level_components.boost_python_wrapper_hpp.class_template_wrapper_observer_">Class
        template <code><phrase role="identifier">wrapper</phrase></code> observer
        functions</link></title>
<programlisting><phrase role="identifier">override</phrase> <phrase role="identifier">get_override</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                name is a <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                If <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                is the C++ base class subobject of a Python derived class instance
                that overrides the named function, returns an override object that
                delegates to the Python override. Otherwise, returns an override
                object that holds <code><phrase role="identifier">None</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="high_level_components.boost_python_wrapper_hpp.example">
        <title><link linkend="high_level_components.boost_python_wrapper_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">wrapper</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">call</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="comment">// Class with one pure virtual function</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">P</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">P</phrase><phrase role="special">(){}</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">g</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="string">&quot;P::g()&quot;</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">PCallback</phrase> <phrase role="special">:</phrase> <phrase role="identifier">P</phrase><phrase role="special">,</phrase> <phrase role="identifier">wrapper</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">P</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">get_override</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">)();</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Class with one non-pure virtual function</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">A</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">A</phrase><phrase role="special">(){}</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="string">&quot;A::f()&quot;</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">ACallback</phrase> <phrase role="special">:</phrase>  <phrase role="identifier">A</phrase><phrase role="special">,</phrase> <phrase role="identifier">wrapper</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">override</phrase> <phrase role="identifier">f</phrase> <phrase role="special">=</phrase> <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">get_override</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">))</phrase>
            <phrase role="keyword">return</phrase> <phrase role="identifier">f</phrase><phrase role="special">();</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">A</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">();</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">default_f</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">A</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE_INIT</phrase><phrase role="special">(</phrase><phrase role="identifier">polymorphism</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">PCallback</phrase><phrase role="special">,</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;P&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">pure_virtual</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">P</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">))</phrase>
        <phrase role="special">;</phrase>

    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">ACallback</phrase><phrase role="special">,</phrase><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;A&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">A</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">ACallback</phrase><phrase role="special">::</phrase><phrase role="identifier">default_f</phrase><phrase role="special">)</phrase>
        <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
  </chapter>
  <chapter id="object_wrappers" last-revision="$Date: 2016/08/05 20:23:10 $" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Object Wrappers</title>
    <section id="object_wrappers.boost_python_dict_hpp">
      <title><link linkend="object_wrappers.boost_python_dict_hpp">boost/python/dict.hpp</link></title>
      <section id="object_wrappers.boost_python_dict_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_dict_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          for the Python <ulink url="http://www.python.org/dev/doc/devel/lib/typesmapping.html"><code><phrase
          role="identifier">dict</phrase></code></ulink> type.
        </para>
      </section>
      <section id="object_wrappers.boost_python_dict_hpp.class_dict">
        <title><link linkend="object_wrappers.boost_python_dict_hpp.class_dict">Class
        <code><phrase role="identifier">dict</phrase></code></link></title>
        <para>
          Exposes the <ulink url="http://www.python.org/dev/doc/devel/lib/typesmapping.html">mapping
          protocol</ulink> of Python's built-in <code><phrase role="identifier">dict</phrase></code>
          type. The semantics of the constructors and member functions defined below
          can be fully understood by reading the <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          concept definition. Since <code><phrase role="identifier">dict</phrase></code>
          is publicly derived from <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link>, the public <code><phrase
          role="identifier">object</phrase></code> interface applies to <code><phrase
          role="identifier">dict</phrase></code> instances as well.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">class</phrase> <phrase role="identifier">dict</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
   <phrase role="special">{</phrase>
      <phrase role="identifier">dict</phrase><phrase role="special">();</phrase>

      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="identifier">dict</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">data</phrase><phrase role="special">);</phrase>

      <phrase role="comment">// modifiers</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">clear</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">dict</phrase> <phrase role="identifier">copy</phrase><phrase role="special">();</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">tuple</phrase> <phrase role="identifier">popitem</phrase><phrase role="special">();</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">setdefault</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">k</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">setdefault</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">k</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">void</phrase> <phrase role="identifier">update</phrase><phrase role="special">(</phrase><phrase role="identifier">object_cref</phrase> <phrase role="identifier">E</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">update</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">E</phrase><phrase role="special">);</phrase>

      <phrase role="comment">// observers</phrase>
      <phrase role="identifier">list</phrase> <phrase role="identifier">values</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object_cref</phrase> <phrase role="identifier">k</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">k</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object_cref</phrase> <phrase role="identifier">k</phrase><phrase role="special">,</phrase> <phrase role="identifier">object_cref</phrase> <phrase role="identifier">d</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">k</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">bool</phrase> <phrase role="identifier">has_key</phrase><phrase role="special">(</phrase><phrase role="identifier">object_cref</phrase> <phrase role="identifier">k</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">has_key</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">k</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">list</phrase> <phrase role="identifier">items</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">iteritems</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">iterkeys</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">itervalues</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">list</phrase> <phrase role="identifier">keys</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_dict_hpp.example">
        <title><link linkend="object_wrappers.boost_python_dict_hpp.example">Example</link></title>
<programlisting><phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">dict</phrase> <phrase role="identifier">swap_object_dict</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">dict</phrase> <phrase role="identifier">d</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">dict</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">dict</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">target</phrase><phrase role="special">.</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;__dict__&quot;</phrase><phrase role="special">));</phrase>
    <phrase role="identifier">target</phrase><phrase role="special">.</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;__dict__&quot;</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="identifier">d</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="object_wrappers.boost_python_list_hpp">
      <title><link linkend="object_wrappers.boost_python_list_hpp">boost_python_list.hpp</link></title>
      <section id="object_wrappers.boost_python_list_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_list_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          for the Python <ulink url="http://www.python.org/doc/current/lib/typesseq-mutable.html">list</ulink>
          type.
        </para>
      </section>
      <section id="object_wrappers.boost_python_list_hpp.class_list">
        <title><link linkend="object_wrappers.boost_python_list_hpp.class_list">Class
        <code><phrase role="identifier">list</phrase></code></link></title>
        <para>
          Exposes the <ulink url="http://www.python.org/doc/current/lib/typesseq-mutable.html">mapping
          protocol</ulink> of Python's built-in <code><phrase role="identifier">list</phrase></code>
          type. The semantics of the constructors and member functions defined below
          can be fully understood by reading the <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          concept definition. Since <code><phrase role="identifier">list</phrase></code>
          is publicly derived from <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link>, the public <code><phrase
          role="identifier">object</phrase></code> interface applies to <code><phrase
          role="identifier">list</phrase></code> instances as well.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">list</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">list</phrase><phrase role="special">();</phrase> <phrase role="comment">// new list</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">list</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sequence</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">append</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">count</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">extend</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">index</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">insert</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">index</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase> <phrase role="comment">// insert object before index</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">pop</phrase><phrase role="special">();</phrase> <phrase role="comment">// remove and return item at index (default last)</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">pop</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">index</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">pop</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">index</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">remove</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">void</phrase> <phrase role="identifier">reverse</phrase><phrase role="special">();</phrase> <phrase role="comment">// reverse *IN PLACE*</phrase>

      <phrase role="keyword">void</phrase> <phrase role="identifier">sort</phrase><phrase role="special">();</phrase> <phrase role="comment">//  sort *IN PLACE*; if given, cmpfunc(x, y) -&gt; -1, 0, 1</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">sort</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_list_hpp.example">
        <title><link linkend="object_wrappers.boost_python_list_hpp.example">Example</link></title>
<programlisting><phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="comment">// Return the number of zeroes in the list</phrase>
<phrase role="keyword">long</phrase> <phrase role="identifier">zeroes</phrase><phrase role="special">(</phrase><phrase role="identifier">list</phrase> <phrase role="identifier">l</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">l</phrase><phrase role="special">.</phrase><phrase role="identifier">count</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="object_wrappers.boost_python_long_hpp">
      <title><link linkend="object_wrappers.boost_python_long_hpp">boost/python/long.hpp</link></title>
      <section id="object_wrappers.boost_python_long_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_long_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          for the Python <ulink url="http://www.python.org/doc/current/lib/typesnumeric.html">long</ulink>
          integer type.
        </para>
      </section>
      <section id="object_wrappers.boost_python_long_hpp.class_long">
        <title><link linkend="object_wrappers.boost_python_long_hpp.class_long">Class
        <code><phrase role="identifier">long_</phrase></code></link></title>
        <para>
          Exposes the <ulink url="http://www.python.org/doc/current/lib/typesnumeric.html">numeric
          type protocol</ulink> of Python's built-in <code><phrase role="keyword">long</phrase></code>
          type. The semantics of the constructors and member functions defined below
          can be fully understood by reading the <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          concept definition. Since <code><phrase role="identifier">long_</phrase></code>
          is publicly derived from <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link>, the public <code><phrase
          role="identifier">object</phrase></code> interface applies to <code><phrase
          role="identifier">long_</phrase></code> instances as well.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">long_</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">long_</phrase><phrase role="special">();</phrase> <phrase role="comment">// new long_</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">long_</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">U</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">long_</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">,</phrase> <phrase role="identifier">U</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">base</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_long_hpp.example">
        <title><link linkend="object_wrappers.boost_python_long_hpp.example">Example</link></title>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="comment">// compute a factorial without overflowing</phrase>
<phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">long_</phrase> <phrase role="identifier">fact</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">==</phrase> <phrase role="number">0</phrase><phrase role="special">)</phrase>
      <phrase role="keyword">return</phrase> <phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">long_</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">else</phrase>
      <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase> <phrase role="special">*</phrase> <phrase role="identifier">fact</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase> <phrase role="special">-</phrase> <phrase role="number">1</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="object_wrappers.boost_python_numeric_hpp">
      <title><link linkend="object_wrappers.boost_python_numeric_hpp">boost/python/numeric.hpp</link></title>
      <section id="object_wrappers.boost_python_numeric_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_numeric_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          for the Python <ulink url="http://www.python.org/dev/doc/devel/lib/typesmapping.html">array</ulink>
          type.
        </para>
      </section>
      <section id="object_wrappers.boost_python_numeric_hpp.class_array">
        <title><link linkend="object_wrappers.boost_python_numeric_hpp.class_array">Class
        <code><phrase role="identifier">array</phrase></code></link></title>
        <para>
          Provides access to the array types of <ulink url="http://www.pfdubois.com/numpy/">Numerical
          Python</ulink>'s <ulink url="http://www.pfdubois.com/numpy/#Numeric">Numeric</ulink>
          and <ulink url="http://stsdas.stsci.edu/numarray/index.html">NumArray</ulink>
          modules. With the exception of the functions documented below, the semantics
          of the constructors and member functions defined below can be fully understood
          by reading the <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          concept definition. Since array is publicly derived from object, the public
          object interface applies to array instances as well.
        </para>
        <para>
          The default behavior is to use numarray.NDArray as the associated Python
          type if the numarray module is installed in the default location. Otherwise
          it falls back to use Numeric.ArrayType. If neither extension module is
          installed, overloads of wrapped C++ functions with numeric::array parameters
          will never be matched, and other attempted uses of numeric::array will
          raise an appropriate Python exception. The associated Python type can be
          set manually using the set_module_and_type(...) static function.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">numeric</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">class</phrase> <phrase role="identifier">array</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
   <phrase role="special">{</phrase>
    <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">astype</phrase><phrase role="special">();</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Type</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">astype</phrase><phrase role="special">(</phrase><phrase role="identifier">Type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">type_</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Type</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">array</phrase> <phrase role="identifier">new_</phrase><phrase role="special">(</phrase><phrase role="identifier">Type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">type_</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">x1</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">x1</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">x2</phrase><phrase role="special">);</phrase>
      <phrase role="special">...</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">resize</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">x1</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">x2</phrase><phrase role="special">,...</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">xn</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">setshape</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">setshape</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">x1</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">setshape</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">x1</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">x2</phrase><phrase role="special">);</phrase>
      <phrase role="special">...</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">setshape</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">x1</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">x2</phrase><phrase role="special">,...</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">xn</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Indices</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Values</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">put</phrase><phrase role="special">(</phrase><phrase role="identifier">Indices</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">indices</phrase><phrase role="special">,</phrase> <phrase role="identifier">Values</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">values</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">take</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sequence</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">axis</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">File</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">tofile</phrase><phrase role="special">(</phrase><phrase role="identifier">File</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">f</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">();</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Typecode</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Typecode</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">copy</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">savespace</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Typecode</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Type</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Typecode</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">copy</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">savespace</phrase><phrase role="special">,</phrase> <phrase role="identifier">Type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Typecode</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Type</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Shape</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Typecode</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">copy</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">savespace</phrase><phrase role="special">,</phrase> <phrase role="identifier">Type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Shape</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">array</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x1</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">array</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x2</phrase><phrase role="special">);</phrase>
      <phrase role="special">...</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,...</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Tn</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">array</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x1</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x2</phrase><phrase role="special">,...</phrase><phrase role="identifier">Tn</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">xn</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">set_module_and_type</phrase><phrase role="special">();</phrase>
      <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">set_module_and_type</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">package_path</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">type_name</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">get_module_name</phrase><phrase role="special">();</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">argmax</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">axis</phrase><phrase role="special">=-</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">argmin</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">axis</phrase><phrase role="special">=-</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">argsort</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">axis</phrase><phrase role="special">=-</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">void</phrase> <phrase role="identifier">byteswap</phrase><phrase role="special">();</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">copy</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">diagonal</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">offset</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">axis1</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">axis2</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">void</phrase> <phrase role="identifier">info</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">bool</phrase> <phrase role="identifier">is_c_array</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">isbyteswapped</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">sort</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">trace</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">offset</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">axis1</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">axis2</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">char</phrase> <phrase role="identifier">typecode</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">getflat</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">getrank</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">getshape</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">isaligned</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">iscontiguous</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">itemsize</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">nelements</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">nonzero</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">void</phrase> <phrase role="identifier">ravel</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">repeat</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">repeats</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">axis</phrase><phrase role="special">=</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">setflat</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">flat</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">swapaxes</phrase><phrase role="special">(</phrase><phrase role="keyword">long</phrase> <phrase role="identifier">axis1</phrase><phrase role="special">,</phrase> <phrase role="keyword">long</phrase> <phrase role="identifier">axis2</phrase><phrase role="special">);</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">tostring</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">transpose</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">axes</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">());</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">view</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_numeric_hpp.class_array_observer_functions">
        <title><link linkend="object_wrappers.boost_python_numeric_hpp.class_array_observer_functions">Class
        <code><phrase role="identifier">array</phrase></code> observer functions</link></title>
<programlisting><phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">();</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Typecode</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Typecode</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">copy</phrase> <phrase role="special">=</phrase> <phrase role="keyword">true</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">savespace</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Typecode</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Type</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Typecode</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">copy</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">savespace</phrase><phrase role="special">,</phrase> <phrase role="identifier">Type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sequence</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Typecode</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Type</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Shape</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">factory</phrase><phrase role="special">(</phrase><phrase role="identifier">Sequence</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Typecode</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">copy</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">savespace</phrase><phrase role="special">,</phrase> <phrase role="identifier">Type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">Shape</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
</programlisting>
        <para>
          These functions map to the underlying array type's array() function family.
          They are not called &quot;array&quot; because of the C++ limitation that
          you can't define a member function with the same name as its enclosing
          class.
        </para>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Type</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">array</phrase> <phrase role="identifier">new_</phrase><phrase role="special">(</phrase><phrase role="identifier">Type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <para>
          This function maps to the underlying array type's new() function. It is
          not called &quot;new&quot; because that is a keyword in C++.
        </para>
      </section>
      <section id="object_wrappers.boost_python_numeric_hpp.class_array_static_functions">
        <title><link linkend="object_wrappers.boost_python_numeric_hpp.class_array_static_functions">Class
        <code><phrase role="identifier">array</phrase></code> static functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">set_module_and_type</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">package_path</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">type_name</phrase><phrase role="special">);</phrase>
<phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">set_module_and_type</phrase><phrase role="special">();</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                package_path and type_name, if supplied, is an <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                The first form sets the package path of the module that supplies
                the type named by type_name to package_path. The second form restores
                the default search behavior. The associated Python type will be searched
                for only the first time it is needed, and thereafter the first time
                it is needed after an invocation of set_module_and_type.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">get_module_name</phrase><phrase role="special">()</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Returns the name of the module containing the class that will be
                held by new <code><phrase role="identifier">numeric</phrase><phrase
                role="special">::</phrase><phrase role="identifier">array</phrase></code>
                instances.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_numeric_hpp.example">
        <title><link linkend="object_wrappers.boost_python_numeric_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">numeric</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">tuple</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// sets the first element in a 2d numeric array</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">set_first_element</phrase><phrase role="special">(</phrase><phrase role="identifier">numeric</phrase><phrase role="special">::</phrase><phrase role="identifier">array</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">y</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">value</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">y</phrase><phrase role="special">[</phrase><phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">,</phrase><phrase role="number">0</phrase><phrase role="special">)]</phrase> <phrase role="special">=</phrase> <phrase role="identifier">value</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="object_wrappers.boost_python_object_hpp">
      <title><link linkend="object_wrappers.boost_python_object_hpp">boost/python/object.hpp</link></title>
      <section id="object_wrappers.boost_python_object_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_object_hpp.introduction">Introduction</link></title>
        <para>
          Exposes the generic Python object wrapper class object, and related classes.
          In order to avoid some potenential problems with argument-dependent lookup
          and the generalized operators defined on object, all these facilities are
          defined in namespace boost::python::api, and object is imported into namespace
          boost::python with a using-declaration.
        </para>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_slice_nil">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_slice_nil">Class
        <code><phrase role="identifier">slice_nil</phrase></code></link></title>
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">slice_nil</phrase><phrase role="special">;</phrase>
<phrase role="keyword">static</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">slice_nil</phrase><phrase role="special">();</phrase>
</programlisting>
        <para>
          A type that can be used to get the effect of leaving out an index in a
          Python slice expression:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase><phrase role="special">[:-</phrase><phrase role="number">1</phrase><phrase role="special">]</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase><phrase role="special">[::-</phrase><phrase role="number">1</phrase><phrase role="special">]</phrase>
</programlisting>
        <para>
          C++ equivalent:
        </para>
<programlisting><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">_</phrase><phrase role="special">,-</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase>
<phrase role="identifier">x</phrase><phrase role="special">[</phrase><phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">_</phrase><phrase role="special">,</phrase><phrase role="identifier">_</phrase><phrase role="special">,-</phrase><phrase role="number">1</phrase><phrase role="special">)]</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_attribute_policies">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_attribute_policies">Class
        <code><phrase role="identifier">const_attribute_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an attribute access
          to a const object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">const_attribute_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">key_type</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_attribute_policies_s">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_attribute_policies_s">Class
        <code><phrase role="identifier">const_attribute_policies</phrase></code>
        static functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                key is an <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the attribute of target named by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An object managing the result of the attribute access.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_attribute_policies">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_attribute_policies">Class
        <code><phrase role="identifier">attribute_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an attribute access
          to a mutable object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">attribute_policies</phrase> <phrase role="special">:</phrase> <phrase role="identifier">const_attribute_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_attribute_policies_static_">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_attribute_policies_static_">Class
        <code><phrase role="identifier">attribute_policies</phrase></code> static
        functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                key is an <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                sets the attribute of target named by key to value.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                key is an <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                deletes the attribute of target named by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_objattribute_policie">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_objattribute_policie">Class
        <code><phrase role="identifier">const_objattribute_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an attribute access
          to a const object when the attribute name is given as a const object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">const_objattribute_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key_type</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_objattribute_polici0">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_objattribute_polici0">Class
        <code><phrase role="identifier">const_objattribute_policies</phrase></code>
        static functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                key is an object holding a string.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the attribute of target named by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An object managing the result of the attribute access.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_objattribute_policies">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_objattribute_policies">Class
        <code><phrase role="identifier">objattribute_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an attribute access
          to a mutable object when the attribute name is given as a const object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">objattribute_policies</phrase> <phrase role="special">:</phrase> <phrase role="identifier">const_objattribute_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_objattribute_policies_stat">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_objattribute_policies_stat">Class
        <code><phrase role="identifier">objattribute_policies</phrase></code> static
        functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                key is an object holding a string.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                sets the attribute of target named by key to value.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                key is an object holding a string.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                deletes the attribute of target named by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_item_policies">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_item_policies">Class
        <code><phrase role="identifier">const_item_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an item access (via
          the Python bracket operators []) to a const object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">const_item_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">key_type</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_item_policies_static">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_item_policies_static">Class
        <code><phrase role="identifier">const_item_policies</phrase></code> static
        functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the item of target specified by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An object managing the result of the item access.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_item_policies">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_item_policies">Class
        <code><phrase role="identifier">item_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an item access (via
          the Python bracket operators []) to a mutable object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">item_policies</phrase> <phrase role="special">:</phrase> <phrase role="identifier">const_item_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_item_policies_static_funct">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_item_policies_static_funct">Class
        <code><phrase role="identifier">item_policies</phrase></code> static functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                sets the item of target specified by key to value.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                deletes the item of target specified by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_slice_policies">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_slice_policies">Class
        <code><phrase role="identifier">const_slice_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an slice access (via
          the Python slice notation [x:y]) to a const object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">const_slice_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">pair</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;&gt;,</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;&gt;</phrase> <phrase role="special">&gt;</phrase> <phrase role="identifier">key_type</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_const_slice_policies_stati">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_const_slice_policies_stati">Class
        <code><phrase role="identifier">const_slice_policies</phrase></code> static
        functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the slice of target specified by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An object managing the result of the slice access.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_slice_policies">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_slice_policies">Class
        <code><phrase role="identifier">slice_policies</phrase></code></link></title>
        <para>
          The policies which are used for proxies representing an slice access to
          a mutable object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">slice_policies</phrase> <phrase role="special">:</phrase> <phrase role="identifier">const_slice_policies</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_slice_policies_static_func">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_slice_policies_static_func">Class
        <code><phrase role="identifier">slice_policies</phrase></code> static functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">,</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">value</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                sets the slice of target specified by key to value.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">target</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                deletes the slice of target specified by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                if a Python exception is raised.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_template_object_operators">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_template_object_operators">Class
        template <code><phrase role="identifier">object_operators</phrase></code></link></title>
        <para>
          This is the base class of object and its proxy template used to supply
          common interface: member functions, and operators which must be defined
          within the class body. Its template parameter U is expected to be a class
          derived from object_operators&lt;U&gt;. In practice users should never
          use this class directly, but it is documented here because it supplies
          important interface to object and its proxies.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">U</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">object_operators</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="comment">// function call</phrase>
      <phrase role="comment">//</phrase>
      <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="special">...</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,...</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">An</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,...</phrase><phrase role="identifier">An</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">args_proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">args_proxy</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">args</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">args_proxy</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">args</phrase><phrase role="special">,</phrase>
                        <phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">kwds_proxy</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">kwds</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="comment">// truth value testing</phrase>
      <phrase role="comment">//</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">unspecified</phrase> <phrase role="identifier">bool_type</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">operator</phrase> <phrase role="identifier">bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="comment">// Attribute access</phrase>
      <phrase role="comment">//</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_attribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_attribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*);</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_objattribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_objattribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

      <phrase role="comment">// item access</phrase>
      <phrase role="comment">//</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_item</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_item</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>

      <phrase role="comment">// slicing</phrase>
      <phrase role="comment">//</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">V</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_slice</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">V</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">V</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_slice</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">V</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_template_object_operators_">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_template_object_operators_">Class
        template <code><phrase role="identifier">object_operators</phrase></code>
        observer functions</link></title>
<programlisting><phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="special">...</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,...</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">An</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a2</phrase><phrase role="special">,...</phrase><phrase role="identifier">An</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">aN</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                <code><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase
                role="identifier">object</phrase><phrase role="special">&gt;(</phrase><phrase
                role="identifier">object</phrase><phrase role="special">(*</phrase><phrase
                role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase
                role="identifier">U</phrase><phrase role="special">*&gt;(</phrase><phrase
                role="keyword">this</phrase><phrase role="special">)).</phrase><phrase
                role="identifier">ptr</phrase><phrase role="special">(),</phrase>
                <phrase role="identifier">a1</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">a2</phrase><phrase role="special">,...</phrase><phrase
                role="identifier">aN</phrase><phrase role="special">)</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">args_proxy</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">args</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                <code><phrase role="identifier">call</phrase> <phrase role="identifier">object</phrase>
                <phrase role="identifier">with</phrase> <phrase role="identifier">arguments</phrase>
                <phrase role="identifier">given</phrase> <phrase role="identifier">by</phrase>
                <phrase role="identifier">the</phrase> <phrase role="identifier">tuple</phrase>
                <phrase role="identifier">args</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">args_proxy</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">args</phrase><phrase role="special">,</phrase>
                  <phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">kwds_proxy</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">kwds</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                <code><phrase role="identifier">call</phrase> <phrase role="identifier">object</phrase>
                <phrase role="identifier">with</phrase> <phrase role="identifier">arguments</phrase>
                <phrase role="identifier">given</phrase> <phrase role="identifier">by</phrase>
                <phrase role="identifier">the</phrase> <phrase role="identifier">tuple</phrase>
                <phrase role="identifier">args</phrase><phrase role="special">,</phrase>
                <phrase role="keyword">and</phrase> <phrase role="identifier">named</phrase>
                <phrase role="identifier">arguments</phrase> <phrase role="identifier">given</phrase>
                <phrase role="identifier">by</phrase> <phrase role="identifier">the</phrase>
                <phrase role="identifier">dictionary</phrase> <phrase role="identifier">kwds</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Tests truth value of <code><phrase role="special">*</phrase><phrase
                role="keyword">this</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase
                role="identifier">object</phrase><phrase role="special">&gt;(</phrase><phrase
                role="identifier">object</phrase><phrase role="special">(*</phrase><phrase
                role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase
                role="identifier">U</phrase><phrase role="special">*&gt;(</phrase><phrase
                role="keyword">this</phrase><phrase role="special">)).</phrase><phrase
                role="identifier">ptr</phrase><phrase role="special">(),</phrase>
                <phrase role="identifier">a1</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">a2</phrase><phrase role="special">,...</phrase><phrase
                role="identifier">aN</phrase><phrase role="special">)</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_attribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_attribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                name is an <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the named attribute of *this.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a proxy object which binds <code><phrase role="identifier">object</phrase><phrase
                role="special">(*</phrase><phrase role="keyword">static_cast</phrase><phrase
                role="special">&lt;</phrase><phrase role="identifier">U</phrase><phrase
                role="special">*&gt;(</phrase><phrase role="keyword">this</phrase><phrase
                role="special">))</phrase></code> as its target, and name as its
                key.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_objattribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_objattribute</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                name is a object holding a string.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the named attribute of <code><phrase role="special">*</phrase><phrase
                role="keyword">this</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a proxy object which binds <code><phrase role="identifier">object</phrase><phrase
                role="special">(*</phrase><phrase role="keyword">static_cast</phrase><phrase
                role="special">&lt;</phrase><phrase role="identifier">U</phrase><phrase
                role="special">*&gt;(</phrase><phrase role="keyword">this</phrase><phrase
                role="special">))</phrase></code> as its target, and name as its
                key.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_item</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_item</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">[](</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the item of <code><phrase role="special">*</phrase><phrase
                role="keyword">this</phrase></code> indicated by key.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a proxy object which binds <code><phrase role="identifier">object</phrase><phrase
                role="special">(*</phrase><phrase role="keyword">static_cast</phrase><phrase
                role="special">&lt;</phrase><phrase role="identifier">U</phrase><phrase
                role="special">*&gt;(</phrase><phrase role="keyword">this</phrase><phrase
                role="special">))</phrase></code> as its target, and object(key)
                as its key.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">V</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">const_object_slice</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">V</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">finish</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">V</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object_slice</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">V</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">finish</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                accesses the slice of <code><phrase role="special">*</phrase><phrase
                role="keyword">this</phrase></code> indicated by <code><phrase role="identifier">std</phrase><phrase
                role="special">::</phrase><phrase role="identifier">make_pair</phrase><phrase
                role="special">(</phrase><phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">start</phrase><phrase
                role="special">),</phrase> <phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">finish</phrase><phrase
                role="special">))</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a proxy object which binds <code><phrase role="identifier">object</phrase><phrase
                role="special">(*</phrase><phrase role="keyword">static_cast</phrase><phrase
                role="special">&lt;</phrase><phrase role="identifier">U</phrase><phrase
                role="special">*&gt;(</phrase><phrase role="keyword">this</phrase><phrase
                role="special">))</phrase></code> as its target, and <code><phrase
                role="identifier">std</phrase><phrase role="special">::</phrase><phrase
                role="identifier">make_pair</phrase><phrase role="special">(</phrase><phrase
                role="identifier">object</phrase><phrase role="special">(</phrase><phrase
                role="identifier">start</phrase><phrase role="special">),</phrase>
                <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase
                role="identifier">finish</phrase><phrase role="special">))</phrase></code>
                as its key.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_object">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_object">Class
        <code><phrase role="identifier">object</phrase></code></link></title>
        <para>
          The intention is that object acts as much like a Python variable as possible.
          Thus expressions you'd expect to work in Python should generally work in
          the same way from C++. Most of object's interface is provided by its base
          class <code><phrase role="identifier">object_operators</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">object</phrase><phrase
          role="special">&gt;</phrase></code>, and the free functions defined in
          this header.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">object</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object_operators</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">object</phrase><phrase role="special">&gt;</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">object</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>

      <phrase role="special">~</phrase><phrase role="identifier">object</phrase><phrase role="special">();</phrase>

      <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
      <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">ptr</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">is_none</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_object_constructors_and_de">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_object_constructors_and_de">Class
        <code><phrase role="identifier">object</phrase></code> constructors and destructor</link></title>
<programlisting><phrase role="identifier">object</phrase><phrase role="special">();</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Constructs an object managing a reference to the Python None object.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                nothing.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">explicit</phrase> <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                converts x to python and manages a reference to it.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set">error_already_set</link>
                and sets a Python TypeError exception if no such conversion is possible.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="special">~</phrase><phrase role="identifier">object</phrase><phrase role="special">();</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                decrements the reference count of the internally-held object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_object_modifiers">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_object_modifiers">Class
        <code><phrase role="identifier">object</phrase></code> modifiers</link></title>
<programlisting><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">ptr</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a pointer to the internally-held Python object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">is_none</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                result of <code><phrase role="special">(</phrase><phrase role="identifier">ptr</phrase><phrase
                role="special">()</phrase> <phrase role="special">==</phrase> <phrase
                role="identifier">Py_None</phrase><phrase role="special">)</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_template_proxy">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_template_proxy">Class
        template <code><phrase role="identifier">proxy</phrase></code></link></title>
        <para>
          This template is instantiated with various Policies described in this document
          in order to implement attribute, item, and slice access for object. It
          stores an object of type Policies::key_type.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">api</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">proxy</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object_operators</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="keyword">operator</phrase> <phrase role="identifier">object</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">proxy</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">proxy</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">inline</phrase> <phrase role="identifier">proxy</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">/=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">%=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;&lt;=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;&gt;=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&amp;=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">|=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_template_proxy_observer_fu">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_template_proxy_observer_fu">Class
        template <code><phrase role="identifier">proxy</phrase></code> observer functions</link></title>
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">object</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                applies <code><phrase role="identifier">Policies</phrase><phrase
                role="special">::</phrase><phrase role="identifier">get</phrase><phrase
                role="special">(</phrase><phrase role="identifier">target</phrase><phrase
                role="special">,</phrase> <phrase role="identifier">key</phrase><phrase
                role="special">)</phrase></code> with the proxy's target and key
                objects.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.class_template_proxy_modifier_fu">
        <title><link linkend="object_wrappers.boost_python_object_hpp.class_template_proxy_modifier_fu">Class
        template <code><phrase role="identifier">proxy</phrase></code> modifier functions</link></title>
<programlisting><phrase role="identifier">proxy</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">proxy</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">inline</phrase> <phrase role="identifier">proxy</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                <code><phrase role="identifier">Policies</phrase><phrase role="special">::</phrase><phrase
                role="identifier">set</phrase><phrase role="special">(</phrase><phrase
                role="identifier">target</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">key</phrase> <phrase role="special">,</phrase>
                <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase
                role="identifier">rhs</phrase><phrase role="special">))</phrase></code>
                with the proxy's target and key objects.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">/=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">%=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;&lt;=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;&gt;=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&amp;=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">proxy</phrase> <phrase role="keyword">operator</phrase><phrase role="special">|=(</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                for a given <code><phrase role="keyword">operator</phrase><phrase
                role="error">@</phrase><phrase role="special">=</phrase></code>,
                <code><phrase role="identifier">object</phrase><phrase role="special">(*</phrase><phrase
                role="keyword">this</phrase><phrase role="special">)</phrase> <phrase
                role="error">@</phrase><phrase role="special">=</phrase> <phrase
                role="identifier">rhs</phrase><phrase role="special">;</phrase></code>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Policies::del(target, key ) with the proxy's target and key objects.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.functions">
        <title><link linkend="object_wrappers.boost_python_object_hpp.functions">Functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">del</phrase><phrase role="special">(</phrase><phrase role="identifier">proxy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                <code><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase
                role="identifier">del</phrase><phrase role="special">()</phrase></code>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;=(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;=(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">!=(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                returns the result of applying the operator to <code><phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">l</phrase><phrase
                role="special">)</phrase></code> and <code><phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">r</phrase><phrase
                role="special">)</phrase></code>, respectively, in Python.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">/(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">%(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;&lt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;&gt;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&amp;(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">^(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">L</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase> <phrase role="keyword">operator</phrase><phrase role="special">|(</phrase><phrase role="identifier">L</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                returns the result of applying the operator to <code><phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">l</phrase><phrase
                role="special">)</phrase></code> and <code><phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">r</phrase><phrase
                role="special">)</phrase></code>, respectively, in Python.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">+=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">/=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">%=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;&lt;=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">)</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&gt;&gt;=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&amp;=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">^=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">|=(</phrase><phrase role="identifier">object</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">,</phrase><phrase role="identifier">R</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                assigns to <code><phrase role="identifier">l</phrase></code> the
                result of applying the corresponding Python inplace operator to
                <code><phrase role="identifier">l</phrase></code> and <code><phrase
                role="identifier">object</phrase><phrase role="special">(</phrase><phrase
                role="identifier">r</phrase><phrase role="special">)</phrase></code>,
                respectively.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                l
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">long</phrase> <phrase role="identifier">len</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">obj</phrase><phrase role="special">);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                <code><phrase role="identifier">PyObject_Length</phrase><phrase role="special">(</phrase><phrase
                role="identifier">obj</phrase><phrase role="special">.</phrase><phrase
                role="identifier">ptr</phrase><phrase role="special">())</phrase></code>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="identifier">len</phrase><phrase role="special">()</phrase></code>
                of object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_object_hpp.example">
        <title><link linkend="object_wrappers.boost_python_object_hpp.example">Example</link></title>
        <para>
          Python code:
        </para>
<programlisting><phrase role="identifier">def</phrase> <phrase role="identifier">sum_items</phrase><phrase role="special">(</phrase><phrase role="identifier">seq</phrase><phrase role="special">):</phrase>
   <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase>
   <phrase role="keyword">for</phrase> <phrase role="identifier">x</phrase> <phrase role="identifier">in</phrase> <phrase role="identifier">seq</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">result</phrase> <phrase role="special">+=</phrase> <phrase role="identifier">x</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase>
</programlisting>
        <para>
          C++ version
        </para>
<programlisting><phrase role="identifier">object</phrase> <phrase role="identifier">sum_items</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="identifier">seq</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">object</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">);</phrase>
   <phrase role="keyword">for</phrase> <phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">i</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="identifier">i</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">len</phrase><phrase role="special">(</phrase><phrase role="identifier">seq</phrase><phrase role="special">);</phrase> <phrase role="special">++</phrase><phrase role="identifier">i</phrase><phrase role="special">)</phrase>
      <phrase role="identifier">result</phrase> <phrase role="special">+=</phrase> <phrase role="identifier">seq</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">];</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">result</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="object_wrappers.boost_python_str_hpp">
      <title><link linkend="object_wrappers.boost_python_str_hpp">boost/python/str.hpp</link></title>
      <section id="object_wrappers.boost_python_str_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_str_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          for the Python <ulink url="http://www.python.org/dev/doc/devel/lib/string-methods.html"><code><phrase
          role="identifier">str</phrase></code></ulink> type.
        </para>
      </section>
      <section id="object_wrappers.boost_python_str_hpp.class_str">
        <title><link linkend="object_wrappers.boost_python_str_hpp.class_str">Class
        <code><phrase role="identifier">str</phrase></code></link></title>
        <para>
          Exposes the <ulink url="http://www.python.org/dev/doc/devel/lib/string-methods.html">string
          methods</ulink> of Python's built-in <code><phrase role="identifier">str</phrase></code>
          type. The semantics of the constructors and member functions defined below,
          except for the two-argument constructors which construct str objects from
          a range of characters, can be fully understood by reading the <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          concept definition. Since str is publicly derived from <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link>, the public <code><phrase
          role="identifier">object</phrase></code> interface applies to <code><phrase
          role="identifier">str</phrase></code> instances as well.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">str</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">str</phrase><phrase role="special">();</phrase> <phrase role="comment">// new str</phrase>

      <phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">s</phrase><phrase role="special">);</phrase> <phrase role="comment">// new str</phrase>

      <phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">finish</phrase><phrase role="special">);</phrase> <phrase role="comment">// new str</phrase>
      <phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">length</phrase><phrase role="special">);</phrase> <phrase role="comment">// new str</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">str</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">str</phrase> <phrase role="identifier">capitalize</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">center</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">width</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">count</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">count</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase><phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">count</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase><phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">decode</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">decode</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">encoding</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">decode</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">encoding</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">errors</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">object</phrase> <phrase role="identifier">encode</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">encode</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">encoding</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">encode</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">encoding</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">errors</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">endswith</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">suffix</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">endswith</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">suffix</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">endswith</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">suffix</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">str</phrase> <phrase role="identifier">expandtabs</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">expandtabs</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">tabsize</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">find</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">index</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">index</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">index</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">bool</phrase> <phrase role="identifier">isalnum</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">isalpha</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">isdigit</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">islower</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">isspace</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">istitle</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">isupper</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">join</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sequence</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">ljust</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">width</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">str</phrase> <phrase role="identifier">lower</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">lstrip</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">replace</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">new_</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">replace</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">old</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">new_</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">maxsplit</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">rfind</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">rfind</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">rfind</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">rindex</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">rindex</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">long</phrase> <phrase role="identifier">rindex</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sub</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">rjust</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">width</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">str</phrase> <phrase role="identifier">rstrip</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">list</phrase> <phrase role="identifier">split</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">list</phrase> <phrase role="identifier">split</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sep</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">list</phrase> <phrase role="identifier">split</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sep</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">maxsplit</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">list</phrase> <phrase role="identifier">splitlines</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">list</phrase> <phrase role="identifier">splitlines</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">keepends</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">startswith</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">prefix</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">startswidth</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">prefix</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">bool</phrase> <phrase role="identifier">startswidth</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">prefix</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">T3</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">str</phrase> <phrase role="identifier">strip</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">swapcase</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">title</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">translate</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">table</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">str</phrase> <phrase role="identifier">translate</phrase><phrase role="special">(</phrase><phrase role="identifier">T1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">table</phrase><phrase role="special">,</phrase> <phrase role="identifier">T2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">deletechars</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">str</phrase> <phrase role="identifier">upper</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_str_hpp.example">
        <title><link linkend="object_wrappers.boost_python_str_hpp.example">Example</link></title>
<programlisting><phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">str</phrase> <phrase role="identifier">remove_angle_brackets</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">strip</phrase><phrase role="special">(</phrase><phrase role="char">'&lt;'</phrase><phrase role="special">).</phrase><phrase role="identifier">strip</phrase><phrase role="special">(</phrase><phrase role="char">'&gt;'</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="object_wrappers.boost_python_slice_hpp">
      <title><link linkend="object_wrappers.boost_python_slice_hpp">boost/python/slice.hpp</link></title>
      <section id="object_wrappers.boost_python_slice_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_slice_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          for the Python <ulink url="http://www.python.org/doc/2.3.3/api/slice-objects.html"><code><phrase
          role="identifier">slice</phrase></code></ulink> type.
        </para>
      </section>
      <section id="object_wrappers.boost_python_slice_hpp.class_slice">
        <title><link linkend="object_wrappers.boost_python_slice_hpp.class_slice">Class
        <code><phrase role="identifier">slice</phrase></code></link></title>
        <para>
          Exposes the extended slicing protocol by wrapping the built-in slice type.
          The semantics of the constructors and member functions defined below can
          be fully understood by reading the <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          concept definition. Since <code><phrase role="identifier">slice</phrase></code>
          is publicly derived from <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link>, the public <code><phrase
          role="identifier">object</phrase></code> interface applies to <code><phrase
          role="identifier">slice</phrase></code> instances as well.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">slice</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">slice</phrase><phrase role="special">();</phrase> <phrase role="comment">// create an empty slice, equivalent to [::]</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Int1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Int2</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Int1</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">Int2</phrase> <phrase role="identifier">stop</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Int1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Int2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Int3</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Int1</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">Int2</phrase> <phrase role="identifier">stop</phrase><phrase role="special">,</phrase> <phrase role="identifier">Int3</phrase> <phrase role="identifier">step</phrase><phrase role="special">);</phrase>

      <phrase role="comment">// Access the parameters this slice was created with.</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">start</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">stop</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">object</phrase> <phrase role="identifier">step</phrase><phrase role="special">();</phrase>

      <phrase role="comment">// The return type of slice::get_indices()</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">RandomAccessIterator</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">struct</phrase> <phrase role="identifier">range</phrase>
      <phrase role="special">{</phrase>
          <phrase role="identifier">RandomAccessIterator</phrase> <phrase role="identifier">start</phrase><phrase role="special">;</phrase>
          <phrase role="identifier">RandomAccessIterator</phrase> <phrase role="identifier">stop</phrase><phrase role="special">;</phrase>
          <phrase role="keyword">int</phrase> <phrase role="identifier">step</phrase><phrase role="special">;</phrase>
      <phrase role="special">};</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">RandomAccessIterator</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">range</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">RandomAccessIterator</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">get_indices</phrase><phrase role="special">(</phrase>
          <phrase role="identifier">RandomAccessIterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">begin</phrase><phrase role="special">,</phrase>
          <phrase role="identifier">RandomAccessIterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">);</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_slice_hpp.class_slice_constructors">
        <title><link linkend="object_wrappers.boost_python_slice_hpp.class_slice_constructors">Class
        <code><phrase role="identifier">slice</phrase></code> constructors</link></title>
<programlisting><phrase role="identifier">slice</phrase><phrase role="special">();</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                constructs a slice with default stop, start, and step values. Equivalent
                to the slice object created as part of the Python expression <code><phrase
                role="identifier">base</phrase><phrase role="special">[::]</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                nothing
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Int1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Int2</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Int1</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">Int2</phrase> <phrase role="identifier">stop</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                <code><phrase role="identifier">start</phrase></code>, <code><phrase
                role="identifier">stop</phrase></code>, and <code><phrase role="identifier">step</phrase></code>
                are of type <code><phrase role="identifier">slice_nil</phrase></code>
                or convertible to type <code><phrase role="identifier">object</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                constructs a new slice with default step value and the provided start
                and stop values. Equivalent to the slice object created by the built-in
                Python function <code><phrase role="identifier">slice</phrase><phrase
                role="special">(</phrase><phrase role="identifier">start</phrase><phrase
                role="special">,</phrase><phrase role="identifier">stop</phrase><phrase
                role="special">)</phrase></code>, or as part of the Python expression
                <code><phrase role="identifier">base</phrase><phrase role="special">[</phrase><phrase
                role="identifier">start</phrase><phrase role="special">:</phrase><phrase
                role="identifier">stop</phrase><phrase role="special">]</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <code><phrase role="identifier">error_already_set</phrase></code>
                and sets a Python TypeError exception if no conversion is possible
                from the arguments to type object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Int1</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Int2</phrase><phrase role="special">,</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Int3</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Int1</phrase> <phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">Int2</phrase> <phrase role="identifier">stop</phrase><phrase role="special">,</phrase> <phrase role="identifier">Int3</phrase> <phrase role="identifier">step</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                <code><phrase role="identifier">start</phrase></code>, <code><phrase
                role="identifier">stop</phrase></code>, and <code><phrase role="identifier">step</phrase></code>
                are <code><phrase role="identifier">slice_nil</phrase></code> or
                convertible to type <code><phrase role="identifier">object</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                constructs a new slice with start stop and step values. Equivalent
                to the slice object created by the built-in Python function <code><phrase
                role="identifier">slice</phrase><phrase role="special">(</phrase><phrase
                role="identifier">start</phrase><phrase role="special">,</phrase><phrase
                role="identifier">stop</phrase><phrase role="special">,</phrase><phrase
                role="identifier">step</phrase><phrase role="special">)</phrase></code>,
                or as part of the Python expression <code><phrase role="identifier">base</phrase><phrase
                role="special">[</phrase><phrase role="identifier">start</phrase><phrase
                role="special">:</phrase><phrase role="identifier">stop</phrase><phrase
                role="special">:</phrase><phrase role="identifier">step</phrase><phrase
                role="special">]</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <code><phrase role="identifier">error_already_set</phrase></code>
                and sets a Python TypeError exception if no conversion is possible
                from the arguments to type object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_slice_hpp.class_slice_observer_functions">
        <title><link linkend="object_wrappers.boost_python_slice_hpp.class_slice_observer_functions">Class
        <code><phrase role="identifier">slice</phrase></code> observer functions</link></title>
<programlisting><phrase role="identifier">object</phrase> <phrase role="identifier">slice</phrase><phrase role="special">::</phrase><phrase role="identifier">start</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">slice</phrase><phrase role="special">::</phrase><phrase role="identifier">stop</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">slice</phrase><phrase role="special">::</phrase><phrase role="identifier">step</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                None
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                nothing
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                the parameter that the slice was created with. If the parameter was
                omitted or <code><phrase role="identifier">slice_nil</phrase></code>
                was used when the slice was created, than that parameter will be
                a reference to <code><phrase role="identifier">PyNone</phrase></code>
                and compare equal to a default-constructed object. In principal,
                any object may be used when creating a slice object, but in practice
                they are usually integers.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">RandomAccessIterator</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">slice</phrase><phrase role="special">::</phrase><phrase role="identifier">range</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">RandomAccessIterator</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">slice</phrase><phrase role="special">::</phrase><phrase role="identifier">get_indices</phrase><phrase role="special">(</phrase>
    <phrase role="identifier">RandomAccessIterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">begin</phrase><phrase role="special">,</phrase>
    <phrase role="identifier">RandomAccessIterator</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">end</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Arguments</term>
            <listitem>
              <para>
                A pair of STL-conforming Random Access Iterators that form a half-open
                range.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Create a RandomAccessIterator pair that defines a fully-closed range
                within the <code><phrase role="special">[</phrase><phrase role="identifier">begin</phrase><phrase
                role="special">,</phrase><phrase role="identifier">end</phrase><phrase
                role="special">)</phrase></code> range of its arguments. This function
                translates this slice's indices while accounting for the effects
                of any PyNone or negative indices, and non-singular step sizes.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a <code><phrase role="identifier">slice</phrase><phrase role="special">::</phrase><phrase
                role="identifier">range</phrase></code> that has been initialized
                with a non-zero value of step and a pair of RandomAccessIterators
                that point within the range of this functions arguments and define
                a closed interval.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                Raises a Python TypeError exception if any of this slice's arguments
                are neither references to PyNone nor convertible to int. Throws
                <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
                role="identifier">invalid_argument</phrase></code> if the resulting
                range would be empty. You should always wrap calls to <code><phrase
                role="identifier">slice</phrase><phrase role="special">::</phrase><phrase
                role="identifier">get_indices</phrase><phrase role="special">()</phrase></code>
                within <code><phrase role="keyword">try</phrase> <phrase role="special">{</phrase>
                <phrase role="special">...;</phrase> <phrase role="special">}</phrase>
                <phrase role="keyword">catch</phrase> <phrase role="special">(</phrase><phrase
                role="identifier">std</phrase><phrase role="special">::</phrase><phrase
                role="identifier">invalid_argument</phrase><phrase role="special">)</phrase>
                <phrase role="special">{}</phrase></code> to handle this case and
                take appropriate action.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                closed-interval: If an open interval were used, then for step size
                other than 1, the required state for the end iterator would point
                beyond the one-past-the-end position or before the beginning of the
                specified range. exceptions on empty slice: It is impossible to define
                a closed interval over an empty range, so some other form of error
                checking would have to be used to prevent undefined behavior. In
                the case where the exception is not caught, it will simply be translated
                to Python by the default exception handling mechanisms.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_slice_hpp.example">
        <title><link linkend="object_wrappers.boost_python_slice_hpp.example">Example</link></title>
<programlisting><phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="comment">// Perform an extended slice of a Python list.</phrase>
<phrase role="comment">// Warning: extended slicing was not supported for built-in types prior </phrase>
<phrase role="comment">// to Python 2.3</phrase>
<phrase role="identifier">list</phrase> <phrase role="identifier">odd_elements</phrase><phrase role="special">(</phrase><phrase role="identifier">list</phrase> <phrase role="identifier">l</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">l</phrase><phrase role="special">[</phrase><phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="identifier">_</phrase><phrase role="special">,</phrase><phrase role="identifier">_</phrase><phrase role="special">,</phrase><phrase role="number">2</phrase><phrase role="special">)];</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">// Perform a multidimensional extended slice of a Numeric.array</phrase>
<phrase role="identifier">numeric</phrase><phrase role="special">::</phrase><phrase role="identifier">array</phrase> <phrase role="identifier">even_columns</phrase><phrase role="special">(</phrase><phrase role="identifier">numeric</phrase><phrase role="special">::</phrase><phrase role="identifier">array</phrase> <phrase role="identifier">arr</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="comment">// select every other column, starting with the second, of a 2-D array.</phrase>
    <phrase role="comment">// Equivalent to &quot;return arr[:, 1::2]&quot; in Python.</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">arr</phrase><phrase role="special">[</phrase><phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase> <phrase role="identifier">slice</phrase><phrase role="special">(),</phrase> <phrase role="identifier">slice</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">,</phrase><phrase role="identifier">_</phrase><phrase role="special">,</phrase><phrase role="number">2</phrase><phrase role="special">))];</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">// Perform a summation over a slice of a std::vector.</phrase>
<phrase role="keyword">double</phrase> <phrase role="identifier">partial_sum</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">double</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">Foo</phrase><phrase role="special">,</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">slice</phrase> <phrase role="identifier">index</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">slice</phrase><phrase role="special">::</phrase><phrase role="identifier">range</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">double</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">const_iterator</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">bounds</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">try</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">bounds</phrase> <phrase role="special">=</phrase> <phrase role="identifier">index</phrase><phrase role="special">.</phrase><phrase role="identifier">get_indices</phrase><phrase role="special">&lt;&gt;(</phrase><phrase role="identifier">Foo</phrase><phrase role="special">.</phrase><phrase role="identifier">begin</phrase><phrase role="special">(),</phrase> <phrase role="identifier">Foo</phrase><phrase role="special">.</phrase><phrase role="identifier">end</phrase><phrase role="special">());</phrase>
    <phrase role="special">}</phrase>
    <phrase role="keyword">catch</phrase> <phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">invalid_argument</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="number">0.0</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>
    <phrase role="keyword">double</phrase> <phrase role="identifier">sum</phrase> <phrase role="special">=</phrase> <phrase role="number">0.0</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">while</phrase> <phrase role="special">(</phrase><phrase role="identifier">bounds</phrase><phrase role="special">.</phrase><phrase role="identifier">start</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">bounds</phrase><phrase role="special">.</phrase><phrase role="identifier">stop</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
        <phrase role="identifier">sum</phrase> <phrase role="special">+=</phrase> <phrase role="special">*</phrase><phrase role="identifier">bounds</phrase><phrase role="special">.</phrase><phrase role="identifier">start</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">advance</phrase><phrase role="special">(</phrase> <phrase role="identifier">bounds</phrase><phrase role="special">.</phrase><phrase role="identifier">start</phrase><phrase role="special">,</phrase> <phrase role="identifier">bounds</phrase><phrase role="special">.</phrase><phrase role="identifier">step</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
    <phrase role="identifier">sum</phrase> <phrase role="special">+=</phrase> <phrase role="special">*</phrase><phrase role="identifier">bounds</phrase><phrase role="special">.</phrase><phrase role="identifier">start</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">sum</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="object_wrappers.boost_python_tuple_hpp">
      <title><link linkend="object_wrappers.boost_python_tuple_hpp">boost/python/tuple.hpp</link></title>
      <section id="object_wrappers.boost_python_tuple_hpp.introduction">
        <title><link linkend="object_wrappers.boost_python_tuple_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          for the Python <ulink url="http://www.python.org/doc/current/tut/node7.html#SECTION007300000000000000000`tuple`">http://www.python.org/doc/current/tut/node7.html#SECTION007300000000000000000`tuple`</ulink>
          type.
        </para>
      </section>
      <section id="object_wrappers.boost_python_tuple_hpp.class_tuple">
        <title><link linkend="object_wrappers.boost_python_tuple_hpp.class_tuple">Class
        <code><phrase role="identifier">tuple</phrase></code></link></title>
        <para>
          Exposes the interface of Python's built-in tuple type. The semantics of
          the constructors and member functions defined below can be fully understood
          by reading the <link linkend="concepts.objectwrapper.typewrapper_concept_requirements">TypeWrapper</link>
          concept definition. Since tuple is publicly derived from <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link>, the public <code><phrase
          role="identifier">object</phrase></code> interface applies to <code><phrase
          role="identifier">tuple</phrase></code> instances as well.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">class</phrase> <phrase role="identifier">tuple</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">object</phrase>
   <phrase role="special">{</phrase>
      <phrase role="comment">// tuple() -&gt; an empty tuple</phrase>
      <phrase role="identifier">tuple</phrase><phrase role="special">();</phrase>

      <phrase role="comment">// tuple(sequence) -&gt; tuple initialized from sequence's items</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sequence</phrase><phrase role="special">)</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="object_wrappers.boost_python_tuple_hpp.function_make_tuple">
        <title><link linkend="object_wrappers.boost_python_tuple_hpp.function_make_tuple">Function
        <code><phrase role="identifier">make_tuple</phrase></code></link></title>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">tuple</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">();</phrase>

  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">tuple</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a0</phrase><phrase role="special">);</phrase>

  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">tuple</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a0</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a1</phrase><phrase role="special">);</phrase>
  <phrase role="special">...</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,...</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">An</phrase><phrase role="special">&gt;</phrase>
  <phrase role="identifier">tuple</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">A0</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a0</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a1</phrase><phrase role="special">,...</phrase><phrase role="identifier">An</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">an</phrase><phrase role="special">);</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effect</term>
            <listitem>
              <para>
                Constructs a new tuple object composed of <code><phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">a0</phrase><phrase
                role="special">),</phrase> <phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">a0</phrase><phrase
                role="special">),...</phrase><phrase role="identifier">object</phrase><phrase
                role="special">(</phrase><phrase role="identifier">an</phrase><phrase
                role="special">)</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="object_wrappers.boost_python_tuple_hpp.example">
        <title><link linkend="object_wrappers.boost_python_tuple_hpp.example">Example</link></title>
<programlisting><phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">tuple</phrase> <phrase role="identifier">head_and_tail</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="identifier">sequence</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">sequence</phrase><phrase role="special">[</phrase><phrase role="number">0</phrase><phrase role="special">],</phrase><phrase role="identifier">sequence</phrase><phrase role="special">[-</phrase><phrase role="number">1</phrase><phrase role="special">]);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
  </chapter>
  <chapter id="function_invocation_and_creation" last-revision="$Date: 2016/08/05 20:23:10 $"
  xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Function Invocation and Creation</title>
    <section id="function_invocation_and_creation.boost_python_args_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_args_hpp">boost/python/args.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_args_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_args_hpp.introduction">Introduction</link></title>
        <para>
          Supplies a family of overloaded functions for specifying argument keywords
          for wrapped C++ functions.
        </para>
        <section id="function_invocation_and_creation.boost_python_args_hpp.introduction.keyword_expressions">
          <title><link linkend="function_invocation_and_creation.boost_python_args_hpp.introduction.keyword_expressions">keyword-expressions</link></title>
          <para>
            A keyword-expression results in an object which holds a sequence of
            <link linkend="ntbs">ntbs</link>es, and whose type encodes the number
            of keywords specified. The keyword-expression may contain default values
            for some or all of the keywords it holds
          </para>
        </section>
      </section>
      <section id="function_invocation_and_creation.boost_python_args_hpp.class_arg">
        <title><link linkend="function_invocation_and_creation.boost_python_args_hpp.class_arg">Class
        <code><phrase role="identifier">arg</phrase></code></link></title>
        <para>
          The objects of class arg are keyword-expressions holding one keyword (
          size one )
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
        <phrase role="keyword">struct</phrase> <phrase role="identifier">arg</phrase>
        <phrase role="special">{</phrase>
          <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
                  <phrase role="identifier">arg</phrase> <phrase role="special">&amp;</phrase><phrase role="keyword">operator</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase>
          <phrase role="keyword">explicit</phrase> <phrase role="identifier">arg</phrase> <phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="identifier">name</phrase><phrase role="special">){</phrase><phrase role="identifier">elements</phrase><phrase role="special">[</phrase><phrase role="number">0</phrase><phrase role="special">].</phrase><phrase role="identifier">name</phrase> <phrase role="special">=</phrase> <phrase role="identifier">name</phrase><phrase role="special">;}</phrase>
        <phrase role="special">};</phrase>

<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="function_invocation_and_creation.boost_python_args_hpp.class_arg_constructor">
        <title><link linkend="function_invocation_and_creation.boost_python_args_hpp.class_arg_constructor">Class
        <code><phrase role="identifier">arg</phrase></code> constructor</link></title>
<programlisting><phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                The argument must be a <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Constructs an arg object holding a keyword with name name.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_args_hpp.class_arg_operator">
        <title><link linkend="function_invocation_and_creation.boost_python_args_hpp.class_arg_operator">Class
        <code><phrase role="identifier">arg</phrase></code> operator=</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">arg</phrase> <phrase role="special">&amp;</phrase><phrase role="keyword">operator</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">value</phrase><phrase role="special">);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                The argument must convertible to python.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Assigns default value for the keyword.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                Reference to <code><phrase role="keyword">this</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_args_hpp.keyword_expression_operator">
        <title><link linkend="function_invocation_and_creation.boost_python_args_hpp.keyword_expression_operator">Keyword-expression
        operator,</link></title>
<programlisting><phrase role="identifier">keyword</phrase><phrase role="special">-</phrase><phrase role="identifier">expression</phrase> <phrase role="keyword">operator</phrase> <phrase role="special">,</phrase> <phrase role="special">(</phrase><phrase role="identifier">keyword</phrase><phrase role="special">-</phrase><phrase role="identifier">expression</phrase><phrase role="special">,</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">arg</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">kw</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase>
<phrase role="identifier">keyword</phrase><phrase role="special">-</phrase><phrase role="identifier">expression</phrase> <phrase role="keyword">operator</phrase> <phrase role="special">,</phrase> <phrase role="special">(</phrase><phrase role="identifier">keyword</phrase><phrase role="special">-</phrase><phrase role="identifier">expression</phrase><phrase role="special">,</phrase> <phrase role="keyword">const</phrase> <phrase role="keyword">char</phrase> <phrase role="special">*</phrase><phrase role="identifier">name</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                The argument name must be a <link linkend="ntbs">ntbs</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Extends the keyword-expression argument with one more keyword.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                The extended keyword-expression.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_args_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_args_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="keyword">double</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">y</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">z</phrase><phrase role="special">=</phrase><phrase role="number">0.0</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">w</phrase><phrase role="special">=</phrase><phrase role="number">1.0</phrase><phrase role="special">);</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">xxx</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="special">(</phrase><phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;y&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;z&quot;</phrase><phrase role="special">)=</phrase><phrase role="number">0.0</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;w&quot;</phrase><phrase role="special">)=</phrase><phrase role="number">1.0</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.boost_python_call_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_call_hpp">boost/python/call.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_call_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_call_hpp.introduction">Introduction</link></title>
<programlisting><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">call</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">defines</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">family</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">overloaded</phrase> <phrase role="identifier">function</phrase> <phrase role="identifier">templates</phrase><phrase role="special">,</phrase> <phrase role="identifier">used</phrase> <phrase role="identifier">to</phrase> <phrase role="identifier">invoke</phrase> <phrase role="identifier">Python</phrase> <phrase role="identifier">callable</phrase> <phrase role="identifier">objects</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">C</phrase><phrase role="special">++.</phrase>
</programlisting>
      </section>
      <section id="function_invocation_and_creation.boost_python_call_hpp.function_call">
        <title><link linkend="function_invocation_and_creation.boost_python_call_hpp.function_call">Function
        <code><phrase role="identifier">call</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">,</phrase> <phrase role="special">...</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">An</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">R</phrase> <phrase role="identifier">call</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">callable</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="special">...</phrase> <phrase role="identifier">An</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                R is a pointer type, reference type, or a complete type with an accessible
                copy constructor
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Invokes callable(a1, a2, ...an) in Python, where a1...an are the
                arguments to call(), converted to Python objects.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                The result of the Python call, converted to the C++ type R.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                For a complete semantic description and rationale, see this page.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_call_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_call_hpp.example">Example</link></title>
        <para>
          The following C++ function applies a Python callable object to its two
          arguments and returns the result. If a Python exception is raised or the
          result can't be converted to a double, an exception is thrown.
        </para>
<programlisting><phrase role="keyword">double</phrase> <phrase role="identifier">apply2</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">func</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">y</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">double</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">func</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">y</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.boost_python_call_method_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_call_method_hpp">boost/python/call_method.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_call_method_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_call_method_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/call_method.hpp&gt; defines the call_method family of
          overloaded function templates, used to invoke callable attributes of Python
          objects from C++.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_call_method_hpp.function_call_method">
        <title><link linkend="function_invocation_and_creation.boost_python_call_method_hpp.function_call_method">Function
        <code><phrase role="identifier">call_method</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">A2</phrase><phrase role="special">,</phrase> <phrase role="special">...</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">An</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">R</phrase> <phrase role="identifier">call_method</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">method</phrase><phrase role="special">,</phrase> <phrase role="identifier">A1</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="identifier">A2</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;,</phrase> <phrase role="special">...</phrase> <phrase role="identifier">An</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;)</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                <code><phrase role="identifier">R</phrase></code> is a pointer type,
                reference type, or a complete type with an accessible copy constructor
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Invokes <code><phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase
                role="identifier">method</phrase><phrase role="special">(</phrase><phrase
                role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase
                role="identifier">a2</phrase><phrase role="special">,</phrase> <phrase
                role="special">...</phrase><phrase role="identifier">an</phrase><phrase
                role="special">)</phrase></code> in Python, where <code><phrase role="identifier">a1</phrase><phrase
                role="special">...</phrase><phrase role="identifier">an</phrase></code>
                are the arguments to <code><phrase role="identifier">call_method</phrase><phrase
                role="special">()</phrase></code>, converted to Python objects. For
                a complete semantic description, see this page.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                The result of the Python call, converted to the C++ type <code><phrase
                role="identifier">R</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                <code><phrase role="identifier">call_method</phrase></code> is critical
                to implementing C++ virtual functions which are overridable in Python,
                as shown by the example below.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_call_method_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_call_method_hpp.example">Example</link></title>
        <para>
          The following C++ illustrates the use of <code><phrase role="identifier">call_method</phrase></code>
          in wrapping a class with a virtual function that can be overridden in Python:
          C++ Module Definition
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">utility</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cstring</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// class to be wrapped</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase>
<phrase role="special">{</phrase>
 <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
   <phrase role="keyword">virtual</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">class_name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="string">&quot;Base&quot;</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">Base</phrase><phrase role="special">();</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">bool</phrase> <phrase role="identifier">is_base</phrase><phrase role="special">(</phrase><phrase role="identifier">Base</phrase><phrase role="special">*</phrase> <phrase role="identifier">b</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">return</phrase> <phrase role="special">!</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">strcmp</phrase><phrase role="special">(</phrase><phrase role="identifier">b</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">class_name</phrase><phrase role="special">(),</phrase> <phrase role="string">&quot;Base&quot;</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">// Wrapper code begins here</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="comment">// Callback class</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">Base_callback</phrase> <phrase role="special">:</phrase> <phrase role="keyword">public</phrase> <phrase role="identifier">Base</phrase>
<phrase role="special">{</phrase>
 <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Base_callback</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">m_self</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>

   <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">class_name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">call_method</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">m_self</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;class_name&quot;</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>
   <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">Base_name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">Base</phrase><phrase role="special">::</phrase><phrase role="identifier">class_name</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">m_self</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">my_module</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;is_base&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">is_base</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Base</phrase><phrase role="special">,</phrase><phrase role="identifier">Base_callback</phrase><phrase role="special">,</phrase> <phrase role="identifier">noncopyable</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Base&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;class_name&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Base_callback</phrase><phrase role="special">::</phrase><phrase role="identifier">Base_name</phrase><phrase role="special">)</phrase>
        <phrase role="special">;</phrase>

<phrase role="special">}</phrase>
</programlisting>
        <para>
          Python code:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">my_module</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Derived</phrase><phrase role="special">(</phrase><phrase role="identifier">Base</phrase><phrase role="special">):</phrase>
<phrase role="special">...</phrase>    <phrase role="identifier">def</phrase> <phrase role="identifier">__init__</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">):</phrase>
<phrase role="special">...</phrase>       <phrase role="identifier">Base</phrase><phrase role="special">.</phrase><phrase role="identifier">__init__</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">)</phrase>
<phrase role="special">...</phrase>    <phrase role="identifier">def</phrase> <phrase role="identifier">class_name</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">):</phrase>
<phrase role="special">...</phrase>       <phrase role="keyword">return</phrase> <phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">__class__</phrase><phrase role="special">.</phrase><phrase role="identifier">__name__</phrase>
<phrase role="special">...</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">is_base</phrase><phrase role="special">(</phrase><phrase role="identifier">Base</phrase><phrase role="special">())</phrase> <phrase role="special">#</phrase> <phrase role="identifier">calls</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">class_name</phrase><phrase role="special">()</phrase> <phrase role="identifier">method</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">C</phrase><phrase role="special">++</phrase>
<phrase role="number">1</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">is_base</phrase><phrase role="special">(</phrase><phrase role="identifier">Derived</phrase><phrase role="special">())</phrase>
<phrase role="number">0</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.boost_python_data_members_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_data_members_hpp">boost/python/data_members.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_data_members_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_data_members_hpp.introduction">Introduction</link></title>
        <para>
          <code><phrase role="identifier">make_getter</phrase><phrase role="special">()</phrase></code>
          and <code><phrase role="identifier">make_setter</phrase><phrase role="special">()</phrase></code>
          are the functions used internally by <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu"><code><phrase
          role="identifier">class_</phrase><phrase role="special">&lt;&gt;::</phrase><phrase
          role="identifier">def_readonly</phrase></code></link> and <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel.class_template_class_modifier_fu"><code><phrase
          role="identifier">class_</phrase><phrase role="special">&lt;&gt;::</phrase><phrase
          role="identifier">def_readwrite</phrase></code></link> to produce Python
          callable objects which wrap C++ data members.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_data_members_hpp.functions">
        <title><link linkend="function_invocation_and_creation.boost_python_data_members_hpp.functions">Functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">C</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="identifier">C</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">C</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="identifier">C</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                Policies is a model of <link linkend="concepts.callpolicies"><code><phrase
                role="identifier">CallPolicies</phrase></code></link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Creates a Python callable object which accepts a single argument
                that can be converted from_python to C*, and returns the corresponding
                member D member of the C object, converted to_python. If policies
                is supplied, it will be applied to the function as described here.
                Otherwise, the library attempts to determine whether D is a user-defined
                class type, and if so uses return_internal_reference&lt;&gt; for
                Policies. Note that this test may inappropriately choose return_internal_reference&lt;&gt;
                in some cases when D is a smart pointer type. This is a known defect.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the new Python callable object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                Policies is a model of CallPolicies.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Creates a Python callable object which accepts no arguments and returns
                d or *p, converted to_python on demand. If policies is supplied,
                it will be applied to the function as described here. Otherwise,
                the library attempts to determine whether D is a user-defined class
                type, and if so uses reference_existing_object for Policies.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the new Python callable object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">C</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="identifier">C</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">C</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase> <phrase role="identifier">C</phrase><phrase role="special">::*</phrase><phrase role="identifier">pm</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                Policies is a model of CallPolicies.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Creates a Python callable object which, when called from Python,
                expects two arguments which can be converted from_python to C* and
                D const&amp;, respectively, and sets the corresponding D member of
                the C object. If policies is supplied, it will be applied to the
                function as described here.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the new Python callable object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">d</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">D</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(</phrase><phrase role="identifier">D</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                Policies is a model of CallPolicies.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Creates a Python callable object which accepts one argument, which
                is converted from Python to D const&amp; and written into d or *p,
                respectively. If policies is supplied, it will be applied to the
                function as described here.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the new Python callable object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_data_members_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_data_members_hpp.example">Example</link></title>
        <para>
          The code below uses make_getter and make_setter to expose a data member
          as functions:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">data_members</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">y</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">y</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE_INIT</phrase><phrase role="special">(</phrase><phrase role="identifier">data_members_example</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_getter</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">y</phrase><phrase role="special">))</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;set&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_setter</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">y</phrase><phrase role="special">))</phrase>
       <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          It can be used this way in Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">data_members_example</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase>
<phrase role="number">1</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="number">2</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase>
<phrase role="number">2</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.boost_python_make_function_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_make_function_hpp">boost/python/make_function.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_make_function_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_make_function_hpp.introduction">Introduction</link></title>
        <para>
          make_function() and make_constructor() are the functions used internally
          by def() and class_&lt;&gt;::def() to produce Python callable objects which
          wrap C++ functions and member functions.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_make_function_hpp.functions">
        <title><link linkend="function_invocation_and_creation.boost_python_make_function_hpp.functions">Functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_function</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">)</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_function</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">)</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">KeywordsOrSignature</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_function</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">,</phrase> <phrase role="identifier">KeywordsOrSignature</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">ks</phrase><phrase role="special">)</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Keywords</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Signature</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_function</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">,</phrase> <phrase role="identifier">Keywords</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">kw</phrase><phrase role="special">,</phrase> <phrase role="identifier">Signature</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sig</phrase><phrase role="special">)</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                F is a function pointer or member function pointer type. If policies
                are supplied, it must be a model of CallPolicies. If kewords are
                supplied, it must be the result of a keyword-expression specifying
                no more arguments than the arity of f.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Creates a Python callable object which, when called from Python,
                converts its arguments to C++ and calls f. If F is a pointer-to-member-function
                type, the target object of the function call (*this) will be taken
                from the first Python argument, and subsequent Python arguments will
                be used as the arguments to f.
              </para>
              <para>
                * If policies are supplied, it will be applied to the function as
                described here. * If keywords are supplied, the keywords will be
                applied in order to the final arguments of the resulting function.
                * If Signature is supplied, it should be an instance of an MPL front-extensible
                sequence representing the function's return type followed by its
                argument types. Pass a Signature when wrapping function object types
                whose signatures can't be deduced, or when you wish to override the
                types which will be passed to the wrapped function.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the new Python callable object.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Caveats</term>
            <listitem>
              <para>
                An argument of pointer type may be 0 if None is passed from Python.
                An argument type which is a constant reference may refer to a temporary
                which was created from the Python object for just the duration of
                the call to the wrapped function, for example a std::vector conjured
                up by the conversion process from a Python list. Use a non-const
                reference argument when a persistent lvalue is required.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_constructor</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">)</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_constructor</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">)</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">KeywordsOrSignature</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_constructor</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">,</phrase> <phrase role="identifier">KeywordsOrSignature</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">ks</phrase><phrase role="special">)</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Policies</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Keywords</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Signature</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">make_constructor</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">Policies</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">policies</phrase><phrase role="special">,</phrase> <phrase role="identifier">Keywords</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">kw</phrase><phrase role="special">,</phrase> <phrase role="identifier">Signature</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">sig</phrase><phrase role="special">)</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                F is a function pointer type. If policies are supplied, it must be
                a model of CallPolicies. If kewords are supplied, it must be the
                result of a keyword-expression specifying no more arguments than
                the arity of f.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Creates a Python callable object which, when called from Python,
                converts its arguments to C++ and calls f.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the new Python callable object.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_make_function_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_make_function_hpp.example">Example</link></title>
        <para>
          C++ function exposed below returns a callable object wrapping one of two
          functions.
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">make_function</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">foo</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="string">&quot;foo&quot;</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">bar</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="string">&quot;bar&quot;</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">choose_function</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">selector</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">selector</phrase><phrase role="special">)</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">make_function</phrase><phrase role="special">(</phrase><phrase role="identifier">foo</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">else</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">make_function</phrase><phrase role="special">(</phrase><phrase role="identifier">bar</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">make_function_test</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;choose_function&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">choose_function</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          It can be used this way in Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">make_function_test</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase> <phrase role="special">=</phrase> <phrase role="identifier">choose_function</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">g</phrase> <phrase role="special">=</phrase> <phrase role="identifier">choose_function</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase>
<phrase role="char">'foo'</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">g</phrase><phrase role="special">()</phrase>
<phrase role="char">'bar'</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.boost_python_overloads_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_overloads_hpp">boost/python/overloads.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_overloads_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction">Introduction</link></title>
        <para>
          Defines facilities for generating families of overloaded Python functions
          and extension class methods from C++ functions and member functions with
          default arguments, or from similar families of C++ overloads
        </para>
        <section id="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">
          <title><link linkend="function_invocation_and_creation.boost_python_overloads_hpp.introduction.overload_dispatch_expressions">overload-dispatch-expressions</link></title>
          <para>
            An overload-dispatch-expression is used to describe a family of overloaded
            methods to be generated for an extension class. It has the following
            properties:
          </para>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>docstring</term>
              <listitem>
                <para>
                  An <link linkend="ntbs">ntbs</link> whose value will bound to the
                  methods' <code><phrase role="identifier">__doc__</phrase></code>
                  attribute
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>keywords</term>
              <listitem>
                <para>
                  A <link linkend="function_invocation_and_creation.boost_python_args_hpp.introduction.keyword_expressions">keyword-expression</link>
                  which will be used to name (a trailing subsequence of) the arguments
                  to the generated methods.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>call policies</term>
              <listitem>
                <para>
                  An instance of some type which models CallPolicies.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>minimum arity</term>
              <listitem>
                <para>
                  The minimum number of arguments to be accepted by a generated method
                  overload.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>maximum arity</term>
              <listitem>
                <para>
                  The maximum number of arguments to be accepted by a generated method
                  overload.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="function_invocation_and_creation.boost_python_overloads_hpp.overloaddispatcher_concept">
        <title><link linkend="function_invocation_and_creation.boost_python_overloads_hpp.overloaddispatcher_concept">OverloadDispatcher
        Concept</link></title>
        <para>
          An OverloadDispatcher X is a class which has a minimum arity and a maximum
          arity, and for which the following following are valid overload-dispatch-expressions,
          with the same minimum and maximum arity as the OverloadDispatcher.
        </para>
<programlisting><phrase role="identifier">X</phrase><phrase role="special">()</phrase>
<phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">docstring</phrase><phrase role="special">)</phrase>
<phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">docstring</phrase><phrase role="special">,</phrase> <phrase role="identifier">keywords</phrase><phrase role="special">)</phrase>
<phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">keywords</phrase><phrase role="special">,</phrase> <phrase role="identifier">docstring</phrase><phrase role="special">)</phrase>
<phrase role="identifier">X</phrase><phrase role="special">()[</phrase><phrase role="identifier">policies</phrase><phrase role="special">]</phrase>
<phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">docstring</phrase><phrase role="special">)[</phrase><phrase role="identifier">policies</phrase><phrase role="special">]</phrase>
<phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">docstring</phrase><phrase role="special">,</phrase> <phrase role="identifier">keywords</phrase><phrase role="special">)[</phrase><phrase role="identifier">policies</phrase><phrase role="special">]</phrase>
<phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">keywords</phrase><phrase role="special">,</phrase> <phrase role="identifier">docstring</phrase><phrase role="special">)[</phrase><phrase role="identifier">policies</phrase><phrase role="special">]</phrase>
</programlisting>
        <para>
          * If policies are supplied, it must be an instance of a type which models
          <link linkend="concepts.callpolicies">CallPolicies</link>, and will be
          used as the result's call policies. Otherwise the result's call policies
          will be an instance of <link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici"><code><phrase
          role="identifier">default_call_policies</phrase></code></link>. * If docstring
          is supplied it must be an <link linkend="ntbs">ntbs</link>, and will be
          used as the result's docstring. Otherwise the result has an empty docstring.
          * If keywords is supplied it must be the result of a <link linkend="function_invocation_and_creation.boost_python_args_hpp.introduction.keyword_expressions">keyword-expression</link>
          whose length is no greater than X's maximum arity, and will be used as
          the result's keywords. Otherwise the result's keywords will be empty.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_overloads_hpp.macros">
        <title><link linkend="function_invocation_and_creation.boost_python_overloads_hpp.macros">Macros</link></title>
<programlisting><phrase role="identifier">BOOST_PYTHON_FUNCTION_OVERLOADS</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">func_id</phrase><phrase role="special">,</phrase> <phrase role="identifier">min_args</phrase><phrase role="special">,</phrase> <phrase role="identifier">max_args</phrase><phrase role="special">)</phrase>
</programlisting>
        <para>
          Expands to the definition of an OverloadDispatcher called name in the current
          scope which can be used to generate the following function invocation:
        </para>
<programlisting><phrase role="identifier">func_id</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">a2</phrase><phrase role="special">,...</phrase><phrase role="identifier">ai</phrase><phrase role="special">);</phrase></programlisting>
        <para>
          for all <code><phrase role="identifier">min_args</phrase> <phrase role="special">&lt;=</phrase>
          <phrase role="identifier">i</phrase> <phrase role="special">&lt;=</phrase>
          <phrase role="identifier">max_args</phrase></code>.
        </para>
<programlisting><phrase role="identifier">BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">member_name</phrase><phrase role="special">,</phrase> <phrase role="identifier">min_args</phrase><phrase role="special">,</phrase> <phrase role="identifier">max_args</phrase><phrase role="special">)</phrase>
</programlisting>
        <para>
          Expands to the definition of an OverloadDispatcher called name in the current
          scope which can be used to generate the following function invocation:
        </para>
<programlisting><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">member_name</phrase><phrase role="special">(</phrase><phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">a2</phrase><phrase role="special">,...</phrase><phrase role="identifier">ai</phrase><phrase role="special">);</phrase></programlisting>
        <para>
          for all min_args &lt;= i &lt;= max_args, where x is a reference to an object
          of class type.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_overloads_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_overloads_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">args</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">tuple</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">overloads</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_internal_reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="identifier">tuple</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">y</phrase> <phrase role="special">=</phrase> <phrase role="number">4.25</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">z</phrase> <phrase role="special">=</phrase> <phrase role="string">&quot;wow&quot;</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">y</phrase><phrase role="special">,</phrase> <phrase role="identifier">z</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_FUNCTION_OVERLOADS</phrase><phrase role="special">(</phrase><phrase role="identifier">f_overloads</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="number">3</phrase><phrase role="special">)</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">Y</phrase> <phrase role="special">{};</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">Y</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">y</phrase> <phrase role="special">=</phrase> <phrase role="number">4.25</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">z</phrase> <phrase role="special">=</phrase> <phrase role="string">&quot;wow&quot;</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">inner</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>
    <phrase role="identifier">Y</phrase> <phrase role="identifier">inner</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS</phrase><phrase role="special">(</phrase><phrase role="identifier">f_member_overloads</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="number">3</phrase><phrase role="special">)</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">args_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">f_overloads</phrase><phrase role="special">(</phrase>
            <phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;y&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;z&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;This is f's docstring&quot;</phrase>
        <phrase role="special">));</phrase>


    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Y&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">;</phrase>

    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;This is X's docstring&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f1&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">,</phrase>
                <phrase role="identifier">f_member_overloads</phrase><phrase role="special">(</phrase>
                    <phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;y&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;z&quot;</phrase><phrase role="special">),</phrase> <phrase role="string">&quot;f's docstring&quot;</phrase>
                <phrase role="special">)[</phrase><phrase role="identifier">return_internal_reference</phrase><phrase role="special">&lt;&gt;()]</phrase>
        <phrase role="special">)</phrase>
        <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.boost_python_ptr_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp">boost/python/ptr.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/ptr.hpp&gt; defines the ptr() function template, which
          allows users to specify how to convert C++ pointer values to python in
          the context of implementing overridable virtual functions, invoking Python
          callable objects, or explicitly converting C++ objects to Python. Normally,
          when passing pointers to Python callbacks, the pointee is copied to ensure
          that the Python object never holds a dangling reference. To specify that
          the new Python object should merely contain a copy of a pointer p, the
          user can pass ptr(p) instead of passing p directly. This interface is meant
          to mirror the use of boost::ref(), which can be similarly used to prevent
          copying of referents.
        </para>
        <para>
          ptr(p) returns an instance of <link linkend="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper"><code><phrase
          role="identifier">pointer_wrapper</phrase><phrase role="special">&lt;&gt;</phrase></code></link>,
          which can be detected using the <link linkend="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions.class_template_is_pointer_wrappe"><code><phrase
          role="identifier">is_pointer_wrapper</phrase><phrase role="special">&lt;&gt;</phrase></code></link>
          metafunction; <link linkend="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions.class_template_unwrap_pointer"><code><phrase
          role="identifier">unwrap_pointer</phrase><phrase role="special">&lt;&gt;</phrase></code></link>
          is a metafunction which extracts the original pointer type from a <code><phrase
          role="identifier">pointer_wrapper</phrase><phrase role="special">&lt;&gt;</phrase></code>.
          These classes can be thought of as implementation details.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.functions">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.functions">Functions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">pointer_wrapper</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">ptr</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                T is a pointer type.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                pointer_wrapper&lt;T&gt;(x)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                nothing.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper">Class
        template <code><phrase role="identifier">pointer_wrapper</phrase></code></link></title>
        <para>
          A &quot;type envelope&quot; which is returned by <code><phrase role="identifier">ptr</phrase><phrase
          role="special">()</phrase></code>, used to indicate reference semantics
          for pointers passed to Python callbacks.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Ptr</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">pointer_wrapper</phrase>
    <phrase role="special">{</phrase>
     <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
        <phrase role="keyword">typedef</phrase> <phrase role="identifier">Ptr</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>

        <phrase role="keyword">explicit</phrase> <phrase role="identifier">pointer_wrapper</phrase><phrase role="special">(</phrase><phrase role="identifier">Ptr</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">operator</phrase> <phrase role="identifier">Ptr</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
        <phrase role="identifier">Ptr</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper_t">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper_t">Class
        template <code><phrase role="identifier">pointer_wrapper</phrase></code>
        types</link></title>
<programlisting><phrase role="keyword">typedef</phrase> <phrase role="identifier">Ptr</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
</programlisting>
        <para>
          The type of the pointer being wrapped.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper_c">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper_c">Class
        template <code><phrase role="identifier">pointer_wrapper</phrase></code>
        constructors and destructor</link></title>
<programlisting><phrase role="keyword">explicit</phrase> <phrase role="identifier">pointer_wrapper</phrase><phrase role="special">(</phrase><phrase role="identifier">Ptr</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                <code><phrase role="identifier">Ptr</phrase></code> is a pointer
                type
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Stores <code><phrase role="identifier">x</phrase></code> in a the
                <code><phrase role="identifier">pointer_wrapper</phrase><phrase role="special">&lt;&gt;</phrase></code>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                nothing.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper_o">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.class_template_pointer_wrapper_o">Class
        template <code><phrase role="identifier">pointer_wrapper</phrase></code>
        observer functions</link></title>
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">Ptr</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="identifier">Ptr</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a copy of the stored pointer.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                pointer_wrapper is intended to be a stand-in for the actual pointer
                type, but sometimes it's better to have an explicit way to retrieve
                the pointer.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions">Metafunctions</link></title>
        <section id="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions.class_template_is_pointer_wrappe">
          <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions.class_template_is_pointer_wrappe">Class
          template <code><phrase role="identifier">is_pointer_wrapper</phrase></code></link></title>
          <para>
            A unary metafunction whose value is true iff its argument is a pointer_wrapper&lt;&gt;.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">is_pointer_wrapper</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">static</phrase> <phrase role="identifier">unspecified</phrase> <phrase role="identifier">value</phrase> <phrase role="special">=</phrase> <phrase role="special">...;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">true</phrase></code> iff <code><phrase
                  role="identifier">T</phrase></code> is a specialization of <code><phrase
                  role="identifier">pointer_wrapper</phrase><phrase role="special">&lt;&gt;</phrase></code>.
                  value is an integral constant convertible to bool of unspecified
                  type
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions.class_template_unwrap_pointer">
          <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.metafunctions.class_template_unwrap_pointer">Class
          template <code><phrase role="identifier">unwrap_pointer</phrase></code></link></title>
          <para>
            A unary metafunction which extracts the wrapped pointer type from a specialization
            of pointer_wrapper&lt;&gt;.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">unwrap_pointer</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">typedef</phrase> <phrase role="identifier">unspecified</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">T</phrase><phrase role="special">::</phrase><phrase
                  role="identifier">type</phrase></code> if <code><phrase role="identifier">T</phrase></code>
                  is a specialization of <code><phrase role="identifier">pointer_wrapper</phrase><phrase
                  role="special">&lt;&gt;</phrase></code>, <code><phrase role="identifier">T</phrase></code>
                  otherwise
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="function_invocation_and_creation.boost_python_ptr_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_ptr_hpp.example">Example</link></title>
        <para>
          This example illustrates the use of ptr() to prevent an object from being
          copied:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">call</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">ptr</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">expensive_to_copy</phrase>
<phrase role="special">{</phrase>
   <phrase role="special">...</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">pass_as_arg</phrase><phrase role="special">(</phrase><phrase role="identifier">expensive_to_copy</phrase><phrase role="special">*</phrase> <phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">f</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="comment">// call the Python function f, passing a Python object built around</phrase>
   <phrase role="comment">// which refers to *x by-pointer.</phrase>
   <phrase role="comment">//</phrase>
   <phrase role="comment">// *** Note: ensuring that *x outlives the argument to f() is    ***</phrase>
   <phrase role="comment">// *** up to the user! Failure to do so could result in a crash! ***</phrase>

   <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">void</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">ptr</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>
<phrase role="special">...</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.boost_python_raw_function_hpp">
      <title><link linkend="function_invocation_and_creation.boost_python_raw_function_hpp">boost/python/raw_function.hpp</link></title>
      <section id="function_invocation_and_creation.boost_python_raw_function_hpp.introduction">
        <title><link linkend="function_invocation_and_creation.boost_python_raw_function_hpp.introduction">Introduction</link></title>
        <para>
          <code><phrase role="identifier">raw_function</phrase><phrase role="special">(...)</phrase></code>
          is used to convert a function taking a <link linkend="object_wrappers.boost_python_tuple_hpp.class_tuple"><code><phrase
          role="identifier">tuple</phrase></code></link> and a <link linkend="object_wrappers.boost_python_dict_hpp.class_dict"><code><phrase
          role="identifier">dict</phrase></code></link> into a Python callable object
          which accepts a variable number of arguments and arbitrary keyword arguments.
        </para>
      </section>
      <section id="function_invocation_and_creation.boost_python_raw_function_hpp.function_raw_function">
        <title><link linkend="function_invocation_and_creation.boost_python_raw_function_hpp.function_raw_function">Function
        <code><phrase role="identifier">raw_function</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">F</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">object</phrase> <phrase role="identifier">raw_function</phrase><phrase role="special">(</phrase><phrase role="identifier">F</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">min_args</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                f(tuple(), dict()) is well-formed.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                a callable object which requires at least min_args arguments. When
                called, the actual non-keyword arguments will be passed in a tuple
                as the first argument to f, and the keyword arguments will be passed
                in a dict as the second argument to f.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="function_invocation_and_creation.boost_python_raw_function_hpp.example">
        <title><link linkend="function_invocation_and_creation.boost_python_raw_function_hpp.example">Example</link></title>
        <para>
          C++:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">tuple</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">dict</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">raw_function</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="identifier">tuple</phrase> <phrase role="identifier">raw</phrase><phrase role="special">(</phrase><phrase role="identifier">tuple</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">dict</phrase> <phrase role="identifier">kw</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">kw</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">raw_test</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;raw&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">raw_function</phrase><phrase role="special">(</phrase><phrase role="identifier">raw</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">raw_test</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>

<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">raw</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">,</phrase> <phrase role="number">4</phrase><phrase role="special">,</phrase> <phrase role="identifier">foo</phrase> <phrase role="special">=</phrase> <phrase role="char">'bar'</phrase><phrase role="special">,</phrase> <phrase role="identifier">baz</phrase> <phrase role="special">=</phrase> <phrase role="number">42</phrase><phrase role="special">)</phrase>
<phrase role="special">((</phrase><phrase role="number">3</phrase><phrase role="special">,</phrase> <phrase role="number">4</phrase><phrase role="special">),</phrase> <phrase role="special">{</phrase><phrase role="char">'foo'</phrase><phrase role="special">:</phrase> <phrase role="char">'bar'</phrase><phrase role="special">,</phrase> <phrase role="char">'baz'</phrase><phrase role="special">:</phrase> <phrase role="number">42</phrase><phrase role="special">})</phrase>
</programlisting>
      </section>
    </section>
    <section id="function_invocation_and_creation.function_documentation">
      <title><link linkend="function_invocation_and_creation.function_documentation">Function
      documentation</link></title>
      <section id="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat">
        <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat">boost/python/function_doc_signature.hpp</link></title>
        <section id="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat.introduction">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat.introduction">Introduction</link></title>
          <para>
            Boost.Python supports docstrings with automatic appending of Pythonic
            and C++ signatures. This feature is implemented by class <code><phrase
            role="identifier">function_doc_signature_generator</phrase></code>. The
            class uses all of the overloads, supplied arg names and default values,
            as well as the user-defined docstrings, to generate documentation for
            a given function.
          </para>
        </section>
        <section id="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat.class_function_doc_signature_gen">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat.class_function_doc_signature_gen">Class
          <code><phrase role="identifier">function_doc_signature_generator</phrase></code></link></title>
          <para>
            The class has only one public function which returns a list of strings
            documenting the overloads of a function.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">objects</phrase> <phrase role="special">{</phrase>

    <phrase role="keyword">class</phrase> <phrase role="identifier">function_doc_signature_generator</phrase>
    <phrase role="special">{</phrase>
      <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
          <phrase role="keyword">static</phrase> <phrase role="identifier">list</phrase> <phrase role="identifier">function_doc_signatures</phrase><phrase role="special">(</phrase><phrase role="identifier">function</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="identifier">f</phrase><phrase role="special">);</phrase>
    <phrase role="special">};</phrase>

<phrase role="special">}}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat.example">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_function_doc_signat.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">args</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">tuple</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">overloads</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">raw_function</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="identifier">tuple</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">y</phrase> <phrase role="special">=</phrase> <phrase role="number">4.25</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">z</phrase> <phrase role="special">=</phrase> <phrase role="string">&quot;wow&quot;</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">y</phrase><phrase role="special">,</phrase> <phrase role="identifier">z</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_FUNCTION_OVERLOADS</phrase><phrase role="special">(</phrase><phrase role="identifier">f_overloads</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="number">3</phrase><phrase role="special">)</phrase>


<phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">tuple</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="keyword">double</phrase> <phrase role="identifier">y</phrase> <phrase role="special">=</phrase> <phrase role="number">4.25</phrase><phrase role="special">,</phrase> <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">z</phrase> <phrase role="special">=</phrase> <phrase role="string">&quot;wow&quot;</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">,</phrase> <phrase role="identifier">y</phrase><phrase role="special">,</phrase> <phrase role="identifier">z</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS</phrase><phrase role="special">(</phrase><phrase role="identifier">X_f_overloads</phrase><phrase role="special">,</phrase> <phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="number">3</phrase><phrase role="special">)</phrase>

<phrase role="identifier">tuple</phrase> <phrase role="identifier">raw_func</phrase><phrase role="special">(</phrase><phrase role="identifier">tuple</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">dict</phrase> <phrase role="identifier">kw</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">kw</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">args_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="special">(</phrase><phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">)=</phrase><phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;y&quot;</phrase><phrase role="special">)=</phrase><phrase role="number">4.25</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg</phrase><phrase role="special">(</phrase><phrase role="string">&quot;z&quot;</phrase><phrase role="special">)=</phrase><phrase role="string">&quot;wow&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">,</phrase> <phrase role="string">&quot;This is f's docstring&quot;</phrase>
        <phrase role="special">);</phrase>

    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;raw&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">raw_function</phrase><phrase role="special">(</phrase><phrase role="identifier">raw_func</phrase><phrase role="special">));</phrase>

    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f1&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">f_overloads</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f1's docstring&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;y&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;z&quot;</phrase><phrase role="special">)));</phrase>


    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;This is X's docstring&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;&gt;(</phrase><phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;self&quot;</phrase><phrase role="special">)))</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase>
             <phrase role="special">,</phrase> <phrase role="string">&quot;This is X.f's docstring&quot;</phrase>
             <phrase role="special">,</phrase> <phrase role="identifier">args</phrase><phrase role="special">(</phrase><phrase role="string">&quot;self&quot;</phrase><phrase role="special">,</phrase><phrase role="string">&quot;x&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;y&quot;</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;z&quot;</phrase><phrase role="special">))</phrase>

        <phrase role="special">;</phrase>

<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="keyword">import</phrase> <phrase role="identifier">args_ext</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">help</phrase><phrase role="special">(</phrase><phrase role="identifier">args_ext</phrase><phrase role="special">)</phrase>
<phrase role="identifier">Help</phrase> <phrase role="identifier">on</phrase> <phrase role="identifier">module</phrase> <phrase role="identifier">args_ext</phrase><phrase role="special">:</phrase>

<phrase role="identifier">NAME</phrase>
    <phrase role="identifier">args_ext</phrase>

<phrase role="identifier">FILE</phrase>
    <phrase role="identifier">args_ext</phrase><phrase role="special">.</phrase><phrase role="identifier">pyd</phrase>

<phrase role="identifier">CLASSES</phrase>
    <phrase role="identifier">Boost</phrase><phrase role="special">.</phrase><phrase role="identifier">Python</phrase><phrase role="special">.</phrase><phrase role="identifier">instance</phrase><phrase role="special">(</phrase><phrase role="identifier">__builtin__</phrase><phrase role="special">.</phrase><phrase role="identifier">object</phrase><phrase role="special">)</phrase>
        <phrase role="identifier">X</phrase>

    <phrase role="keyword">class</phrase> <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">Boost</phrase><phrase role="special">.</phrase><phrase role="identifier">Python</phrase><phrase role="special">.</phrase><phrase role="identifier">instance</phrase><phrase role="special">)</phrase>
     <phrase role="special">|</phrase>  <phrase role="identifier">This</phrase> <phrase role="keyword">is</phrase> <phrase role="identifier">X</phrase><phrase role="string">'s docstring
     |
     |  Method resolution order:
     |      X
     |      Boost.Python.instance
     |      __builtin__.object
     |
     |  Methods defined here:
     |
     |  __init__(...)
     |      __init__( (object)self) -&gt; None :
     |       C++ signature:
     |           void __init__(struct _object *)
     |
     |  f(...)
     |      f( (X)self, (int)x, (float)y, (str)z) -&gt; tuple : This is X.f'</phrase><phrase role="identifier">s</phrase> <phrase role="identifier">docstring</phrase>
     <phrase role="special">|</phrase>      <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
     <phrase role="special">|</phrase>          <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase> <phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="identifier">struct</phrase> <phrase role="identifier">X</phrase> <phrase role="special">{</phrase><phrase role="identifier">lvalue</phrase><phrase role="special">},</phrase><phrase role="identifier">int</phrase><phrase role="special">,</phrase><phrase role="identifier">double</phrase><phrase role="special">,</phrase><phrase role="identifier">char</phrase> <phrase role="identifier">const</phrase> <phrase role="special">*)</phrase>
     <phrase role="special">|</phrase>
     <phrase role="special">|</phrase>    <phrase role="special">.................</phrase>
     <phrase role="special">|</phrase>
<phrase role="identifier">FUNCTIONS</phrase>
    <phrase role="identifier">f</phrase><phrase role="special">(...)</phrase>
        <phrase role="identifier">f</phrase><phrase role="special">([</phrase> <phrase role="special">(</phrase><phrase role="identifier">int</phrase><phrase role="special">)</phrase><phrase role="identifier">x</phrase><phrase role="special">=</phrase><phrase role="number">1</phrase> <phrase role="special">[,</phrase> <phrase role="special">(</phrase><phrase role="identifier">float</phrase><phrase role="special">)</phrase><phrase role="identifier">y</phrase><phrase role="special">=</phrase><phrase role="number">4.25</phrase> <phrase role="special">[,</phrase> <phrase role="special">(</phrase><phrase role="identifier">str</phrase><phrase role="special">)</phrase><phrase role="identifier">z</phrase><phrase role="special">=</phrase><phrase role="string">'wow'</phrase><phrase role="special">]]])</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">tuple</phrase> <phrase role="special">:</phrase> <phrase role="identifier">This</phrase> <phrase role="keyword">is</phrase> <phrase role="identifier">f</phrase><phrase role="string">'s docstring
        C++ signature:
            class boost::python::tuple f([ int=1 [,double=4.25 [,char const *='</phrase><phrase role="identifier">wow</phrase><phrase role="string">']]])

    f1(...)
        f1([ (int)x [, (float)y [, (str)z]]]) -&gt; tuple : f1'</phrase><phrase role="identifier">s</phrase> <phrase role="identifier">docstring</phrase>
        <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
            <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase> <phrase role="identifier">f1</phrase><phrase role="special">([</phrase> <phrase role="identifier">int</phrase> <phrase role="special">[,</phrase><phrase role="identifier">double</phrase> <phrase role="special">[,</phrase><phrase role="identifier">char</phrase> <phrase role="identifier">const</phrase> <phrase role="special">*]]])</phrase>

    <phrase role="identifier">raw</phrase><phrase role="special">(...)</phrase>
        <phrase role="identifier">object</phrase> <phrase role="identifier">raw</phrase><phrase role="special">(</phrase><phrase role="identifier">tuple</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">dict</phrase> <phrase role="identifier">kwds</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase>
        <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
            <phrase role="identifier">object</phrase> <phrase role="identifier">raw</phrase><phrase role="special">(</phrase><phrase role="identifier">tuple</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">dict</phrase> <phrase role="identifier">kwds</phrase><phrase role="special">)</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp">
        <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp">boost/python/pytype_function.hpp</link></title>
        <section id="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.introduction">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.introduction">Introduction</link></title>
          <para>
            To support Pythonic signatures the converters should supply a <code><phrase
            role="identifier">get_pytype</phrase></code> function returning a pointer
            to the associated <code><phrase role="identifier">PyTypeObject</phrase></code>.
            See for example <link linkend="concepts.resultconverter"><code><phrase
            role="identifier">ResultConverter</phrase></code></link> or <link linkend="to_from_python_type_conversion.boost_python_to_python_converter.class_template_to_python_convert.class_template_to_python_convert"><code><phrase
            role="identifier">to_python_converter</phrase></code></link>. The classes
            in this header file are meant to be used when implmenting <code><phrase
            role="identifier">get_pytype</phrase></code>. There are also <code><phrase
            role="identifier">_direct</phrase></code> versions of the templates of
            <code><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase></code>
            which should be used with undecorated type parameter, expected to be
            in the conversion registry when the module loads.
          </para>
        </section>
        <section id="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_wrap_pytype">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_wrap_pytype">Class
          <code><phrase role="identifier">wrap_pytype</phrase></code></link></title>
          <para>
            This template generates a static <code><phrase role="identifier">get_pytype</phrase></code>
            member returning the template parameter.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">converter</phrase><phrase role="special">{</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase> <phrase role="identifier">PyTypeObject</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="identifier">pytype</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">wrap_pytype</phrase>
    <phrase role="special">{</phrase>
      <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
          <phrase role="keyword">static</phrase> <phrase role="identifier">PyTypeObject</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="identifier">get_pytype</phrase><phrase role="special">(){</phrase><phrase role="keyword">return</phrase> <phrase role="identifier">pytype</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
    <phrase role="special">};</phrase>

<phrase role="special">}}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_registered_pytype">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_registered_pytype">Class
          <code><phrase role="identifier">registered_pytype</phrase></code></link></title>
          <para>
            This template should be used with template parameters which are (possibly
            decorated) types exported to python using <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel"><code><phrase
            role="identifier">class_</phrase></code></link>. The generated a static
            <code><phrase role="identifier">get_pytype</phrase></code> member returns
            the corresponding python type.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">converter</phrase><phrase role="special">{</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">registered_pytype</phrase>
    <phrase role="special">{</phrase>
      <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
          <phrase role="keyword">static</phrase> <phrase role="identifier">PyTypeObject</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="identifier">get_pytype</phrase><phrase role="special">();</phrase>
    <phrase role="special">};</phrase>

<phrase role="special">}}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_expected_from_python_type">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_expected_from_python_type">Class
          <code><phrase role="identifier">expected_from_python_type</phrase></code></link></title>
          <para>
            This template generates a static <code><phrase role="identifier">get_pytype</phrase></code>
            member which inspects the registered <code><phrase role="identifier">from_python</phrase></code>
            converters for the type <code><phrase role="identifier">T</phrase></code>
            and returns a matching python type.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">converter</phrase><phrase role="special">{</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">expected_from_python_type</phrase>
    <phrase role="special">{</phrase>
      <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
          <phrase role="keyword">static</phrase> <phrase role="identifier">PyTypeObject</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="identifier">get_pytype</phrase><phrase role="special">();</phrase>
    <phrase role="special">};</phrase>

<phrase role="special">}}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_to_python_target_type">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.class_to_python_target_type">Class
          <code><phrase role="identifier">to_python_target_type</phrase></code></link></title>
          <para>
            This template generates a static <code><phrase role="identifier">get_pytype</phrase></code>
            member returning the python type to which <code><phrase role="identifier">T</phrase></code>
            can be converted.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">converter</phrase><phrase role="special">{</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase> <phrase role="special">&gt;</phrase>
    <phrase role="keyword">class</phrase> <phrase role="identifier">to_python_target_type</phrase>
    <phrase role="special">{</phrase>
      <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
          <phrase role="keyword">static</phrase> <phrase role="identifier">PyTypeObject</phrase> <phrase role="keyword">const</phrase> <phrase role="special">*</phrase><phrase role="identifier">get_pytype</phrase><phrase role="special">();</phrase>
    <phrase role="special">};</phrase>

<phrase role="special">}}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.example">
          <title><link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.example">Example</link></title>
          <para>
            This example presumes that someone has implemented the standard noddy
            example module from the Python documentation, and placed the corresponding
            declarations in &quot;noddy.h&quot;. Because <code><phrase role="identifier">noddy_NoddyObject</phrase></code>
            is the ultimate trivial extension type, the example is a bit contrived:
            it wraps a function for which all information is contained in the type
            of its return value.
          </para>
          <para>
            C++ module definition:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">&quot;noddy.h&quot;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">tag</phrase> <phrase role="special">{};</phrase>
<phrase role="identifier">tag</phrase> <phrase role="identifier">make_tag</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">tag</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">tag_to_noddy</phrase>
<phrase role="preprocessor">#if</phrase> <phrase role="identifier">defined</phrase> <phrase role="identifier">BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</phrase> <phrase role="comment">//unnecessary overhead if py signatures are not supported</phrase>
<phrase role="special">:</phrase> <phrase role="identifier">wrap_pytype</phrase><phrase role="special">&lt;&amp;</phrase><phrase role="identifier">noddy_NoddyType</phrase><phrase role="special">&gt;</phrase> <phrase role="comment">//inherits get_pytype from wrap_pytype</phrase>
<phrase role="preprocessor">#endif</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">static</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">convert</phrase><phrase role="special">(</phrase><phrase role="identifier">tag</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">PyObject_New</phrase><phrase role="special">(</phrase><phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">noddy_NoddyType</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">to_python_converter</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;make_tag&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_tag</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">to_python_converter</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">tag</phrase><phrase role="special">,</phrase> <phrase role="identifier">tag_to_noddy</phrase>
<phrase role="preprocessor">#if</phrase> <phrase role="identifier">defined</phrase> <phrase role="identifier">BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</phrase> <phrase role="comment">//invalid if py signatures are not supported</phrase>
          <phrase role="special">,</phrase> <phrase role="keyword">true</phrase>
<phrase role="preprocessor">#endif</phrase>
          <phrase role="special">&gt;();</phrase> <phrase role="comment">//&quot;true&quot; because tag_to_noddy has member get_pytype</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            The following example registers to and from python converters using the
            templates expected_from_python_type and to_pyhton_target_type.
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">extract</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">to_python_converter</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">A</phrase>
<phrase role="special">{</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">B</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">A</phrase> <phrase role="identifier">a</phrase><phrase role="special">;</phrase>
  <phrase role="identifier">B</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">A</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">a_</phrase><phrase role="special">):</phrase><phrase role="identifier">a</phrase><phrase role="special">(</phrase><phrase role="identifier">a_</phrase><phrase role="special">){}</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Converter from A to python int</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">BToPython</phrase>
<phrase role="preprocessor">#if</phrase> <phrase role="identifier">defined</phrase> <phrase role="identifier">BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</phrase> <phrase role="comment">//unnecessary overhead if py signatures are not supported</phrase>
   <phrase role="special">:</phrase> <phrase role="identifier">converter</phrase><phrase role="special">::</phrase><phrase role="identifier">to_python_target_type</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase>  <phrase role="comment">//inherits get_pytype</phrase>
<phrase role="preprocessor">#endif</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">static</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">convert</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">B</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">b</phrase><phrase role="special">)</phrase>
  <phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">incref</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase><phrase role="special">(</phrase><phrase role="identifier">b</phrase><phrase role="special">.</phrase><phrase role="identifier">a</phrase><phrase role="special">).</phrase><phrase role="identifier">ptr</phrase><phrase role="special">());</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Conversion from python int to A</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">BFromPython</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">BFromPython</phrase><phrase role="special">()</phrase>
  <phrase role="special">{</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">converter</phrase><phrase role="special">::</phrase><phrase role="identifier">registry</phrase><phrase role="special">::</phrase><phrase role="identifier">push_back</phrase>
        <phrase role="special">(</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">convertible</phrase>
        <phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">construct</phrase>
        <phrase role="special">,</phrase> <phrase role="identifier">type_id</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">B</phrase> <phrase role="special">&gt;()</phrase>
<phrase role="preprocessor">#if</phrase> <phrase role="identifier">defined</phrase> <phrase role="identifier">BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</phrase> <phrase role="comment">//invalid if py signatures are not supported</phrase>
        <phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">converter</phrase><phrase role="special">::</phrase><phrase role="identifier">expected_from_python_type</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">get_pytype</phrase><phrase role="comment">//convertible to A can be converted to B</phrase>
<phrase role="preprocessor">#endif</phrase>
        <phrase role="special">);</phrase>
  <phrase role="special">}</phrase>

  <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase><phrase role="special">*</phrase> <phrase role="identifier">convertible</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">obj_ptr</phrase><phrase role="special">)</phrase>
  <phrase role="special">{</phrase>
      <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">A</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">ex</phrase><phrase role="special">(</phrase><phrase role="identifier">obj_ptr</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">if</phrase> <phrase role="special">(!</phrase><phrase role="identifier">ex</phrase><phrase role="special">.</phrase><phrase role="identifier">check</phrase><phrase role="special">())</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">return</phrase> <phrase role="identifier">obj_ptr</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>

  <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase> <phrase role="identifier">construct</phrase><phrase role="special">(</phrase>
      <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">obj_ptr</phrase><phrase role="special">,</phrase>
      <phrase role="identifier">converter</phrase><phrase role="special">::</phrase><phrase role="identifier">rvalue_from_python_stage1_data</phrase><phrase role="special">*</phrase> <phrase role="identifier">data</phrase><phrase role="special">)</phrase>
  <phrase role="special">{</phrase>
    <phrase role="keyword">void</phrase><phrase role="special">*</phrase> <phrase role="identifier">storage</phrase> <phrase role="special">=</phrase> <phrase role="special">(</phrase>
        <phrase role="special">(</phrase><phrase role="identifier">converter</phrase><phrase role="special">::</phrase><phrase role="identifier">rvalue_from_python_storage</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">B</phrase> <phrase role="special">&gt;*)</phrase><phrase role="identifier">data</phrase><phrase role="special">)-&gt;</phrase> <phrase role="identifier">storage</phrase><phrase role="special">.</phrase><phrase role="identifier">bytes</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">A</phrase><phrase role="special">&amp;&gt;</phrase> <phrase role="identifier">ex</phrase><phrase role="special">(</phrase><phrase role="identifier">obj_ptr</phrase><phrase role="special">);</phrase>
    <phrase role="keyword">new</phrase> <phrase role="special">(</phrase><phrase role="identifier">storage</phrase><phrase role="special">)</phrase> <phrase role="identifier">B</phrase><phrase role="special">(</phrase><phrase role="identifier">ex</phrase><phrase role="special">());</phrase>
    <phrase role="identifier">data</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">convertible</phrase> <phrase role="special">=</phrase> <phrase role="identifier">storage</phrase><phrase role="special">;</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">};</phrase>


<phrase role="identifier">B</phrase> <phrase role="identifier">func</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">B</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">b</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">b</phrase> <phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">pytype_function_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
  <phrase role="identifier">to_python_converter</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">B</phrase> <phrase role="special">,</phrase> <phrase role="identifier">BToPython</phrase>
<phrase role="preprocessor">#if</phrase> <phrase role="identifier">defined</phrase> <phrase role="identifier">BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</phrase> <phrase role="comment">//invalid if py signatures are not supported</phrase>
             <phrase role="special">,</phrase><phrase role="keyword">true</phrase>
<phrase role="preprocessor">#endif</phrase>
             <phrase role="special">&gt;();</phrase> <phrase role="comment">//has get_pytype</phrase>
  <phrase role="identifier">BFromPython</phrase><phrase role="special">();</phrase>

  <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;A&quot;</phrase><phrase role="special">)</phrase> <phrase role="special">;</phrase>

  <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;func&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">func</phrase><phrase role="special">);</phrase>

<phrase role="special">}</phrase>



<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">pytype_function_ext</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">print</phrase> <phrase role="identifier">func</phrase><phrase role="special">.</phrase><phrase role="identifier">__doc__</phrase>
<phrase role="identifier">func</phrase><phrase role="special">(</phrase> <phrase role="special">(</phrase><phrase role="identifier">A</phrase><phrase role="special">)</phrase><phrase role="identifier">arg1</phrase><phrase role="special">)</phrase> <phrase role="special">-&gt;</phrase> <phrase role="identifier">A</phrase> <phrase role="special">:</phrase>
    <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">signature</phrase><phrase role="special">:</phrase>
         <phrase role="keyword">struct</phrase> <phrase role="identifier">B</phrase> <phrase role="identifier">func</phrase><phrase role="special">(</phrase><phrase role="keyword">struct</phrase> <phrase role="identifier">B</phrase><phrase role="special">)</phrase>
</programlisting>
        </section>
      </section>
    </section>
    <section id="function_invocation_and_creation.models_of_callpolicies">
      <title><link linkend="function_invocation_and_creation.models_of_callpolicies">Models
      of CallPolicies</link></title>
      <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici">
        <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici">boost/python/default_call_policies.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_call_policies">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_call_policies">Class
          <code><phrase role="identifier">default_call_policies</phrase></code></link></title>
          <para>
            <code><phrase role="identifier">default_call_policies</phrase></code>
            is a model of <link linkend="concepts.callpolicies"><code><phrase role="identifier">CallPolicies</phrase></code></link>
            with no <code><phrase role="identifier">precall</phrase></code> or <code><phrase
            role="identifier">postcall</phrase></code> behavior and a <code><phrase
            role="identifier">result_converter</phrase></code> which handles by-value
            returns. Wrapped C++ functions and member functions <code><phrase role="identifier">use</phrase>
            <phrase role="identifier">default_call_policies</phrase></code> unless
            otherwise specified. You may find it convenient to derive new models
            of <link linkend="concepts.callpolicies"><code><phrase role="identifier">CallPolicies</phrase></code></link>
            from <code><phrase role="identifier">default_call_policies</phrase></code>.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">default_call_policies</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">precall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*);</phrase>
        <phrase role="keyword">static</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">typedef</phrase> <phrase role="identifier">default_result_converter</phrase> <phrase role="identifier">result_converter</phrase><phrase role="special">;</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sig</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">extract_return_type</phrase> <phrase role="special">:</phrase> <phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">front</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Sig</phrase><phrase role="special">&gt;{};</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_call_policies_stat">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_call_policies_stat">Class
          <code><phrase role="identifier">default_call_policies</phrase></code> static
          functions</link></title>
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">precall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  true
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Throws</term>
              <listitem>
                <para>
                  nothing
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  result
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Throws</term>
              <listitem>
                <para>
                  nothing
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_result_converter">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_result_converter">Class
          <code><phrase role="identifier">default_result_converter</phrase></code></link></title>
          <para>
            default_result_converter is a model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept"><code><phrase
            role="identifier">ResultConverterGenerator</phrase></code></link> which
            can be used to wrap C++ functions returning non-pointer types, <code><phrase
            role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase
            role="special">*</phrase></code>, and <code><phrase role="identifier">PyObject</phrase><phrase
            role="special">*</phrase></code>, by-value.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">default_result_converter</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_result_converter_m">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.class_default_result_converter_m">Class
          <code><phrase role="identifier">default_result_converter</phrase></code>
          metafunctions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  T is not a reference type. If T is a pointer type, T is const char*
                  or PyObject*.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  typedef to_python_value&lt;T const&amp;&gt; type;
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.example">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_default_call_polici.example">Example</link></title>
          <para>
            This example comes from the Boost.Python implementation itself. Because
            the return_value_policy class template does not implement precall or
            postcall behavior, its default base class is default_call_policies:
          </para>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Handler</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">return_value_policy</phrase> <phrase role="special">:</phrase> <phrase role="identifier">Base</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">typedef</phrase> <phrase role="identifier">Handler</phrase> <phrase role="identifier">result_converter</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp">
        <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp">boost/python/return_arg.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.introduction">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.introduction">Introduction</link></title>
          <para>
            <code><phrase role="identifier">return_arg</phrase></code> and <code><phrase
            role="identifier">return_self</phrase></code> instantiations are models
            of <link linkend="concepts.callpolicies"><code><phrase role="identifier">CallPolicies</phrase></code></link>
            which return the specified argument parameter (usually <code><phrase
            role="special">*</phrase><phrase role="keyword">this</phrase></code>)
            of a wrapped (member) function.
          </para>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.class_return_arg">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.class_return_arg">Class
          <code><phrase role="identifier">return_arg</phrase></code></link></title>
          <informaltable frame="all">
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>
                    <para>
                      Parameter
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Requirements
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Description
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Default
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      arg_pos
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A positive compile-time constant of type <code><phrase role="identifier">std</phrase><phrase
                      role="special">::</phrase><phrase role="identifier">size_t</phrase></code>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      the position of the argument to be returned.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      1
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      Base
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A model of <link linkend="concepts.callpolicies"><code><phrase
                      role="identifier">CallPolicies</phrase></code></link>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Used for policy composition. Any <code><phrase role="identifier">result_converter</phrase></code>
                      it supplies will be overridden by <code><phrase role="identifier">return_arg</phrase></code>,
                      but its <code><phrase role="identifier">precall</phrase></code>
                      and <code><phrase role="identifier">postcall</phrase></code>
                      policies are composed as described here <link linkend="concepts.callpolicies"><code><phrase
                      role="identifier">CallPolicies</phrase></code></link>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      default_call_policies
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">arg_pos</phrase><phrase role="special">=</phrase><phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">return_arg</phrase> <phrase role="special">:</phrase> <phrase role="identifier">Base</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">struct</phrase> <phrase role="identifier">result_converter</phrase><phrase role="special">{</phrase> <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase> <phrase role="special">};</phrase>
      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Sig</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">extract_return_type</phrase> <phrase role="special">:</phrase> <phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">at_c</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Sig</phrase><phrase role="special">,</phrase> <phrase role="identifier">arg_pos</phrase><phrase role="special">&gt;{};</phrase>

   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.class_return_arg_static_function">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.class_return_arg_static_function">Class
          <code><phrase role="identifier">return_arg</phrase></code> static functions</link></title>
<programlisting><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">PyTuple_Check</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">args</phrase><phrase role="special">)</phrase>
                  <phrase role="special">!=</phrase> <phrase role="number">0</phrase></code>
                  and <code><phrase role="identifier">PyTuple_Size</phrase><phrase
                  role="special">(</phrase><phrase role="identifier">args</phrase><phrase
                  role="special">)</phrase> <phrase role="special">!=</phrase> <phrase
                  role="number">0</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  PyTuple_GetItem(args,arg_pos-1)
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.class_template_return_self">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.class_template_return_self">Class
          template <code><phrase role="identifier">return_self</phrase></code></link></title>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">return_self</phrase>
     <phrase role="special">:</phrase> <phrase role="identifier">return_arg</phrase><phrase role="special">&lt;</phrase><phrase role="number">1</phrase><phrase role="special">,</phrase><phrase role="identifier">Base</phrase><phrase role="special">&gt;</phrase>
   <phrase role="special">{};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.example">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_arg_hpp.example">Example</link></title>
          <para>
            C++ module definition:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_arg</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">Widget</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">Widget</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase><phrase role="identifier">sensitive_</phrase><phrase role="special">(</phrase><phrase role="keyword">true</phrase><phrase role="special">){}</phrase>
   <phrase role="keyword">bool</phrase> <phrase role="identifier">get_sensitive</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">sensitive_</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="keyword">void</phrase> <phrase role="identifier">set_sensitive</phrase><phrase role="special">(</phrase><phrase role="keyword">bool</phrase> <phrase role="identifier">s</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">sensitive_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">s</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="keyword">bool</phrase> <phrase role="identifier">sensitive_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">Label</phrase> <phrase role="special">:</phrase> <phrase role="identifier">Widget</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">Label</phrase><phrase role="special">()</phrase> <phrase role="special">{}</phrase>

   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase>  <phrase role="identifier">get_label</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">label_</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="keyword">void</phrase> <phrase role="identifier">set_label</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">l</phrase><phrase role="special">){</phrase> <phrase role="identifier">label_</phrase> <phrase role="special">=</phrase> <phrase role="identifier">l</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">label_</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">return_self_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">widget</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Widget&quot;</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;sensitive&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Widget</phrase><phrase role="special">::</phrase><phrase role="identifier">get_sensitive</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;sensitive&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Widget</phrase><phrase role="special">::</phrase><phrase role="identifier">set_sensitive</phrase><phrase role="special">,</phrase> <phrase role="identifier">return_self</phrase><phrase role="special">&lt;&gt;())</phrase>
      <phrase role="special">;</phrase>

   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Label</phrase><phrase role="special">,</phrase> <phrase role="identifier">bases</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Widget</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;Label&quot;</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;label&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Label</phrase><phrase role="special">::</phrase><phrase role="identifier">get_label</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;label&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Label</phrase><phrase role="special">::</phrase><phrase role="identifier">set_label</phrase><phrase role="special">,</phrase> <phrase role="identifier">return_self</phrase><phrase role="special">&lt;&gt;())</phrase>
      <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">return_self_ext</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">l1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Label</phrase><phrase role="special">().</phrase><phrase role="identifier">label</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo&quot;</phrase><phrase role="special">).</phrase><phrase role="identifier">sensitive</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">l2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Label</phrase><phrase role="special">().</phrase><phrase role="identifier">sensitive</phrase><phrase role="special">(</phrase><phrase role="keyword">false</phrase><phrase role="special">).</phrase><phrase role="identifier">label</phrase><phrase role="special">(</phrase><phrase role="string">&quot;foo&quot;</phrase><phrase role="special">)</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref">
        <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref">boost/python/return_internal_reference.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.introduction">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.introduction">Introduction</link></title>
          <para>
            <code><phrase role="identifier">return_internal_reference</phrase></code>
            instantiations are models of <link linkend="concepts.callpolicies"><code><phrase
            role="identifier">CallPolicies</phrase></code></link> which allow pointers
            and references to objects held internally by a free or member function
            argument or from the target of a member function to be returned safely
            without making a copy of the referent. The default for its first template
            argument handles the common case where the containing object is the target
            (<code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>)
            of a wrapped member function.
          </para>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.class_template_return_internal_r">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.class_template_return_internal_r">Class
          template <code><phrase role="identifier">return_internal_reference</phrase></code></link></title>
          <informaltable frame="all">
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>
                    <para>
                      Parameter
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Requirements
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Description
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Default
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      owner_arg
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A positive compile-time constant of type <code><phrase role="identifier">std</phrase><phrase
                      role="special">::</phrase><phrase role="identifier">size_t</phrase></code>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      The index of the parameter which contains the object to which
                      the reference or pointer is being returned. If used to wrap
                      a member function, parameter 1 is the target object (<code><phrase
                      role="special">*</phrase><phrase role="keyword">this</phrase></code>).
                      Note that if the target Python object type doesn't support
                      weak references, a Python TypeError exception will be raised
                      when the function being wrapped is called.
                    </para>
                  </entry>
                  <entry>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      Base
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A model of <link linkend="concepts.callpolicies"><code><phrase
                      role="identifier">CallPolicies</phrase></code></link>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Used for policy composition. Any <code><phrase role="identifier">result_converter</phrase></code>
                      it supplies will be overridden by <code><phrase role="identifier">return_internal_reference</phrase></code>,
                      but its <code><phrase role="identifier">precall</phrase></code>
                      and <code><phrase role="identifier">postcall</phrase></code>
                      policies are composed as described here <link linkend="concepts.callpolicies"><code><phrase
                      role="identifier">CallPolicies</phrase></code></link>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      default_call_policies
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">owner_arg</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">return_internal_reference</phrase> <phrase role="special">:</phrase> <phrase role="identifier">Base</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">reference_existing_object</phrase> <phrase role="identifier">result_converter</phrase><phrase role="special">;</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.class_return_internal_reference_">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.class_return_internal_reference_">Class
          <code><phrase role="identifier">return_internal_reference</phrase></code>
          static functions</link></title>
<programlisting><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">PyTuple_Check</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">args</phrase><phrase role="special">)</phrase>
                  <phrase role="special">!=</phrase> <phrase role="number">0</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward_st"><code><phrase
                  role="identifier">with_custodian_and_ward_postcall</phrase><phrase
                  role="special">::</phrase><phrase role="identifier">postcall</phrase><phrase
                  role="special">(</phrase><phrase role="identifier">args</phrase><phrase
                  role="special">,</phrase> <phrase role="identifier">result</phrase><phrase
                  role="special">)</phrase></code></link>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.example">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.example">Example</link></title>
          <para>
            C++ module definition:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_internal_reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">Bar</phrase>
<phrase role="special">{</phrase>
 <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Bar</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">x</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
   <phrase role="keyword">int</phrase> <phrase role="identifier">get_x</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="keyword">void</phrase> <phrase role="identifier">set_x</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">class</phrase> <phrase role="identifier">Foo</phrase>
<phrase role="special">{</phrase>
 <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">b</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>

   <phrase role="comment">// Returns an internal reference</phrase>
   <phrase role="identifier">Bar</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Bar</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">internal_refs</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Bar&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_x&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">::</phrase><phrase role="identifier">get_x</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;set_x&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">::</phrase><phrase role="identifier">set_x</phrase><phrase role="special">)</phrase>
      <phrase role="special">;</phrase>

   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_bar&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">get_bar</phrase>
          <phrase role="special">,</phrase> <phrase role="identifier">return_internal_reference</phrase><phrase role="special">&lt;&gt;())</phrase>
      <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">internal_refs</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">f</phrase><phrase role="special">.</phrase><phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">f</phrase><phrase role="special">.</phrase><phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b1</phrase><phrase role="special">.</phrase><phrase role="identifier">get_x</phrase><phrase role="special">()</phrase>
<phrase role="number">3</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b2</phrase><phrase role="special">.</phrase><phrase role="identifier">get_x</phrase><phrase role="special">()</phrase>
<phrase role="number">3</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b1</phrase><phrase role="special">.</phrase><phrase role="identifier">set_x</phrase><phrase role="special">(</phrase><phrase role="number">42</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b2</phrase><phrase role="special">.</phrase><phrase role="identifier">get_x</phrase><phrase role="special">()</phrase>
<phrase role="number">42</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy">
        <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy">boost/python/return_value_policy.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy.introduction">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy.introduction">Introduction</link></title>
          <para>
            return_value_policy instantiations are simply models of <link linkend="concepts.callpolicies"><code><phrase
            role="identifier">CallPolicies</phrase></code></link> which are composed
            of a <link linkend="concepts.resultconverter.resultconvertergenerator_concept"><code><phrase
            role="identifier">ResultConverterGenerator</phrase></code></link> and
            optional <code><phrase role="identifier">Base</phrase></code> <link linkend="concepts.callpolicies"><code><phrase
            role="identifier">CallPolicies</phrase></code></link>.
          </para>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy.class_template_return_value_poli">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy.class_template_return_value_poli">Class
          template <code><phrase role="identifier">return_value_policy</phrase></code></link></title>
          <informaltable frame="all">
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>
                    <para>
                      Parameter
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Requirements
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Default
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      ResultConverterGenerator
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept"><code><phrase
                      role="identifier">ResultConverterGenerator</phrase></code></link>
                    </para>
                  </entry>
                  <entry>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      Base
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A model of <link linkend="concepts.callpolicies"><code><phrase
                      role="identifier">CallPolicies</phrase></code></link>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      default_call_policies
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">ResultConverterGenerator</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">return_value_policy</phrase> <phrase role="special">:</phrase> <phrase role="identifier">Base</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">ResultConverterGenerator</phrase> <phrase role="identifier">result_converter</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy.example">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_value_policy.example">Example</link></title>
          <para>
            C++ module definition:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">copy_const_reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// classes to wrap</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">Bar</phrase> <phrase role="special">{</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">Foo</phrase> <phrase role="special">{</phrase>
   <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="special">{</phrase> <phrase role="identifier">b</phrase><phrase role="special">.</phrase><phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="identifier">Bar</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Bar</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Wrapper code</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">my_module</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Bar&quot;</phrase><phrase role="special">);</phrase>

   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_bar&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">get_bar</phrase>
          <phrase role="special">,</phrase> <phrase role="identifier">return_value_policy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">copy_const_reference</phrase><phrase role="special">&gt;())</phrase>
      <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">my_module</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">)</phrase>         <phrase role="special">#</phrase> <phrase role="identifier">create</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">Foo</phrase> <phrase role="identifier">object</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b</phrase> <phrase role="special">=</phrase> <phrase role="identifier">f</phrase><phrase role="special">.</phrase><phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase>    <phrase role="special">#</phrase> <phrase role="identifier">make</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">copy</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">internal</phrase> <phrase role="identifier">Bar</phrase> <phrase role="identifier">object</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_">
        <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_">boost/python/with_custodian_and_ward.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.introduction">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.introduction">Introduction</link></title>
          <para>
            This header provides facilities for establishing a lifetime dependency
            between two of a function's Python argument or result objects. The ward
            object will not be destroyed until after the custodian as long as the
            custodian object supports <ulink url="http://www.python.org/doc/current/lib/module-weakref.html">weak
            references</ulink> (Boost.Python extension classes all support weak references).
            If the custodian object does not support weak references and is not
            <code><phrase role="identifier">None</phrase></code>, an appropriate
            exception will be thrown. The two class templates <code><phrase role="identifier">with_custodian_and_ward</phrase></code>
            and <code><phrase role="identifier">with_custodian_and_ward_postcall</phrase></code>
            differ in the point at which they take effect.
          </para>
          <para>
            In order to reduce the chance of inadvertently creating dangling pointers,
            the default is to do lifetime binding before the underlying C++ object
            is invoked. However, before invocation the result object is not available,
            so <code><phrase role="identifier">with_custodian_and_ward_postcall</phrase></code>
            is provided to bind lifetimes after invocation. Also, if a C++ exception
            is thrown after <code><phrase role="identifier">with_custodian_and_ward</phrase><phrase
            role="special">&lt;&gt;::</phrase><phrase role="identifier">precall</phrase></code>
            but before the underlying C++ object actually stores a pointer, the lifetime
            of the custodian and ward objects will be artificially bound together,
            so one might choose <code><phrase role="identifier">with_custodian_and_ward_postcall</phrase></code>
            instead, depending on the semantics of the function being wrapped.
          </para>
          <para>
            Please note that this is not the appropriate tool to use when wrapping
            functions which transfer ownership of a raw pointer across the function-call
            boundary. Please see the FAQ if you want to do that.
          </para>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward">Class
          <code><phrase role="identifier">with_custodian_and_ward</phrase></code></link></title>
          <informaltable frame="all">
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>
                    <para>
                      Parameter
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Requirements
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Description
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Default
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      custodian
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A positive compile-time constant of <code><phrase role="identifier">type</phrase>
                      <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
                      role="identifier">size_t</phrase></code>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      The 1-based index of the parameter which is the dependency
                      in the lifetime relationship to be established. If used to
                      wrap a member function, parameter 1 is the target object (<code><phrase
                      role="special">*</phrase><phrase role="keyword">this</phrase></code>).
                      Note that if the target Python object type doesn't support
                      weak references, a Python TypeError exception will be raised
                      when the C++ object being wrapped is called.
                    </para>
                  </entry>
                  <entry>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      ward
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A positive compile-time constant of type <code><phrase role="identifier">std</phrase><phrase
                      role="special">::</phrase><phrase role="identifier">size_t</phrase></code>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      The 1-based index of the parameter which is the dependent in
                      the lifetime relationship to be established. If used to wrap
                      a member function, parameter 1 is the target object (<code><phrase
                      role="special">*</phrase><phrase role="keyword">this</phrase></code>).
                    </para>
                  </entry>
                  <entry>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      Base
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A model of <link linkend="concepts.callpolicies"><code><phrase
                      role="identifier">CallPolicies</phrase></code></link>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Used for policy <link linkend="concepts.callpolicies.callpolicies_composition">composition</link>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      default_call_policies
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">custodian</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">ward</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">with_custodian_and_ward</phrase> <phrase role="special">:</phrase> <phrase role="identifier">Base</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">precall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">);</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase></programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward_st">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward_st">Class
          <code><phrase role="identifier">with_custodian_and_ward</phrase></code>
          static functions</link></title>
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">precall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">PyTuple_Check</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">args</phrase><phrase role="special">)</phrase>
                  <phrase role="special">!=</phrase> <phrase role="number">0</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Makes the lifetime of the argument indicated by ward dependent
                  on the lifetime of the argument indicated by custodian.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  false and PyErr_Occurred() != 0 upon failure, true otherwise.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward_po">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward_po">Class
          <code><phrase role="identifier">with_custodian_and_ward_postcall</phrase></code></link></title>
          <informaltable frame="all">
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>
                    <para>
                      Parameter
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Requirements
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Description
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Default
                    </para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>
                      custodian
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A positive compile-time constant of type <code><phrase role="identifier">std</phrase><phrase
                      role="special">::</phrase><phrase role="identifier">size_t</phrase></code>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      The index of the parameter which is the dependency in the lifetime
                      relationship to be established. Zero indicates the result object;
                      1 indicates the first argument. If used to wrap a member function,
                      parameter 1 is the target object (<code><phrase role="special">*</phrase><phrase
                      role="keyword">this</phrase></code>). Note that if the target
                      Python object type doesn't support weak references, a Python
                      TypeError exception will be raised when the C++ object being
                      wrapped is called.
                    </para>
                  </entry>
                  <entry>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      ward
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A positive compile-time constant of type <code><phrase role="identifier">std</phrase><phrase
                      role="special">::</phrase><phrase role="identifier">size_t</phrase></code>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      The index of the parameter which is the dependent in the lifetime
                      relationship to be established. Zero indicates the result object;
                      1 indicates the first argument. If used to wrap a member function,
                      parameter 1 is the target object (<code><phrase role="special">*</phrase><phrase
                      role="keyword">this</phrase></code>).
                    </para>
                  </entry>
                  <entry>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>
                      Base
                    </para>
                  </entry>
                  <entry>
                    <para>
                      A model of <link linkend="concepts.callpolicies"><code><phrase
                      role="identifier">CallPolicies</phrase></code></link>
                    </para>
                  </entry>
                  <entry>
                    <para>
                      Used for policy <link linkend="concepts.callpolicies.callpolicies_composition">composition</link>.
                    </para>
                  </entry>
                  <entry>
                    <para>
                      default_call_policies
                    </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">custodian</phrase><phrase role="special">,</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">ward</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">with_custodian_and_ward_postcall</phrase> <phrase role="special">:</phrase> <phrase role="identifier">Base</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward_p0">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward_p0">Class
          <code><phrase role="identifier">with_custodian_and_ward_postcall</phrase></code>
          static functions</link></title>
<programlisting><phrase role="identifier">PyObject</phrase> <phrase role="special">*</phrase><phrase role="identifier">postcall</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">args</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">result</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">PyTuple_Check</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">args</phrase><phrase role="special">)</phrase>
                  <phrase role="special">!=</phrase> <phrase role="number">0</phrase></code>,
                  <code><phrase role="identifier">result</phrase> <phrase role="special">!=</phrase>
                  <phrase role="number">0</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Makes the lifetime of the object indicated by ward dependent on
                  the lifetime of the object indicated by custodian.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="number">0</phrase></code> and <code><phrase
                  role="identifier">PyErr_Occurred</phrase><phrase role="special">()</phrase>
                  <phrase role="special">!=</phrase> <phrase role="number">0</phrase></code>
                  upon failure, <code><phrase role="keyword">true</phrase></code>
                  otherwise.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.example">
          <title><link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.example">Example</link></title>
          <para>
            The following example shows how <code><phrase role="identifier">with_custodian_and_ward_postcall</phrase></code>
            is used by the library to implement <code><phrase role="identifier">return_internal_reference</phrase></code>
          </para>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">size_t</phrase> <phrase role="identifier">owner_arg</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Base</phrase> <phrase role="special">=</phrase> <phrase role="identifier">default_call_policies</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">return_internal_reference</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">with_custodian_and_ward_postcall</phrase><phrase role="special">&lt;</phrase><phrase role="number">0</phrase><phrase role="special">,</phrase> <phrase role="identifier">owner_arg</phrase><phrase role="special">,</phrase> <phrase role="identifier">Base</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">typedef</phrase> <phrase role="identifier">reference_existing_object</phrase> <phrase role="identifier">result_converter</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
        </section>
      </section>
    </section>
    <section id="function_invocation_and_creation.models_of_resultconverter">
      <title><link linkend="function_invocation_and_creation.models_of_resultconverter">Models
      of ResultConverter</link></title>
      <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_">
        <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_">boost/python/to_python_indirect.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction">
          <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction">Introduction</link></title>
<programlisting><phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">to_python_indirect</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">supplies</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">way</phrase> <phrase role="identifier">to</phrase> <phrase role="identifier">construct</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">Python</phrase> <phrase role="identifier">objects</phrase> <phrase role="identifier">that</phrase> <phrase role="identifier">hold</phrase> <phrase role="identifier">wrapped</phrase> <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">instances</phrase> <phrase role="identifier">via</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">pointer</phrase> <phrase role="keyword">or</phrase> <phrase role="identifier">smart</phrase> <phrase role="identifier">pointer</phrase><phrase role="special">.</phrase>
<phrase role="special">[</phrase><phrase role="identifier">endsect</phrase><phrase role="special">]</phrase>
</programlisting>
          <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction.class_to_python_indirect">
            <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction.class_to_python_indirect">Class
            <code><phrase role="identifier">to_python_indirect</phrase></code></link></title>
            <para>
              Class template <code><phrase role="identifier">to_python_indirect</phrase></code>
              converts objects of its first argument type to python as extension
              class instances, using the ownership policy provided by its 2nd argument.
            </para>
            <informaltable frame="all">
              <tgroup cols="3">
                <thead>
                  <row>
                    <entry>
                      <para>
                        Parameter
                      </para>
                    </entry>
                    <entry>
                      <para>
                        Requirements
                      </para>
                    </entry>
                    <entry>
                      <para>
                        Description
                      </para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>
                        T
                      </para>
                    </entry>
                    <entry>
                      <para>
                        Either <code><phrase role="identifier">U</phrase> <phrase
                        role="identifier">cv</phrase><phrase role="special">&amp;</phrase></code>
                        (where cv is any optional cv-qualification) or a <link linkend="concepts.dereferenceable">Dereferenceable</link>
                        type such that <code><phrase role="special">*</phrase><phrase
                        role="identifier">x</phrase></code> is convertible to <code><phrase
                        role="identifier">U</phrase> <phrase role="keyword">const</phrase><phrase
                        role="special">&amp;</phrase></code>, where <code><phrase
                        role="identifier">U</phrase></code> is a class type.
                      </para>
                    </entry>
                    <entry>
                      <para>
                        <code><phrase role="identifier">A</phrase></code> type deferencing
                        a C++ class exposed to Python using class template <link
                        linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel"><code><phrase
                        role="identifier">class_</phrase></code></link>.
                      </para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>
                        MakeHolder
                      </para>
                    </entry>
                    <entry>
                      <para>
                        <code><phrase role="identifier">h</phrase> <phrase role="special">=</phrase>
                        <phrase role="identifier">MakeHolder</phrase><phrase role="special">::</phrase><phrase
                        role="identifier">execute</phrase><phrase role="special">(</phrase><phrase
                        role="identifier">p</phrase><phrase role="special">);</phrase></code>
                      </para>
                    </entry>
                    <entry>
                      <para>
                        A class whose static <code><phrase role="identifier">execute</phrase><phrase
                        role="special">()</phrase></code> creates an <code><phrase
                        role="identifier">instance_holder</phrase></code>.
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
              Instantiations of to_python_indirect are models of <link linkend="concepts.resultconverter"><code><phrase
              role="identifier">ResultConverter</phrase></code></link>.
            </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">MakeHolder</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">to_python_indirect</phrase>
  <phrase role="special">{</phrase>
     <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">convertible</phrase><phrase role="special">();</phrase>
     <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">T</phrase> <phrase role="identifier">ptr_or_reference</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
   <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
     <phrase role="keyword">static</phrase> <phrase role="identifier">PyTypeObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">type</phrase><phrase role="special">();</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
          </section>
          <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction.class_to_python_indirect_observe">
            <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction.class_to_python_indirect_observe">Class
            <code><phrase role="identifier">to_python_indirect</phrase></code> observers</link></title>
<programlisting><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">T</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
            <variablelist>
              <title></title>
              <varlistentry>
                <term>Requires</term>
                <listitem>
                  <para>
                    <code><phrase role="identifier">x</phrase></code> refers to an
                    object (if it is a pointer type, it is non-null). <code><phrase
                    role="identifier">convertible</phrase><phrase role="special">()</phrase>
                    <phrase role="special">==</phrase> <phrase role="keyword">true</phrase></code>.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Effects</term>
                <listitem>
                  <para>
                    Creates an appropriately-typed Boost.Python extension class instance,
                    uses MakeHolder to create an instance_holder from x, installs
                    the instance_holder in the new extension class instance, and
                    returns a pointer to it.
                  </para>
                </listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction.class_to_python_indirect_statics">
            <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.introduction.class_to_python_indirect_statics">Class
            <code><phrase role="identifier">to_python_indirect</phrase></code> statics</link></title>
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">convertible</phrase><phrase role="special">()</phrase></programlisting>
            <variablelist>
              <title></title>
              <varlistentry>
                <term>Effects</term>
                <listitem>
                  <para>
                    Returns true iff any module has registered a Python type corresponding
                    to U.
                  </para>
                </listitem>
              </varlistentry>
            </variablelist>
          </section>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.example">
          <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_indirect_.example">Example</link></title>
          <para>
            This example replicates the functionality of <link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_.class_reference_existing_object"><code><phrase
            role="identifier">reference_existing_object</phrase></code></link>, but
            without some of the compile-time error checking.
          </para>
<programlisting><phrase role="keyword">struct</phrase> <phrase role="identifier">make_reference_holder</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">objects</phrase><phrase role="special">::</phrase><phrase role="identifier">instance_holder</phrase><phrase role="special">*</phrase> <phrase role="identifier">result_type</phrase><phrase role="special">;</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">static</phrase> <phrase role="identifier">result_type</phrase> <phrase role="identifier">execute</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">return</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">objects</phrase><phrase role="special">::</phrase><phrase role="identifier">pointer_holder</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">*,</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">p</phrase><phrase role="special">);</phrase>
   <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">reference_existing_object</phrase>
<phrase role="special">{</phrase>
   <phrase role="comment">// metafunction returning the ResultConverter</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">to_python_indirect</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">,</phrase><phrase role="identifier">make_reference_holder</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">};</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp">
        <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp">boost/python/to_python_value.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp.introduction">
          <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp.introduction">Introduction</link></title>
          <para>
            <code><phrase role="identifier">to_python_value</phrase></code> is a
            model of <link linkend="concepts.resultconverter">ResultConverter</link>
            which copies its argument into a new Python object.
          </para>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp.class_template_to_python_value">
          <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp.class_template_to_python_value">Class
          template <code><phrase role="identifier">to_python_value</phrase></code></link></title>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">to_python_value</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">add_reference</phrase><phrase role="special">&lt;</phrase>
         <phrase role="keyword">typename</phrase> <phrase role="identifier">add_const</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;::</phrase><phrase role="identifier">type</phrase>
      <phrase role="special">&gt;::</phrase><phrase role="identifier">type</phrase> <phrase role="identifier">argument_type</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">convertible</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">argument_type</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp.class_to_python_value_observers">
          <title><link linkend="function_invocation_and_creation.models_of_resultconverter.boost_python_to_python_value_hpp.class_to_python_value_observers">Class
          <code><phrase role="identifier">to_python_value</phrase></code> observers</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">convertible</phrase><phrase role="special">();</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">true</phrase></code> iff a converter
                  has been registered which can convert <code><phrase role="identifier">T</phrase></code>
                  to python by-value.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()(</phrase><phrase role="identifier">argument_type</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">convertible</phrase><phrase role="special">()</phrase>
                  <phrase role="special">==</phrase> <phrase role="keyword">true</phrase></code>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  converts <code><phrase role="identifier">x</phrase></code> to python
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  the resulting Python object iff a converter for <code><phrase role="identifier">T</phrase></code>
                  has been registered, <code><phrase role="number">0</phrase></code>
                  otherwise.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
    </section>
    <section id="function_invocation_and_creation.models_of_resultconvertergenerat">
      <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat">Models
      of ResultConverterGenerator</link></title>
      <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc">
        <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc">boost/python/copy_const_reference.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc.class_copy_const_reference">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc.class_copy_const_reference">Class
          <code><phrase role="identifier">copy_const_reference</phrase></code></link></title>
          <para>
            <code><phrase role="identifier">copy_const_reference</phrase></code>
            is a model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept">ResultConverterGenerator</link>
            which can be used to wrap C++ functions returning a reference-to-const
            type such that the referenced value is copied into a new Python object.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">copy_const_reference</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc.class_copy_const_reference_metaf">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc.class_copy_const_reference_metaf">Class
          <code><phrase role="identifier">copy_const_reference</phrase></code> metafunctions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">T</phrase></code> is <code><phrase
                  role="identifier">U</phrase> <phrase role="keyword">const</phrase><phrase
                  role="special">&amp;</phrase></code> for some <code><phrase role="identifier">U</phrase></code>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">typedef</phrase> <phrase role="identifier">to_python_value</phrase><phrase
                  role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
                  role="special">&gt;</phrase> <phrase role="identifier">type</phrase><phrase
                  role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc.example">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_const_referenc.example">Example</link></title>
          <para>
            C++ module definition:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">copy_const_reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// classes to wrap</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">Bar</phrase> <phrase role="special">{</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">Foo</phrase> <phrase role="special">{</phrase>
   <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="special">{</phrase> <phrase role="identifier">b</phrase><phrase role="special">.</phrase><phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="identifier">Bar</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Bar</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Wrapper code</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">my_module</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Bar&quot;</phrase><phrase role="special">);</phrase>

     <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_bar&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">get_bar</phrase>
            <phrase role="special">,</phrase> <phrase role="identifier">return_value_policy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">copy_const_reference</phrase><phrase role="special">&gt;())</phrase>
       <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">my_module</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">)</phrase>         <phrase role="special">#</phrase> <phrase role="identifier">create</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">Foo</phrase> <phrase role="identifier">object</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b</phrase> <phrase role="special">=</phrase> <phrase role="identifier">f</phrase><phrase role="special">.</phrase><phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase>    <phrase role="special">#</phrase> <phrase role="identifier">make</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">copy</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">internal</phrase> <phrase role="identifier">Bar</phrase> <phrase role="identifier">object</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe">
        <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe">boost/python/copy_non_const_reference.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe.class_copy_non_const_reference">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe.class_copy_non_const_reference">Class
          <code><phrase role="identifier">copy_non_const_reference</phrase></code></link></title>
          <para>
            <code><phrase role="identifier">copy_non_const_reference</phrase></code>
            is a model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept">ResultConverterGenerator</link>
            which can be used to wrap C++ functions returning a reference-to-non-const
            type such that the referenced value is copied into a new Python object.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">copy_non_const_reference</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe.class_copy_non_const_reference_m">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe.class_copy_non_const_reference_m">Class
          <code><phrase role="identifier">copy_non_const_reference</phrase></code>
          metafunctions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">T</phrase></code> is <code><phrase
                  role="identifier">U</phrase> <phrase role="special">&amp;</phrase></code>
                  for some non-const <code><phrase role="identifier">U</phrase></code>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">typedef</phrase> <phrase role="identifier">to_python_value</phrase><phrase
                  role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
                  role="special">&gt;</phrase> <phrase role="identifier">type</phrase></code>;
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe.example">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_copy_non_const_refe.example">Example</link></title>
          <para>
            C++ module definition:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">copy_non_const_reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// classes to wrap</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">Bar</phrase> <phrase role="special">{</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">Foo</phrase> <phrase role="special">{</phrase>
   <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="special">{</phrase> <phrase role="identifier">b</phrase><phrase role="special">.</phrase><phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="identifier">Bar</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="identifier">Bar</phrase> <phrase role="identifier">b</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// Wrapper code</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">my_module</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Bar&quot;</phrase><phrase role="special">);</phrase>

     <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_bar&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">get_bar</phrase>
            <phrase role="special">,</phrase> <phrase role="identifier">return_value_policy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">copy_non_const_reference</phrase><phrase role="special">&gt;())</phrase>
       <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">my_module</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">)</phrase>         <phrase role="special">#</phrase> <phrase role="identifier">create</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">Foo</phrase> <phrase role="identifier">object</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b</phrase> <phrase role="special">=</phrase> <phrase role="identifier">f</phrase><phrase role="special">.</phrase><phrase role="identifier">get_bar</phrase><phrase role="special">()</phrase>    <phrase role="special">#</phrase> <phrase role="identifier">make</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">copy</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">internal</phrase> <phrase role="identifier">Bar</phrase> <phrase role="identifier">object</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h">
        <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h">boost/python/manage_new_object.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h.class_manage_new_object">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h.class_manage_new_object">Class
          <code><phrase role="identifier">manage_new_object</phrase></code></link></title>
          <para>
            <code><phrase role="identifier">manage_new_object</phrase></code> is
            a model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept">ResultConverterGenerator</link>
            which can be used to wrap C++ functions which return a pointer to an
            object allocated with a new-expression, and expect the caller to take
            responsibility for deleting that object.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">manage_new_object</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h.class_manage_new_object_metafunc">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h.class_manage_new_object_metafunc">Class
          <code><phrase role="identifier">manage_new_object</phrase></code> metafunctions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">T</phrase></code> is <code><phrase
                  role="identifier">U</phrase><phrase role="special">*</phrase></code>
                  for some <code><phrase role="identifier">U</phrase></code>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">typedef</phrase> <phrase role="identifier">to_python_indirect</phrase><phrase
                  role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
                  role="special">&gt;</phrase> <phrase role="identifier">type</phrase><phrase
                  role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h.example">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_manage_new_object_h.example">Example</link></title>
          <para>
            In C++:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">manage_new_object</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>


<phrase role="keyword">struct</phrase> <phrase role="identifier">Foo</phrase> <phrase role="special">{</phrase>
   <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">x</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">){}</phrase>
   <phrase role="keyword">int</phrase> <phrase role="identifier">get_x</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
   <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">Foo</phrase><phrase role="special">*</phrase> <phrase role="identifier">make_foo</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">Foo</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>

<phrase role="comment">// Wrapper code</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">my_module</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;make_foo&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_foo</phrase><phrase role="special">,</phrase> <phrase role="identifier">return_value_policy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">manage_new_object</phrase><phrase role="special">&gt;())</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Foo&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_x&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Foo</phrase><phrase role="special">::</phrase><phrase role="identifier">get_x</phrase><phrase role="special">)</phrase>
        <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">my_module</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase> <phrase role="special">=</phrase> <phrase role="identifier">make_foo</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">)</phrase>     <phrase role="special">#</phrase> <phrase role="identifier">create</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">Foo</phrase> <phrase role="identifier">object</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">f</phrase><phrase role="special">.</phrase><phrase role="identifier">get_x</phrase><phrase role="special">()</phrase>
<phrase role="number">3</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_">
        <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_">boost/python/reference_existing_object.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_.class_reference_existing_object">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_.class_reference_existing_object">Class
          <code><phrase role="identifier">reference_existing_object</phrase></code></link></title>
          <para>
            <code><phrase role="identifier">reference_existing_object</phrase></code>
            is a model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept">ResultConverterGenerator</link>
            which can be used to wrap C++ functions which return a reference or pointer
            to a C++ object. When the wrapped function is called, the value referenced
            by its return value is not copied. A new Python object is created which
            contains a pointer to the referent, and no attempt is made to ensure
            that the lifetime of the referent is at least as long as that of the
            corresponding Python object. Thus, it can be <emphasis role="bold">highly
            dangerous</emphasis> to use <code><phrase role="identifier">reference_existing_object</phrase></code>
            without additional lifetime management from such models of <link linkend="concepts.callpolicies">CallPolicies</link>
            as <link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_with_custodian_and_.class_with_custodian_and_ward"><code><phrase
            role="identifier">with_custodian_and_ward</phrase></code></link>. This
            class is used in the implementation of <link linkend="function_invocation_and_creation.models_of_callpolicies.boost_python_return_internal_ref.class_template_return_internal_r"><code><phrase
            role="identifier">return_internal_reference</phrase></code></link>.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">reference_existing_object</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_.class_reference_existing_object_">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_.class_reference_existing_object_">Class
          <code><phrase role="identifier">reference_existing_object</phrase></code>
          metafunctions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">T</phrase></code> is <code><phrase
                  role="identifier">U</phrase><phrase role="special">&amp;</phrase></code>
                  or <code><phrase role="identifier">U</phrase><phrase role="special">*</phrase></code>
                  for some <code><phrase role="identifier">U</phrase></code>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">typedef</phrase> <phrase role="identifier">to_python_indirect</phrase><phrase
                  role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
                  role="special">,</phrase> <phrase role="identifier">V</phrase><phrase
                  role="special">&gt;</phrase> <phrase role="identifier">type</phrase><phrase
                  role="special">;</phrase></code>, where V is a class whose static
                  execute function constructs an instance holder containing an unowned
                  <code><phrase role="identifier">U</phrase><phrase role="special">*</phrase></code>
                  pointing to the referent of the wrapped function's return value.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_.example">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_reference_existing_.example">Example</link></title>
          <para>
            In C++:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">reference_existing_object</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">utility</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// classes to wrap</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">Singleton</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">Singleton</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">x</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>

   <phrase role="keyword">int</phrase> <phrase role="identifier">exchange</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase>  <phrase role="comment">// set x and return the old value</phrase>
   <phrase role="special">{</phrase>
        <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">swap</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase><phrase role="special">);</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">n</phrase><phrase role="special">;</phrase>
   <phrase role="special">}</phrase>

   <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">Singleton</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">get_it</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">static</phrase> <phrase role="identifier">Singleton</phrase> <phrase role="identifier">just_one</phrase><phrase role="special">;</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">just_one</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="comment">// Wrapper code</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">singleton</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get_it&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">get_it</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">return_value_policy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">reference_existing_object</phrase><phrase role="special">&gt;());</phrase>

    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Singleton</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Singleton&quot;</phrase><phrase role="special">)</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;exchange&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Singleton</phrase><phrase role="special">::</phrase><phrase role="identifier">exchange</phrase><phrase role="special">)</phrase>
       <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">singleton</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">s1</phrase> <phrase role="special">=</phrase> <phrase role="identifier">singleton</phrase><phrase role="special">.</phrase><phrase role="identifier">get_it</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">s2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">singleton</phrase><phrase role="special">.</phrase><phrase role="identifier">get_it</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">id</phrase><phrase role="special">(</phrase><phrase role="identifier">s1</phrase><phrase role="special">)</phrase> <phrase role="special">==</phrase> <phrase role="identifier">id</phrase><phrase role="special">(</phrase><phrase role="identifier">s2</phrase><phrase role="special">)</phrase>  <phrase role="special">#</phrase> <phrase role="identifier">s1</phrase> <phrase role="keyword">and</phrase> <phrase role="identifier">s2</phrase> <phrase role="identifier">are</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">same</phrase> <phrase role="identifier">object</phrase>
<phrase role="number">0</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">s1</phrase><phrase role="special">.</phrase><phrase role="identifier">exchange</phrase><phrase role="special">(</phrase><phrase role="number">42</phrase><phrase role="special">)</phrase>   <phrase role="special">#</phrase> <phrase role="identifier">but</phrase> <phrase role="identifier">they</phrase> <phrase role="identifier">reference</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">same</phrase> <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">Singleton</phrase>
<phrase role="number">0</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">s2</phrase><phrase role="special">.</phrase><phrase role="identifier">exchange</phrase><phrase role="special">(</phrase><phrase role="number">99</phrase><phrase role="special">)</phrase>
<phrase role="number">42</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp">
        <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp">boost/python/return_by_value.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp.class_return_by_value">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp.class_return_by_value">Class
          <code><phrase role="identifier">return_by_value</phrase></code></link></title>
          <para>
            <code><phrase role="identifier">return_by_value</phrase></code> is a
            model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept">ResultConverterGenerator</link>
            which can be used to wrap C++ functions returning any reference or value
            type such that the return value is copied into a new Python object.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">return_by_value</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp.class_return_by_value_metafuncti">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp.class_return_by_value_metafuncti">Class
          <code><phrase role="identifier">return_by_value</phrase></code> metafunctions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">typedef</phrase> <phrase role="identifier">to_python_value</phrase><phrase
                  role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
                  role="special">&gt;</phrase> <phrase role="identifier">type</phrase><phrase
                  role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp.example">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_by_value_hpp.example">Example</link></title>
          <para>
            In C++:
          </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_by_value</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// classes to wrap</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">Bar</phrase> <phrase role="special">{</phrase> <phrase role="special">};</phrase>

<phrase role="identifier">Bar</phrase> <phrase role="identifier">global_bar</phrase><phrase role="special">;</phrase>

<phrase role="comment">// functions to wrap:</phrase>
<phrase role="identifier">Bar</phrase> <phrase role="identifier">b1</phrase><phrase role="special">();</phrase>
<phrase role="identifier">Bar</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">b2</phrase><phrase role="special">();</phrase>
<phrase role="identifier">Bar</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">b3</phrase><phrase role="special">();</phrase>

<phrase role="comment">// Wrapper code</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">def_void_function</phrase><phrase role="special">(</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">R</phrase> <phrase role="special">(*</phrase><phrase role="identifier">f</phrase><phrase role="special">)())</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">name</phrase><phrase role="special">,</phrase> <phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="identifier">return_value_policy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">return_by_value</phrase><phrase role="special">&gt;());</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">my_module</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Bar</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;Bar&quot;</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">def_void_function</phrase><phrase role="special">(</phrase><phrase role="string">&quot;b1&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">b1</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">def_void_function</phrase><phrase role="special">(</phrase><phrase role="string">&quot;b2&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">b2</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">def_void_function</phrase><phrase role="special">(</phrase><phrase role="string">&quot;b3&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">b3</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">my_module</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b</phrase> <phrase role="special">=</phrase> <phrase role="identifier">b1</phrase><phrase role="special">()</phrase> <phrase role="special">#</phrase> <phrase role="identifier">each</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">these</phrase> <phrase role="identifier">calls</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b</phrase> <phrase role="special">=</phrase> <phrase role="identifier">b2</phrase><phrase role="special">()</phrase> <phrase role="special">#</phrase> <phrase role="identifier">creates</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">brand</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b</phrase> <phrase role="special">=</phrase> <phrase role="identifier">b3</phrase><phrase role="special">()</phrase> <phrase role="special">#</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">Bar</phrase> <phrase role="identifier">object</phrase>
</programlisting>
        </section>
      </section>
      <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point">
        <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point">boost/python/return_opaque_pointer.hpp</link></title>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point.class_return_opaqe_pointer">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point.class_return_opaqe_pointer">Class
          <code><phrase role="identifier">return_opaqe_pointer</phrase></code></link></title>
          <para>
            return_opaque_pointer is a model of <link linkend="concepts.resultconverter.resultconvertergenerator_concept">ResultConverterGenerator</link>
            which can be used to wrap C++ functions returning pointers to undefined
            types such that the return value is copied into a new Python object.
          </para>
          <para>
            In addition to specifying the <code><phrase role="identifier">return_opaque_pointer</phrase></code>
            policy the <link linkend="to_from_python_type_conversion.boost_python_opaque_pointer_conv.macro_boost_python_opaque_specia"><code><phrase
            role="identifier">BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID</phrase></code></link>
            macro must be used to define specializations for the <link linkend="utility_and_infrastructure.boost_python_type_id_hpp.functions"><code><phrase
            role="identifier">type_id</phrase></code></link> function on the type
            pointed to by returned pointer.
          </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">return_opaque_pointer</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">R</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point.class_return_opaque_pointer_meta">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point.class_return_opaque_pointer_meta">Class
          <code><phrase role="identifier">return_opaque_pointer</phrase></code> metafunctions</link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">apply</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase
                  role="identifier">opaque_conversion_holder</phrase><phrase role="special">&lt;</phrase><phrase
                  role="identifier">R</phrase><phrase role="special">&gt;</phrase>
                  <phrase role="identifier">type</phrase><phrase role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point.example">
          <title><link linkend="function_invocation_and_creation.models_of_resultconvertergenerat.boost_python_return_opaque_point.example">Example</link></title>
          <para>
            In C++:
          </para>
<programlisting><phrase role="preprocessor"># include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_opaque_pointer</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor"># include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">def</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor"># include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor"># include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">typedef</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">opaque_</phrase> <phrase role="special">*</phrase><phrase role="identifier">opaque</phrase><phrase role="special">;</phrase>

<phrase role="identifier">opaque</phrase> <phrase role="identifier">the_op</phrase>   <phrase role="special">=</phrase> <phrase role="special">((</phrase><phrase role="identifier">opaque</phrase><phrase role="special">)</phrase> <phrase role="number">0x47110815</phrase><phrase role="special">);</phrase>

<phrase role="identifier">opaque</phrase> <phrase role="identifier">get</phrase> <phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">the_op</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">use</phrase> <phrase role="special">(</phrase><phrase role="identifier">opaque</phrase> <phrase role="identifier">op</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">op</phrase> <phrase role="special">!=</phrase> <phrase role="identifier">the_op</phrase><phrase role="special">)</phrase>
	<phrase role="keyword">throw</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">runtime_error</phrase> <phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;failed&quot;</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">failuse</phrase> <phrase role="special">(</phrase><phrase role="identifier">opaque</phrase> <phrase role="identifier">op</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase>
    <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">op</phrase> <phrase role="special">==</phrase> <phrase role="identifier">the_op</phrase><phrase role="special">)</phrase>
	<phrase role="keyword">throw</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">runtime_error</phrase> <phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;success&quot;</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID</phrase><phrase role="special">(</phrase><phrase role="identifier">opaque_</phrase><phrase role="special">)</phrase>

<phrase role="keyword">namespace</phrase> <phrase role="identifier">bpl</phrase> <phrase role="special">=</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">opaque_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">bpl</phrase><phrase role="special">::</phrase><phrase role="identifier">def</phrase> <phrase role="special">(</phrase>
        <phrase role="string">&quot;get&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;::</phrase><phrase role="identifier">get</phrase><phrase role="special">,</phrase> <phrase role="identifier">bpl</phrase><phrase role="special">::</phrase><phrase role="identifier">return_value_policy</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">bpl</phrase><phrase role="special">::</phrase><phrase role="identifier">return_opaque_pointer</phrase><phrase role="special">&gt;());</phrase>
    <phrase role="identifier">bpl</phrase><phrase role="special">::</phrase><phrase role="identifier">def</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;use&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;::</phrase><phrase role="identifier">use</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">bpl</phrase><phrase role="special">::</phrase><phrase role="identifier">def</phrase> <phrase role="special">(</phrase><phrase role="string">&quot;failuse&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;::</phrase><phrase role="identifier">failuse</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
          <para>
            Python code:
          </para>
<programlisting><phrase role="string">&quot;&quot;</phrase><phrase role="string">&quot;
&gt;&gt;&gt; from opaque_ext import *
&gt;&gt;&gt; #
&gt;&gt;&gt; # Check for correct conversion
&gt;&gt;&gt; use(get())
&gt;&gt;&gt; failuse(get())
Traceback (most recent call last):
        ...
RuntimeError: success
&gt;&gt;&gt; #
&gt;&gt;&gt; # Check that there is no conversion from integers ...
&gt;&gt;&gt; use(0)
Traceback (most recent call last):
        ...
TypeError: bad argument type for built-in operation
&gt;&gt;&gt; #
&gt;&gt;&gt; # ... and from strings to opaque objects
&gt;&gt;&gt; use(&quot;</phrase><phrase role="string">&quot;)
Traceback (most recent call last):
        ...
TypeError: bad argument type for built-in operation
&quot;</phrase><phrase role="string">&quot;&quot;</phrase>
<phrase role="identifier">def</phrase> <phrase role="identifier">run</phrase><phrase role="special">(</phrase><phrase role="identifier">args</phrase> <phrase role="special">=</phrase> <phrase role="identifier">None</phrase><phrase role="special">):</phrase>
    <phrase role="identifier">import</phrase> <phrase role="identifier">sys</phrase>
    <phrase role="identifier">import</phrase> <phrase role="identifier">doctest</phrase>

    <phrase role="keyword">if</phrase> <phrase role="identifier">args</phrase> <phrase role="identifier">is</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">None</phrase><phrase role="special">:</phrase>
        <phrase role="identifier">sys</phrase><phrase role="special">.</phrase><phrase role="identifier">argv</phrase> <phrase role="special">=</phrase> <phrase role="identifier">args</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">doctest</phrase><phrase role="special">.</phrase><phrase role="identifier">testmod</phrase><phrase role="special">(</phrase><phrase role="identifier">sys</phrase><phrase role="special">.</phrase><phrase role="identifier">modules</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">(</phrase><phrase role="identifier">__name__</phrase><phrase role="special">))</phrase>

<phrase role="keyword">if</phrase> <phrase role="identifier">__name__</phrase> <phrase role="special">==</phrase> <phrase role="char">'__main__'</phrase><phrase role="special">:</phrase>
    <phrase role="identifier">print</phrase> <phrase role="string">&quot;running...&quot;</phrase>
    <phrase role="identifier">import</phrase> <phrase role="identifier">sys</phrase>
    <phrase role="identifier">sys</phrase><phrase role="special">.</phrase><phrase role="identifier">exit</phrase><phrase role="special">(</phrase><phrase role="identifier">run</phrase><phrase role="special">()[</phrase><phrase role="number">0</phrase><phrase role="special">])</phrase>
</programlisting>
        </section>
      </section>
    </section>
  </chapter>
  <chapter id="to_from_python_type_conversion" last-revision="$Date: 2016/08/05 20:23:10 $"
  xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>To/From Python Type Conversion</title>
    <section id="to_from_python_type_conversion.boost_python_extract_hpp">
      <title><link linkend="to_from_python_type_conversion.boost_python_extract_hpp">boost/python/extract.hpp</link></title>
      <section id="to_from_python_type_conversion.boost_python_extract_hpp.introduction">
        <title><link linkend="to_from_python_type_conversion.boost_python_extract_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a mechanism for extracting C++ object values from generalized Python
          objects. Note that <code><phrase role="identifier">extract</phrase><phrase
          role="special">&lt;...&gt;</phrase></code> can also be used to &quot;downcast&quot;
          an <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link> to some specific <link
          linkend="concepts.objectwrapper">ObjectWrapper</link>. Because invoking
          a mutable python type with an argument of the same type (e.g. <code><phrase
          role="identifier">list</phrase><phrase role="special">([</phrase><phrase
          role="number">1</phrase><phrase role="special">,</phrase><phrase role="number">2</phrase><phrase
          role="special">]</phrase></code>) typically makes a copy of the argument
          object, this may be the only way to access the <link linkend="concepts.objectwrapper">ObjectWrapper</link>'s
          interface on the original object.
        </para>
      </section>
      <section id="to_from_python_type_conversion.boost_python_extract_hpp.class_template_extract">
        <title><link linkend="to_from_python_type_conversion.boost_python_extract_hpp.class_template_extract">Class
        template <code><phrase role="identifier">extract</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">T</phrase><phrase role="special">&gt;</phrase></code>
          can be used to extract a value of an arbitrary C++ type from an instance
          of <link linkend="object_wrappers.boost_python_object_hpp.class_object">object</link>.
          Two usages are supported:
        </para>
        <orderedlist>
          <listitem>
            <simpara>
              <code><phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase
              role="identifier">T</phrase><phrase role="special">&gt;(</phrase><phrase
              role="identifier">o</phrase><phrase role="special">)</phrase></code>
              is a temporary object which is implicitly convertible to <code><phrase
              role="identifier">T</phrase></code> (explicit conversion is also available
              through the object's function-call operator). However, if no conversion
              is available which can convert o to an object of type <code><phrase
              role="identifier">T</phrase></code>, a Python TypeError exception will
              be raised.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              <code><phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase
              role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase
              role="identifier">x</phrase><phrase role="special">(</phrase><phrase
              role="identifier">o</phrase><phrase role="special">);</phrase></code>
              constructs an extractor whose <code><phrase role="identifier">check</phrase><phrase
              role="special">()</phrase></code> member function can be used to ask
              whether a conversion is available without causing an exception to be
              thrown.
            </simpara>
          </listitem>
        </orderedlist>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">extract</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">unspecified</phrase> <phrase role="identifier">result_type</phrase><phrase role="special">;</phrase>

      <phrase role="identifier">extract</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*);</phrase>
      <phrase role="identifier">extract</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>

      <phrase role="identifier">result_type</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">operator</phrase> <phrase role="identifier">result_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

      <phrase role="keyword">bool</phrase> <phrase role="identifier">check</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="to_from_python_type_conversion.boost_python_extract_hpp.class_template_extract_construct">
        <title><link linkend="to_from_python_type_conversion.boost_python_extract_hpp.class_template_extract_construct">Class
        template <code><phrase role="identifier">extract</phrase></code> constructors
        and destructor</link></title>
<programlisting><phrase role="identifier">extract</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>
<phrase role="identifier">extract</phrase><phrase role="special">(</phrase><phrase role="identifier">object</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                The first form requires that p is non-null.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Stores a pointer to the Python object managed by its constructor
                argument. In particular, the reference count of the object is not
                incremented. The onus is on the user to be sure it is not destroyed
                before the extractor's conversion function is called.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="to_from_python_type_conversion.boost_python_extract_hpp.class_template_extract_observer_">
        <title><link linkend="to_from_python_type_conversion.boost_python_extract_hpp.class_template_extract_observer_">Class
        template <code><phrase role="identifier">extract</phrase></code> observer
        functions</link></title>
<programlisting><phrase role="identifier">result_type</phrase> <phrase role="keyword">operator</phrase><phrase role="special">()()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="keyword">operator</phrase> <phrase role="identifier">result_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Converts the stored pointer to result_type, which is either T or
                T const&amp;.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An object of result_type corresponding to the one referenced by the
                stored pointer.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Throws</term>
            <listitem>
              <para>
                <link linkend="high_level_components.boost_python_errors_hpp.class_error_already_set"><code><phrase
                role="identifier">error_already_set</phrase></code></link> and sets
                a <code><phrase role="identifier">TypeError</phrase></code> if no
                such conversion is available. May also emit other unspecified exceptions
                thrown by the converter which is actually used.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">bool</phrase> <phrase role="identifier">check</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Postconditions</term>
            <listitem>
              <para>
                None. In particular, note that a return value of true does not preclude
                an exception being thrown from operator result_type() or operator()().
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                false only if no conversion from the stored pointer to T is available.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="to_from_python_type_conversion.boost_python_extract_hpp.example">
        <title><link linkend="to_from_python_type_conversion.boost_python_extract_hpp.example">Example</link></title>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">cstdio</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="keyword">int</phrase> <phrase role="identifier">Print</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase> <phrase role="identifier">s</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="comment">// extract a C string from the Python string object</phrase>
   <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">c_str</phrase> <phrase role="special">=</phrase> <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">s</phrase><phrase role="special">);</phrase>

   <phrase role="comment">// Print it using printf</phrase>
   <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">printf</phrase><phrase role="special">(</phrase><phrase role="string">&quot;%s\n&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">c_str</phrase><phrase role="special">);</phrase>

   <phrase role="comment">// Get the Python string's length and convert it to an int</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">s</phrase><phrase role="special">.</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;__len__&quot;</phrase><phrase role="special">)())</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          The following example shows how extract can be used along with <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel"><code><phrase
          role="identifier">class_</phrase><phrase role="special">&lt;...&gt;</phrase></code></link>
          to create and access an instance of a wrapped C++ class.
        </para>
<programlisting><phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">v</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
   <phrase role="keyword">int</phrase> <phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">v</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
 <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
   <phrase role="keyword">int</phrase> <phrase role="identifier">v</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">extract_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">object</phrase> <phrase role="identifier">x_class</phrase><phrase role="special">(</phrase>
       <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
          <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;value&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">value</phrase><phrase role="special">))</phrase>
          <phrase role="special">;</phrase>

    <phrase role="comment">// Instantiate an X object through the Python interface. </phrase>
    <phrase role="comment">// Its lifetime is now managed by x_obj.</phrase>
    <phrase role="identifier">object</phrase> <phrase role="identifier">x_obj</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x_class</phrase><phrase role="special">(</phrase><phrase role="number">3</phrase><phrase role="special">);</phrase>

    <phrase role="comment">// Get a reference to the C++ object out of the Python object</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&amp;&gt;(</phrase><phrase role="identifier">x_obj</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">assert</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">value</phrase><phrase role="special">()</phrase> <phrase role="special">==</phrase> <phrase role="number">3</phrase><phrase role="special">);</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="to_from_python_type_conversion.boost_python_implicit_hpp">
      <title><link linkend="to_from_python_type_conversion.boost_python_implicit_hpp">boost/python/implicit.hpp</link></title>
      <section id="to_from_python_type_conversion.boost_python_implicit_hpp.introduction">
        <title><link linkend="to_from_python_type_conversion.boost_python_implicit_hpp.introduction">Introduction</link></title>
        <para>
          <code><phrase role="identifier">implicitly_convertible</phrase></code>
          allows Boost.Python to implicitly take advantage of a C++ implicit or explicit
          conversion when matching Python objects to C++ argument types.
        </para>
      </section>
      <section id="to_from_python_type_conversion.boost_python_implicit_hpp.function_template_implicit_conve">
        <title><link linkend="to_from_python_type_conversion.boost_python_implicit_hpp.function_template_implicit_conve">Function
        template <code><phrase role="identifier">implicit_convertible</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Source</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Target</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">implicitly_convertible</phrase><phrase role="special">();</phrase>
</programlisting>
        <informaltable frame="all">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>
                    Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Description
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    Source
                  </para>
                </entry>
                <entry>
                  <para>
                    The source type of the implicit conversion
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Target
                  </para>
                </entry>
                <entry>
                  <para>
                    The target type of the implicit conversion
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                The declaration <code><phrase role="identifier">Target</phrase>
                <phrase role="identifier">t</phrase><phrase role="special">(</phrase><phrase
                role="identifier">s</phrase><phrase role="special">);</phrase></code>,
                where s is of type Source, is valid.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                registers an rvalue <code><phrase role="identifier">from_python</phrase></code>
                converter to Target which can succeed for any <code><phrase role="identifier">PyObject</phrase><phrase
                role="special">*</phrase> <phrase role="identifier">p</phrase></code>
                iff there exists any registered converter which can produce Source
                rvalues
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                C++ users expect to be able to take advantage of the same sort of
                interoperability in Python as they do in C++.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="to_from_python_type_conversion.boost_python_implicit_hpp.example">
        <title><link linkend="to_from_python_type_conversion.boost_python_implicit_hpp.example">Example</link></title>
        <para>
          In C++:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">implicit</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">v</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="keyword">operator</phrase> <phrase role="keyword">int</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">v</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">v</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">x_value</phrase><phrase role="special">(</phrase><phrase role="identifier">X</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">v</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">X</phrase> <phrase role="identifier">make_x</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">n</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">implicit_ext</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;x_value&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">x_value</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;make_x&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_x</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
        <phrase role="special">;</phrase>

    <phrase role="identifier">implicitly_convertible</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">,</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;();</phrase>
    <phrase role="identifier">implicitly_convertible</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">,</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;();</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          In Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">implicit_ext</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x_value</phrase><phrase role="special">(</phrase><phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="number">42</phrase><phrase role="special">))</phrase>
<phrase role="number">42</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x_value</phrase><phrase role="special">(</phrase><phrase role="number">42</phrase><phrase role="special">)</phrase>
<phrase role="number">42</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">make_x</phrase><phrase role="special">(</phrase><phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="number">42</phrase><phrase role="special">))</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x_value</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase>
<phrase role="number">42</phrase>
</programlisting>
      </section>
    </section>
    <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_">
      <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_">boost/python/lvalue_from_pytype.hpp</link></title>
      <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.introduction">
        <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/lvalue_from_pytype.hpp&gt; supplies a facility for extracting
          C++ objects from within Python instances of a given type. This is typically
          useful for dealing with &quot;traditional&quot; Python extension types.
        </para>
      </section>
      <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_lvalue_from_pytyp">
        <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_lvalue_from_pytyp">Class
        template <code><phrase role="identifier">lvalue_from_pytype</phrase></code></link></title>
        <para>
          Class template lvalue_from_pytype will register from_python converters
          which, given an object of the given Python type, can extract references
          and pointers to a particular C++ type. Its template arguments are:
        </para>
<programlisting><phrase role="identifier">In</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">table</phrase> <phrase role="identifier">below</phrase><phrase role="special">,</phrase> <phrase role="identifier">x</phrase> <phrase role="identifier">denotes</phrase> <phrase role="identifier">an</phrase> <phrase role="identifier">object</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">type</phrase> <phrase role="identifier">PythonObject</phrase><phrase role="special">&amp;</phrase>
</programlisting>
        <informaltable frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>
                    Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    Extractor
                  </para>
                </entry>
                <entry>
                  <para>
                    a model of <link linkend="concepts.extractor"><code><phrase role="identifier">Extractor</phrase></code></link>
                    whose execute function returns a reference type.
                  </para>
                </entry>
                <entry>
                  <para>
                    Extracts the lvalue from the Python object once its type has
                    been confirmed
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    python_type
                  </para>
                </entry>
                <entry>
                  <para>
                    A compile-time constant <ulink url="http://www.python.org/doc/2.2/ext/dnt-type-methods.html"><code><phrase
                    role="identifier">PyTypeObject</phrase><phrase role="special">*</phrase></code></ulink>
                  </para>
                </entry>
                <entry>
                  <para>
                    The Python type of instances convertible by this converter. Python
                    subtypes are also convertible.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Extractor</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyTypeObject</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">python_type</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">lvalue_from_pytype</phrase>
   <phrase role="special">{</phrase>
       <phrase role="identifier">lvalue_from_pytype</phrase><phrase role="special">();</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_lvalue_from_pytyp.class_template_lvalue_from_pytyp">
          <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_lvalue_from_pytyp.class_template_lvalue_from_pytyp">Class
          template <code><phrase role="identifier">lvalue_from_pytype</phrase></code>
          constructor</link></title>
<programlisting><phrase role="identifier">lvalue_from_pytype</phrase><phrase role="special">();</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Registers converters which can convert Python objects of the given
                  type to lvalues of the type returned by Extractor::execute.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_identity">
        <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_identity">Class
        template <code><phrase role="identifier">extract_identity</phrase></code></link></title>
        <para>
          extract_identity is a model of <link linkend="concepts.extractor"><code><phrase
          role="identifier">Extractor</phrase></code></link> which can be used in
          the common case where the C++ type to be extracted is the same as the Python
          object type.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">InstanceType</phrase><phrase role="special">&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">extract_identity</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">InstanceType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">execute</phrase><phrase role="special">(</phrase><phrase role="identifier">InstanceType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">c</phrase><phrase role="special">);</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_identity.class_template_extract_identity_">
          <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_identity.class_template_extract_identity_">Class
          template <code><phrase role="identifier">extract_identity</phrase></code>
          static functions</link></title>
<programlisting><phrase role="identifier">InstanceType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">execute</phrase><phrase role="special">(</phrase><phrase role="identifier">InstanceType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">c</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  c
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_member">
        <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_member">Class
        template <code><phrase role="identifier">extract_member</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">extract_member</phrase></code> is a model
          of <link linkend="concepts.extractor"><code><phrase role="identifier">Extractor</phrase></code></link>
          which can be used in the common case in the common case where the C++ type
          to be extracted is a member of the Python object.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">InstanceType</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">MemberType</phrase><phrase role="special">,</phrase> <phrase role="identifier">MemberType</phrase> <phrase role="special">(</phrase><phrase role="identifier">InstanceType</phrase><phrase role="special">::*</phrase><phrase role="identifier">member</phrase><phrase role="special">)&gt;</phrase>
   <phrase role="keyword">struct</phrase> <phrase role="identifier">extract_member</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">static</phrase> <phrase role="identifier">MemberType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">execute</phrase><phrase role="special">(</phrase><phrase role="identifier">InstanceType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">c</phrase><phrase role="special">);</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_member.class_template_extract_member_st">
          <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_extract_member.class_template_extract_member_st">Class
          template <code><phrase role="identifier">extract_member</phrase></code>
          static functions</link></title>
<programlisting><phrase role="keyword">static</phrase> <phrase role="identifier">MemberType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">execute</phrase><phrase role="special">(</phrase><phrase role="identifier">InstanceType</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">c</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">c</phrase><phrase role="special">.*</phrase><phrase
                  role="identifier">member</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.example">
        <title><link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.example">Example</link></title>
        <para>
          This example presumes that someone has implemented the standard noddy example
          module from the Python documentation, and we want to build a module which
          manipulates Noddys. Since noddy_NoddyObject is so simple that it carries
          no interesting information, the example is a bit contrived: it assumes
          you want to keep track of one particular object for some reason. This module
          would have to be dynamically linked to the module which defines noddy_NoddyType.
        </para>
        <para>
          In C++:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">handle</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">lvalue_from_pytype</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// definition lifted from the Python docs</phrase>
<phrase role="keyword">typedef</phrase> <phrase role="keyword">struct</phrase> <phrase role="special">{</phrase>
   <phrase role="identifier">PyObject_HEAD</phrase>
<phrase role="special">}</phrase> <phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="keyword">static</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">cache</phrase><phrase role="special">;</phrase>

<phrase role="keyword">bool</phrase> <phrase role="identifier">is_cached</phrase><phrase role="special">(</phrase><phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase> <phrase role="special">==</phrase> <phrase role="identifier">cache</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">();</phrase>
<phrase role="special">}</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">set_cache</phrase><phrase role="special">(</phrase><phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">cache</phrase> <phrase role="special">=</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">noddy_cache</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;is_cached&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">is_cached</phrase><phrase role="special">);</phrase>
   <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;set_cache&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">set_cache</phrase><phrase role="special">);</phrase>

   <phrase role="comment">// register Noddy lvalue converter</phrase>
   <phrase role="identifier">lvalue_from_pytype</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">extract_identity</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">&gt;,&amp;</phrase><phrase role="identifier">noddy_NoddyType</phrase><phrase role="special">&gt;();</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          In Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">noddy</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">n</phrase> <phrase role="special">=</phrase> <phrase role="identifier">noddy</phrase><phrase role="special">.</phrase><phrase role="identifier">new_noddy</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">noddy_cache</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">noddy_cache</phrase><phrase role="special">.</phrase><phrase role="identifier">is_cached</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="number">0</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">noddy_cache</phrase><phrase role="special">.</phrase><phrase role="identifier">set_cache</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">noddy_cache</phrase><phrase role="special">.</phrase><phrase role="identifier">is_cached</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special">)</phrase>
<phrase role="number">1</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">noddy_cache</phrase><phrase role="special">.</phrase><phrase role="identifier">is_cached</phrase><phrase role="special">(</phrase><phrase role="identifier">noddy</phrase><phrase role="special">.</phrase><phrase role="identifier">new_noddy</phrase><phrase role="special">())</phrase>
<phrase role="number">0</phrase>
</programlisting>
      </section>
    </section>
    <section id="to_from_python_type_conversion.boost_python_opaque_pointer_conv">
      <title><link linkend="to_from_python_type_conversion.boost_python_opaque_pointer_conv">boost/python/opaque_pointer_converter.hpp</link></title>
      <section id="to_from_python_type_conversion.boost_python_opaque_pointer_conv.introduction">
        <title><link linkend="to_from_python_type_conversion.boost_python_opaque_pointer_conv.introduction">Introduction</link></title>
        <para>
          <code><phrase role="identifier">opaque</phrase><phrase role="special">&lt;&gt;</phrase></code>
          registers itself as a converter from Python objects to pointers to undefined
          types and vice versa.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Pointee</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">struct</phrase> <phrase role="identifier">opaque</phrase>
    <phrase role="special">{</phrase>
        <phrase role="identifier">opaque</phrase><phrase role="special">();</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
      </section>
      <section id="to_from_python_type_conversion.boost_python_opaque_pointer_conv.class_template_opaque_constructo">
        <title><link linkend="to_from_python_type_conversion.boost_python_opaque_pointer_conv.class_template_opaque_constructo">Class
        template <code><phrase role="identifier">opaque</phrase></code> constructor</link></title>
<programlisting><phrase role="identifier">opaque</phrase><phrase role="special">();</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                * Registers the instance as a <link linkend="to_from_python_type_conversion.boost_python_lvalue_from_pytype_.class_template_lvalue_from_pytyp"><code><phrase
                role="identifier">lvalue_from_pytype</phrase></code></link> converter
                from Python objects into opaque pointers. The Python Objects created
                are named after the type pointed to by the opaque pointer being wrapped.
                * Registers the instance as a <link linkend="to_from_python_type_conversion.boost_python_to_python_converter.class_template_to_python_convert"><code><phrase
                role="identifier">to_python_converter</phrase></code></link> from
                opaque pointers to Python objects.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <note>
          <para>
            If there is already an instance registered by another module, this instance
            doesn't try to register again in order to avoid warnings about multiple
            registrations.
          </para>
        </note>
      </section>
      <section id="to_from_python_type_conversion.boost_python_opaque_pointer_conv.macro_boost_python_opaque_specia">
        <title><link linkend="to_from_python_type_conversion.boost_python_opaque_pointer_conv.macro_boost_python_opaque_specia">Macro
        <code><phrase role="identifier">BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID</phrase><phrase
        role="special">(</phrase><phrase role="identifier">Pointee</phrase><phrase
        role="special">)</phrase></code></link></title>
        <para>
          This macro must be used to define specializations of the <link linkend="utility_and_infrastructure.boost_python_type_id_hpp.functions"><code><phrase
          role="identifier">type_id</phrase></code></link> function which can't be
          instantiated for incomplete types.
        </para>
        <note>
          <para>
            The macro must be invoked in every translation unit which uses the opaque
            converter.
          </para>
        </note>
      </section>
    </section>
    <section id="to_from_python_type_conversion.boost_python_to_python_converter">
      <title><link linkend="to_from_python_type_conversion.boost_python_to_python_converter">boost/python/to_python_converter.hpp</link></title>
      <section id="to_from_python_type_conversion.boost_python_to_python_converter.introduction">
        <title><link linkend="to_from_python_type_conversion.boost_python_to_python_converter.introduction">Introduction</link></title>
        <para>
          <code><phrase role="identifier">to_python_converter</phrase></code> registers
          a conversion from objects of a given C++ type into a Python object.
        </para>
      </section>
      <section id="to_from_python_type_conversion.boost_python_to_python_converter.class_template_to_python_convert">
        <title><link linkend="to_from_python_type_conversion.boost_python_to_python_converter.class_template_to_python_convert">Class
        template <code><phrase role="identifier">to_python_converter</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">to_python_converter</phrase></code> adds
          a wrapper around a static member function of its second template parameter,
          handling low-level details such as insertion into the converter registry.
        </para>
        <para>
          In the table below, x denotes an object of type T
        </para>
        <informaltable frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>
                    Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Description
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    T
                  </para>
                </entry>
                <entry>
                </entry>
                <entry>
                  <para>
                    The C++ type of the source object in the conversion
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Conversion
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase>
                    <phrase role="identifier">p</phrase> <phrase role="special">=</phrase>
                    <phrase role="identifier">Conversion</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">convert</phrase><phrase role="special">(</phrase><phrase
                    role="identifier">x</phrase><phrase role="special">)</phrase></code>,
                    <code><phrase role="keyword">if</phrase> <phrase role="identifier">p</phrase>
                    <phrase role="special">==</phrase> <phrase role="number">0</phrase></code>,
                    <code><phrase role="identifier">PyErr_Occurred</phrase><phrase
                    role="special">()</phrase> <phrase role="special">!=</phrase>
                    <phrase role="number">0</phrase></code>.
                  </para>
                </entry>
                <entry>
                  <para>
                    A class type whose static member function convert does the real
                    work of the conversion.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    bool has_get_pytype=false
                  </para>
                </entry>
                <entry>
                  <para>
                    <code><phrase role="identifier">PyTypeObject</phrase> <phrase
                    role="keyword">const</phrase> <phrase role="special">*</phrase>
                    <phrase role="identifier">p</phrase> <phrase role="special">=</phrase>
                    <phrase role="identifier">Conversion</phrase><phrase role="special">::</phrase><phrase
                    role="identifier">get_pytype</phrase><phrase role="special">()</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional member - if Conversion has <code><phrase role="identifier">get_pytype</phrase></code>
                    member supply <code><phrase role="keyword">true</phrase></code>
                    for this parameters. If present <code><phrase role="identifier">get_pytype</phrase></code>
                    is used to document the return type of functions using this conversion.
                    The <code><phrase role="identifier">get_pytype</phrase></code>
                    may be implemented using the classes and functions from pytype_function.hpp
                    NOTE : For backward compatibility this parameter may be passed
                    after checking if BOOST_PYTHON_SUPPORTS_PY_SIGNATURES is defined
                    (see <link linkend="function_invocation_and_creation.function_documentation.boost_python_pytype_function_hpp.example">here</link>).
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Conversion</phrase><phrase role="special">,</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">convertion_has_get_pytype_member</phrase><phrase role="special">=</phrase><phrase role="keyword">false</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">to_python_converter</phrase>
  <phrase role="special">{</phrase>
      <phrase role="identifier">to_python_converter</phrase><phrase role="special">();</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="to_from_python_type_conversion.boost_python_to_python_converter.class_template_to_python_convert.class_template_to_python_convert">
          <title><link linkend="to_from_python_type_conversion.boost_python_to_python_converter.class_template_to_python_convert.class_template_to_python_convert">Class
          template <code><phrase role="identifier">to_python_converter</phrase></code>
          constructor</link></title>
<programlisting><phrase role="identifier">to_python_converter</phrase><phrase role="special">();</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  Registers a <code><phrase role="identifier">to_python</phrase></code>
                  converter which uses <code><phrase role="identifier">Conversion</phrase><phrase
                  role="special">::</phrase><phrase role="identifier">convert</phrase><phrase
                  role="special">()</phrase></code> to do its work.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="to_from_python_type_conversion.boost_python_to_python_converter.example">
        <title><link linkend="to_from_python_type_conversion.boost_python_to_python_converter.example">Example</link></title>
        <para>
          This example presumes that someone has implemented the standard noddy example
          module from the Python documentation, and placed the corresponding declarations
          in &quot;noddy.h&quot;. Because noddy_NoddyObject is the ultimate trivial
          extension type, the example is a bit contrived: it wraps a function for
          which all information is contained in the type of its return value.
        </para>
        <para>
          In C++:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="string">&quot;noddy.h&quot;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">tag</phrase> <phrase role="special">{};</phrase>
<phrase role="identifier">tag</phrase> <phrase role="identifier">make_tag</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">tag</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">tag_to_noddy</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">static</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">convert</phrase><phrase role="special">(</phrase><phrase role="identifier">tag</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="identifier">PyObject_New</phrase><phrase role="special">(</phrase><phrase role="identifier">noddy_NoddyObject</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">noddy_NoddyType</phrase><phrase role="special">);</phrase>
    <phrase role="special">}</phrase>
    <phrase role="keyword">static</phrase> <phrase role="identifier">PyTypeObject</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">get_pytype</phrase><phrase role="special">()</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">return</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">noddy_NoddyType</phrase><phrase role="special">;</phrase>
    <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">to_python_converter</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;make_tag&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">make_tag</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">to_python_converter</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">tag</phrase><phrase role="special">,</phrase> <phrase role="identifier">tag_to_noddy</phrase><phrase role="special">,</phrase> <phrase role="keyword">true</phrase><phrase role="special">&gt;();</phrase> <phrase role="comment">//&quot;true&quot; because tag_to_noddy has member get_pytype</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          In Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">to_python_converter</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">def</phrase> <phrase role="identifier">always_none</phrase><phrase role="special">():</phrase>
<phrase role="special">...</phrase>     <phrase role="keyword">return</phrase> <phrase role="identifier">None</phrase>
<phrase role="special">...</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">def</phrase> <phrase role="identifier">choose_function</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">):</phrase>
<phrase role="special">...</phrase>     <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">x</phrase> <phrase role="special">%</phrase> <phrase role="number">2</phrase> <phrase role="special">!=</phrase> <phrase role="number">0</phrase><phrase role="special">):</phrase>
<phrase role="special">...</phrase>         <phrase role="keyword">return</phrase> <phrase role="identifier">to_python_converter</phrase><phrase role="special">.</phrase><phrase role="identifier">make_tag</phrase>
<phrase role="special">...</phrase>     <phrase role="keyword">else</phrase><phrase role="special">:</phrase>
<phrase role="special">...</phrase>         <phrase role="keyword">return</phrase> <phrase role="identifier">always_none</phrase>
<phrase role="special">...</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">a</phrase> <phrase role="special">=</phrase> <phrase role="special">[</phrase> <phrase role="identifier">choose_function</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="keyword">for</phrase> <phrase role="identifier">x</phrase> <phrase role="identifier">in</phrase> <phrase role="identifier">range</phrase><phrase role="special">(</phrase><phrase role="number">5</phrase><phrase role="special">)</phrase> <phrase role="special">]</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">b</phrase> <phrase role="special">=</phrase> <phrase role="special">[</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="keyword">for</phrase> <phrase role="identifier">f</phrase> <phrase role="identifier">in</phrase> <phrase role="identifier">a</phrase> <phrase role="special">]</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">type</phrase><phrase role="special">(</phrase><phrase role="identifier">b</phrase><phrase role="special">[</phrase><phrase role="number">0</phrase><phrase role="special">])</phrase>
<phrase role="special">&lt;</phrase><phrase role="identifier">type</phrase> <phrase role="char">'NoneType'</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">type</phrase><phrase role="special">(</phrase><phrase role="identifier">b</phrase><phrase role="special">[</phrase><phrase role="number">1</phrase><phrase role="special">])</phrase>
<phrase role="special">&lt;</phrase><phrase role="identifier">type</phrase> <phrase role="char">'Noddy'</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">type</phrase><phrase role="special">(</phrase><phrase role="identifier">b</phrase><phrase role="special">[</phrase><phrase role="number">2</phrase><phrase role="special">])</phrase>
<phrase role="special">&lt;</phrase><phrase role="identifier">type</phrase> <phrase role="char">'NoneType'</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">type</phrase><phrase role="special">(</phrase><phrase role="identifier">b</phrase><phrase role="special">[</phrase><phrase role="number">3</phrase><phrase role="special">])</phrase>
<phrase role="special">&lt;</phrase><phrase role="identifier">type</phrase> <phrase role="char">'Noddy'</phrase><phrase role="special">&gt;</phrase>
</programlisting>
      </section>
    </section>
    <section id="to_from_python_type_conversion.boost_python_register_ptr_to_pyt">
      <title><link linkend="to_from_python_type_conversion.boost_python_register_ptr_to_pyt">boost/python/register_ptr_to_python.hpp</link></title>
      <section id="to_from_python_type_conversion.boost_python_register_ptr_to_pyt.introduction">
        <title><link linkend="to_from_python_type_conversion.boost_python_register_ptr_to_pyt.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/register_ptr_to_python.hpp&gt; supplies <code><phrase
          role="identifier">register_ptr_to_python</phrase></code>, a function template
          which registers a conversion for smart pointers to Python. The resulting
          Python object holds a copy of the converted smart pointer, but behaves
          as though it were a wrapped copy of the pointee. If the pointee type has
          virtual functions and the class representing its dynamic (most-derived)
          type has been wrapped, the Python object will be an instance of the wrapper
          for the most-derived type. More than one smart pointer type for a pointee's
          class can be registered.
        </para>
        <para>
          Note that in order to convert a Python <code><phrase role="identifier">X</phrase></code>
          object to a <code><phrase role="identifier">smart_ptr</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">X</phrase><phrase role="special">&gt;&amp;</phrase></code>
          (non-const reference), the embedded C++ object must be held by <code><phrase
          role="identifier">smart_ptr</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">X</phrase><phrase role="special">&gt;</phrase></code>,
          and that when wrapped objects are created by calling the constructor from
          Python, how they are held is determined by the HeldType parameter to <code><phrase
          role="identifier">class_</phrase><phrase role="special">&lt;...&gt;</phrase></code>
          instances.
        </para>
      </section>
      <section id="to_from_python_type_conversion.boost_python_register_ptr_to_pyt.function_register_ptr_to_python">
        <title><link linkend="to_from_python_type_conversion.boost_python_register_ptr_to_pyt.function_register_ptr_to_python">Function
        <code><phrase role="identifier">register_ptr_to_python</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">P</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">void</phrase> <phrase role="identifier">register_ptr_to_python</phrase><phrase role="special">()</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Requires</term>
            <listitem>
              <para>
                <code><phrase role="identifier">P</phrase></code> is <link linkend="concepts.dereferenceable">Dereferenceable</link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Allows conversions to-python of P instances.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="to_from_python_type_conversion.boost_python_register_ptr_to_pyt.example">
        <title><link linkend="to_from_python_type_conversion.boost_python_register_ptr_to_pyt.example">Example</link></title>
        <para>
          Here is an example of a module that contains a class A with virtual functions
          and some functions that work with boost::shared_ptr&lt;A&gt;.
        </para>
        <para>
          In C++:
        </para>
<programlisting><phrase role="keyword">struct</phrase> <phrase role="identifier">A</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">virtual</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">New</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;(</phrase> <phrase role="keyword">new</phrase> <phrase role="identifier">A</phrase><phrase role="special">()</phrase> <phrase role="special">);</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">Ok</phrase><phrase role="special">(</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">a</phrase> <phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">a</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">f</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">int</phrase> <phrase role="identifier">Fail</phrase><phrase role="special">(</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;&amp;</phrase> <phrase role="identifier">a</phrase> <phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">a</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">f</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">A_Wrapper</phrase><phrase role="special">:</phrase> <phrase role="identifier">A</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">A_Wrapper</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">self_</phrase><phrase role="special">):</phrase> <phrase role="identifier">self</phrase><phrase role="special">(</phrase><phrase role="identifier">self_</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">f</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">call_method</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;f&quot;</phrase><phrase role="special">);</phrase> <phrase role="special">}</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">default_f</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">A</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">();</phrase> <phrase role="special">}</phrase>
    <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">register_ptr</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">,</phrase> <phrase role="identifier">A_Wrapper</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;A&quot;</phrase><phrase role="special">)</phrase>
        <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">A</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">A_Wrapper</phrase><phrase role="special">::</phrase><phrase role="identifier">default_f</phrase><phrase role="special">)</phrase>
    <phrase role="special">;</phrase>

    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;New&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">New</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;Ok&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Call</phrase><phrase role="special">);</phrase>
    <phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;Fail&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Fail</phrase><phrase role="special">);</phrase>

    <phrase role="identifier">register_ptr_to_python</phrase><phrase role="special">&lt;</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;();</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          In Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">register_ptr</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">a</phrase> <phrase role="special">=</phrase> <phrase role="identifier">A</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">Ok</phrase><phrase role="special">(</phrase><phrase role="identifier">a</phrase><phrase role="special">)</phrase>     <phrase role="special">#</phrase> <phrase role="identifier">ok</phrase><phrase role="special">,</phrase> <phrase role="identifier">passed</phrase> <phrase role="identifier">as</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase>
<phrase role="number">0</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">Fail</phrase><phrase role="special">(</phrase><phrase role="identifier">a</phrase><phrase role="special">)</phrase>   <phrase role="special">#</phrase> <phrase role="identifier">passed</phrase> <phrase role="identifier">as</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;&amp;,</phrase> <phrase role="keyword">and</phrase> <phrase role="identifier">was</phrase> <phrase role="identifier">created</phrase> <phrase role="identifier">in</phrase> <phrase role="identifier">Python</phrase><phrase role="special">!</phrase>
<phrase role="identifier">Traceback</phrase> <phrase role="special">(</phrase><phrase role="identifier">most</phrase> <phrase role="identifier">recent</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">last</phrase><phrase role="special">):</phrase>
  <phrase role="identifier">File</phrase> <phrase role="string">&quot;&lt;stdin&gt;&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">line</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="identifier">in</phrase> <phrase role="special">?</phrase>
<phrase role="identifier">TypeError</phrase><phrase role="special">:</phrase> <phrase role="identifier">bad</phrase> <phrase role="identifier">argument</phrase> <phrase role="identifier">type</phrase> <phrase role="keyword">for</phrase> <phrase role="identifier">built</phrase><phrase role="special">-</phrase><phrase role="identifier">in</phrase> <phrase role="identifier">operation</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">na</phrase> <phrase role="special">=</phrase> <phrase role="identifier">New</phrase><phrase role="special">()</phrase>   <phrase role="special">#</phrase> <phrase role="identifier">now</phrase> <phrase role="string">&quot;na&quot;</phrase> <phrase role="identifier">is</phrase> <phrase role="identifier">actually</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">Ok</phrase><phrase role="special">(</phrase><phrase role="identifier">a</phrase><phrase role="special">)</phrase>
<phrase role="number">0</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">Fail</phrase><phrase role="special">(</phrase><phrase role="identifier">a</phrase><phrase role="special">)</phrase>
<phrase role="number">0</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase>
</programlisting>
        <para>
          If shared_ptr&lt;A&gt; is registered as follows:
        </para>
<programlisting><phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">,</phrase> <phrase role="identifier">A_Wrapper</phrase><phrase role="special">,</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;A&quot;</phrase><phrase role="special">)</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;f&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">A</phrase><phrase role="special">::</phrase><phrase role="identifier">f</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">A_Wrapper</phrase><phrase role="special">::</phrase><phrase role="identifier">default_f</phrase><phrase role="special">)</phrase>
<phrase role="special">;</phrase>
</programlisting>
        <para>
          There will be an error when trying to convert shared_ptr&lt;A&gt; to shared_ptr&lt;A_Wrapper&gt;:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">a</phrase> <phrase role="special">=</phrase> <phrase role="identifier">New</phrase><phrase role="special">()</phrase>
<phrase role="identifier">Traceback</phrase> <phrase role="special">(</phrase><phrase role="identifier">most</phrase> <phrase role="identifier">recent</phrase> <phrase role="identifier">call</phrase> <phrase role="identifier">last</phrase><phrase role="special">):</phrase>
<phrase role="identifier">File</phrase> <phrase role="string">&quot;&lt;stdin&gt;&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">line</phrase> <phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="identifier">in</phrase> <phrase role="special">?</phrase>
<phrase role="identifier">TypeError</phrase><phrase role="special">:</phrase> <phrase role="identifier">No</phrase> <phrase role="identifier">to_python</phrase> <phrase role="special">(</phrase><phrase role="identifier">by</phrase><phrase role="special">-</phrase><phrase role="identifier">value</phrase><phrase role="special">)</phrase> <phrase role="identifier">converter</phrase> <phrase role="identifier">found</phrase> <phrase role="keyword">for</phrase> <phrase role="identifier">C</phrase><phrase role="special">++</phrase> <phrase role="identifier">type</phrase><phrase role="special">:</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">struct</phrase> <phrase role="identifier">A</phrase><phrase role="special">&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase>
</programlisting>
      </section>
    </section>
  </chapter>
  <chapter id="embedding" last-revision="$Date: 2016/08/05 20:23:10 $" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Embedding</title>
    <section id="embedding.boost_python_exec_hpp">
      <title><link linkend="embedding.boost_python_exec_hpp">boost/python/exec.hpp</link></title>
      <section id="embedding.boost_python_exec_hpp.introduction">
        <title><link linkend="embedding.boost_python_exec_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a mechanism for embedding the python interpreter into C++ code.
        </para>
      </section>
      <section id="embedding.boost_python_exec_hpp.function_eval">
        <title><link linkend="embedding.boost_python_exec_hpp.function_eval">Function
        <code><phrase role="identifier">eval</phrase></code></link></title>
<programlisting><phrase role="identifier">object</phrase> <phrase role="identifier">eval</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase> <phrase role="identifier">expression</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">object</phrase> <phrase role="identifier">globals</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">(),</phrase>
            <phrase role="identifier">object</phrase> <phrase role="identifier">locals</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">());</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Evaluate Python expression from expression in the context specified
                by the dictionaries globals and locals.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the value of the expression.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="embedding.boost_python_exec_hpp.function_exec">
        <title><link linkend="embedding.boost_python_exec_hpp.function_exec">Function
        <code><phrase role="identifier">exec</phrase></code></link></title>
<programlisting><phrase role="identifier">object</phrase> <phrase role="identifier">exec</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase> <phrase role="identifier">code</phrase><phrase role="special">,</phrase>
            <phrase role="identifier">object</phrase> <phrase role="identifier">globals</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">(),</phrase>
            <phrase role="identifier">object</phrase> <phrase role="identifier">locals</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">());</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Execute Python source code from code in the context specified by
                the dictionaries globals and locals.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the result of executing the code.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="embedding.boost_python_exec_hpp.function_exec_file">
        <title><link linkend="embedding.boost_python_exec_hpp.function_exec_file">Function
        <code><phrase role="identifier">exec_file</phrase></code></link></title>
<programlisting><phrase role="identifier">object</phrase> <phrase role="identifier">exec_file</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase> <phrase role="identifier">filename</phrase><phrase role="special">,</phrase>
                 <phrase role="identifier">object</phrase> <phrase role="identifier">globals</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">(),</phrase>
                 <phrase role="identifier">object</phrase> <phrase role="identifier">locals</phrase> <phrase role="special">=</phrase> <phrase role="identifier">object</phrase><phrase role="special">());</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Execute Python source code from the file named by filename in the
                context specified by the dictionaries globals and locals.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds the result of executing the code.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="embedding.boost_python_exec_hpp.examples">
        <title><link linkend="embedding.boost_python_exec_hpp.examples">Examples</link></title>
        <para>
          The following example demonstrates the use of import and exec to define
          a function in python, and later call it from within C++.
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">greet</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
  <phrase role="comment">// Retrieve the main module.</phrase>
  <phrase role="identifier">object</phrase> <phrase role="identifier">main</phrase> <phrase role="special">=</phrase> <phrase role="identifier">import</phrase><phrase role="special">(</phrase><phrase role="string">&quot;__main__&quot;</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// Retrieve the main module's namespace</phrase>
  <phrase role="identifier">object</phrase> <phrase role="identifier">global</phrase><phrase role="special">(</phrase><phrase role="identifier">main</phrase><phrase role="special">.</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;__dict__&quot;</phrase><phrase role="special">));</phrase>

  <phrase role="comment">// Define greet function in Python.</phrase>
  <phrase role="identifier">object</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">exec</phrase><phrase role="special">(</phrase>
    <phrase role="string">&quot;def greet():                   \n&quot;</phrase>
    <phrase role="string">&quot;   return 'Hello from Python!' \n&quot;</phrase><phrase role="special">,</phrase>
    <phrase role="identifier">global</phrase><phrase role="special">,</phrase> <phrase role="identifier">global</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// Create a reference to it.</phrase>
  <phrase role="identifier">object</phrase> <phrase role="identifier">greet</phrase> <phrase role="special">=</phrase> <phrase role="identifier">global</phrase><phrase role="special">[</phrase><phrase role="string">&quot;greet&quot;</phrase><phrase role="special">];</phrase>

  <phrase role="comment">// Call it.</phrase>
  <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">message</phrase> <phrase role="special">=</phrase> <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">greet</phrase><phrase role="special">());</phrase>
  <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">message</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          Instead of embedding the python script into a string, we could also store
          it in an a file...
        </para>
<programlisting><phrase role="identifier">def</phrase> <phrase role="identifier">greet</phrase><phrase role="special">():</phrase>
   <phrase role="keyword">return</phrase> <phrase role="char">'Hello from Python!'</phrase>
</programlisting>
        <para>
          ... and execute that instead.
        </para>
<programlisting>  <phrase role="comment">// ...</phrase>
  <phrase role="comment">// Load the greet function from a file.</phrase>
  <phrase role="identifier">object</phrase> <phrase role="identifier">result</phrase> <phrase role="special">=</phrase> <phrase role="identifier">exec_file</phrase><phrase role="special">(</phrase><phrase role="identifier">script</phrase><phrase role="special">,</phrase> <phrase role="identifier">global</phrase><phrase role="special">,</phrase> <phrase role="identifier">global</phrase><phrase role="special">);</phrase>
  <phrase role="comment">// ...</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="embedding.boost_python_import_hpp">
      <title><link linkend="embedding.boost_python_import_hpp">boost/python/import.hpp</link></title>
      <section id="embedding.boost_python_import_hpp.introduction">
        <title><link linkend="embedding.boost_python_import_hpp.introduction">Introduction</link></title>
        <para>
          Exposes a mechanism for importing python modules.
        </para>
      </section>
      <section id="embedding.boost_python_import_hpp.function_import">
        <title><link linkend="embedding.boost_python_import_hpp.function_import">Function
        <code><phrase role="identifier">import</phrase></code></link></title>
<programlisting><phrase role="identifier">object</phrase> <phrase role="identifier">import</phrase><phrase role="special">(</phrase><phrase role="identifier">str</phrase> <phrase role="identifier">name</phrase><phrase role="special">);</phrase></programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Imports the module named by name.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                An instance of object which holds a reference to the imported module.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="embedding.boost_python_import_hpp.examples">
        <title><link linkend="embedding.boost_python_import_hpp.examples">Examples</link></title>
        <para>
          The following example demonstrates the use of import to access a function
          in python, and later call it from within C++.
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">print_python_version</phrase><phrase role="special">()</phrase>
<phrase role="special">{</phrase>
  <phrase role="comment">// Load the sys module.</phrase>
  <phrase role="identifier">object</phrase> <phrase role="identifier">sys</phrase> <phrase role="special">=</phrase> <phrase role="identifier">import</phrase><phrase role="special">(</phrase><phrase role="string">&quot;sys&quot;</phrase><phrase role="special">);</phrase>

  <phrase role="comment">// Extract the python version.</phrase>
  <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase> <phrase role="identifier">version</phrase> <phrase role="special">=</phrase> <phrase role="identifier">extract</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">sys</phrase><phrase role="special">.</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;version&quot;</phrase><phrase role="special">));</phrase>
  <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">cout</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">version</phrase> <phrase role="special">&lt;&lt;</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">endl</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
  </chapter>
  <chapter id="utility_and_infrastructure" last-revision="$Date: 2016/08/05 20:23:10 $"
  xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Utility and Infrastructure</title>
    <section id="utility_and_infrastructure.boost_python_has_back_reference_">
      <title><link linkend="utility_and_infrastructure.boost_python_has_back_reference_">boost/python/has_back_reference.hpp</link></title>
      <section id="utility_and_infrastructure.boost_python_has_back_reference_.introduction">
        <title><link linkend="utility_and_infrastructure.boost_python_has_back_reference_.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/has_back_reference.hpp&gt; defines the predicate metafunction
          <code><phrase role="identifier">has_back_reference</phrase><phrase role="special">&lt;&gt;</phrase></code>,
          which can be specialized by the user to indicate that a wrapped class instance
          holds a <code><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase></code>
          corresponding to a Python object.
        </para>
      </section>
      <section id="utility_and_infrastructure.boost_python_has_back_reference_.class_template_has_back_referenc">
        <title><link linkend="utility_and_infrastructure.boost_python_has_back_reference_.class_template_has_back_referenc">Class
        template <code><phrase role="identifier">has_back_reference</phrase></code></link></title>
        <para>
          A unary metafunction whose value is true iff its argument is a <code><phrase
          role="identifier">pointer_wrapper</phrase><phrase role="special">&lt;&gt;</phrase></code>.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">WrappedClass</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">has_back_reference</phrase>
    <phrase role="special">{</phrase>
        <phrase role="keyword">typedef</phrase> <phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">false_</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
    <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <para>
          A metafunction that is inspected by Boost.Python to determine how wrapped
          classes can be constructed.
        </para>
        <para>
          <code><phrase role="identifier">type</phrase><phrase role="special">::</phrase><phrase
          role="identifier">value</phrase></code> is an integral constant convertible
          to bool of unspecified type. Specializations may substitute a true-valued
          integral constant wrapper for type iff for each invocation of <code><phrase
          role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">WrappedClass</phrase><phrase role="special">&gt;::</phrase><phrase
          role="identifier">def</phrase><phrase role="special">(</phrase><phrase
          role="identifier">init</phrase><phrase role="special">&lt;</phrase> <phrase
          role="identifier">type</phrase><phrase role="special">-</phrase><phrase
          role="identifier">sequence</phrase><phrase role="special">...&gt;())</phrase></code>
          and the implicitly wrapped copy constructor (unless it is noncopyable),
          there exists a corresponding constructor <code><phrase role="identifier">WrappedClass</phrase><phrase
          role="special">::</phrase><phrase role="identifier">WrappedClass</phrase><phrase
          role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase
          role="special">*,</phrase> <phrase role="identifier">type</phrase><phrase
          role="special">-</phrase><phrase role="identifier">sequence</phrase><phrase
          role="special">...)</phrase></code>. If such a specialization exists, the
          WrappedClass constructors will be called with a &quot;back reference&quot;
          pointer to the corresponding Python object whenever they are invoked from
          Python. The easiest way to provide this nested type is to derive the specialization
          from <code><phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase
          role="identifier">true_</phrase></code>.
        </para>
      </section>
      <section id="utility_and_infrastructure.boost_python_has_back_reference_.examples">
        <title><link linkend="utility_and_infrastructure.boost_python_has_back_reference_.examples">Examples</link></title>
        <para>
          In C++:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">module</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">has_back_reference</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">handle</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">using</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">;</phrase>
<phrase role="keyword">using</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">;</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">X</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">m_self</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">),</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">m_self</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">),</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="identifier">X</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">other</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">m_self</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">),</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">(</phrase><phrase role="identifier">other</phrase><phrase role="special">.</phrase><phrase role="identifier">m_x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>

    <phrase role="identifier">handle</phrase><phrase role="special">&lt;&gt;</phrase> <phrase role="identifier">self</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">handle</phrase><phrase role="special">&lt;&gt;(</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">(</phrase><phrase role="identifier">m_self</phrase><phrase role="special">));</phrase> <phrase role="special">}</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="identifier">m_x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">m_self</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="comment">// specialize has_back_reference for X</phrase>
<phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;&gt;</phrase>
  <phrase role="keyword">struct</phrase> <phrase role="identifier">has_back_reference</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;</phrase>
    <phrase role="special">:</phrase> <phrase role="identifier">mpl</phrase><phrase role="special">::</phrase><phrase role="identifier">true_</phrase>
  <phrase role="special">{};</phrase>
<phrase role="special">}}</phrase>

<phrase role="keyword">struct</phrase> <phrase role="identifier">Y</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">Y</phrase><phrase role="special">()</phrase> <phrase role="special">:</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">(</phrase><phrase role="number">0</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="identifier">Y</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">:</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{}</phrase>
    <phrase role="keyword">int</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
    <phrase role="keyword">void</phrase> <phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="identifier">m_x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

    <phrase role="keyword">int</phrase> <phrase role="identifier">m_x</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>

<phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">Y_self</phrase><phrase role="special">(</phrase><phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">self</phrase><phrase role="special">)</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="identifier">self</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">back_references</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;X&quot;</phrase><phrase role="special">)</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;self&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">self</phrase><phrase role="special">)</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">get</phrase><phrase role="special">)</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;set&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">X</phrase><phrase role="special">::</phrase><phrase role="identifier">set</phrase><phrase role="special">)</phrase>
       <phrase role="special">;</phrase>

    <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">,</phrase> <phrase role="identifier">shared_ptr</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;Y&quot;</phrase><phrase role="special">)</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">init</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;())</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;get&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Y</phrase><phrase role="special">::</phrase><phrase role="identifier">get</phrase><phrase role="special">)</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;set&quot;</phrase><phrase role="special">,</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">Y</phrase><phrase role="special">::</phrase><phrase role="identifier">set</phrase><phrase role="special">)</phrase>
       <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="string">&quot;self&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">Y_self</phrase><phrase role="special">)</phrase>
       <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          The following Python session illustrates that x.self() returns the same
          Python object on which it is invoked, while y.self() must create a new
          Python object which refers to the same Y instance.
        </para>
        <para>
          In Python:
        </para>
<programlisting><phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">from</phrase> <phrase role="identifier">back_references</phrase> <phrase role="identifier">import</phrase> <phrase role="special">*</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase> <phrase role="special">=</phrase> <phrase role="identifier">X</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">self</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x2</phrase> <phrase role="identifier">is</phrase> <phrase role="identifier">x</phrase>
<phrase role="number">1</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">(),</phrase> <phrase role="identifier">x2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">())</phrase>
<phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">,</phrase> <phrase role="number">1</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="number">10</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">(),</phrase> <phrase role="identifier">x2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">())</phrase>
<phrase role="special">(</phrase><phrase role="number">10</phrase><phrase role="special">,</phrase> <phrase role="number">10</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">y</phrase> <phrase role="special">=</phrase> <phrase role="identifier">Y</phrase><phrase role="special">(</phrase><phrase role="number">2</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">y2</phrase> <phrase role="special">=</phrase> <phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">self</phrase><phrase role="special">()</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">y2</phrase> <phrase role="identifier">is</phrase> <phrase role="identifier">y</phrase>
<phrase role="number">0</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">(),</phrase> <phrase role="identifier">y2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">())</phrase>
<phrase role="special">(</phrase><phrase role="number">2</phrase><phrase role="special">,</phrase> <phrase role="number">2</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">set</phrase><phrase role="special">(</phrase><phrase role="number">20</phrase><phrase role="special">)</phrase>
<phrase role="special">&gt;&gt;&gt;</phrase> <phrase role="special">(</phrase><phrase role="identifier">y</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">(),</phrase> <phrase role="identifier">y2</phrase><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">())</phrase>
<phrase role="special">(</phrase><phrase role="number">20</phrase><phrase role="special">,</phrase> <phrase role="number">20</phrase><phrase role="special">)</phrase>
</programlisting>
      </section>
    </section>
    <section id="utility_and_infrastructure.boost_python_instance_holder_hpp">
      <title><link linkend="utility_and_infrastructure.boost_python_instance_holder_hpp">boost/python/instance_holder.hpp</link></title>
      <section id="utility_and_infrastructure.boost_python_instance_holder_hpp.introduction">
        <title><link linkend="utility_and_infrastructure.boost_python_instance_holder_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/instance_holder.hpp&gt; provides class <code><phrase role="identifier">instance_holder</phrase></code>,
          the base class for types which hold C++ instances of wrapped classes.
        </para>
      </section>
      <section id="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder">
        <title><link linkend="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder">Class
        template <code><phrase role="identifier">instance_holder</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">instance_holder</phrase></code> is an abstract
          base class whose concrete derived classes hold C++ class instances within
          their Python object wrappers. To allow multiple inheritance in Python from
          C++ class wrappers, each such Python object contains a chain of instance_holders.
          When an <code><phrase role="identifier">__init__</phrase></code> function
          for a wrapped C++ class is invoked, a new <code><phrase role="identifier">instance_holder</phrase></code>
          instance is created and installed in the Python object using its <code><phrase
          role="identifier">install</phrase><phrase role="special">()</phrase></code>
          function. Each concrete class derived from <code><phrase role="identifier">instance_holder</phrase></code>
          must provide a <code><phrase role="identifier">holds</phrase><phrase role="special">()</phrase></code>
          implementation which allows Boost.Python to query it for the type(s) it
          is holding. In order to support the held type's wrapped constructor(s),
          the class must also provide constructors that can accept an initial <code><phrase
          role="identifier">PyObject</phrase><phrase role="special">*</phrase></code>
          argument referring to the owning Python object, and which forward the rest
          of their arguments to the constructor of the held type. The initial argument
          is needed to enable virtual function overriding in Python, and may be ignored,
          depending on the specific <code><phrase role="identifier">instance_holder</phrase></code>
          subclass.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">instance_holder</phrase> <phrase role="special">:</phrase> <phrase role="identifier">noncopyable</phrase>
  <phrase role="special">{</phrase>
   <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
      <phrase role="comment">// destructor</phrase>
      <phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">instance_holder</phrase><phrase role="special">();</phrase>

      <phrase role="comment">// instance_holder modifiers</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">install</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">inst</phrase><phrase role="special">)</phrase> <phrase role="keyword">throw</phrase><phrase role="special">();</phrase>

      <phrase role="comment">// instance_holder observers</phrase>
      <phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase><phrase role="special">*</phrase> <phrase role="identifier">holds</phrase><phrase role="special">(</phrase><phrase role="identifier">type_info</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder.class_intance_holder_destructor">
          <title><link linkend="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder.class_intance_holder_destructor">Class
          <code><phrase role="identifier">intance_holder</phrase></code> destructor</link></title>
<programlisting><phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">instance_holder</phrase><phrase role="special">();</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  destroys the object
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder.class_intance_holder_modifiers">
          <title><link linkend="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder.class_intance_holder_modifiers">Class
          <code><phrase role="identifier">intance_holder</phrase></code> modifiers</link></title>
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">install</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">inst</phrase><phrase role="special">)</phrase> <phrase role="keyword">throw</phrase><phrase role="special">();</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Requires</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">inst</phrase></code> is a Python
                  instance of a wrapped C++ class type, or is a type derived from
                  a wrapped C++ class type.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  installs the new instance at the head of the Python object's chain
                  of held instances.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Throws</term>
              <listitem>
                <para>
                  nothing
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder.class_intance_holder_observers">
          <title><link linkend="utility_and_infrastructure.boost_python_instance_holder_hpp.class_template_instance_holder.class_intance_holder_observers">Class
          <code><phrase role="identifier">intance_holder</phrase></code> observers</link></title>
<programlisting><phrase role="keyword">virtual</phrase> <phrase role="keyword">void</phrase> <phrase role="special">*</phrase><phrase role="identifier">holds</phrase><phrase role="special">(</phrase><phrase role="identifier">type_info</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase> <phrase role="special">=</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  A pointer to an object of the type described by <code><phrase role="identifier">x</phrase></code>
                  if <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase></code>
                  contains such an object, 0 otherwise.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="utility_and_infrastructure.boost_python_instance_holder_hpp.examples">
        <title><link linkend="utility_and_infrastructure.boost_python_instance_holder_hpp.examples">Examples</link></title>
        <para>
          The following is a simplified version of the instance holder template used
          by Boost.Python to wrap classes held by smart pointers:
        </para>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">SmartPtr</phrase><phrase role="special">,</phrase> <phrase role="keyword">class</phrase> <phrase role="identifier">Value</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">struct</phrase> <phrase role="identifier">pointer_holder</phrase> <phrase role="special">:</phrase> <phrase role="identifier">instance_holder</phrase>
<phrase role="special">{</phrase>
   <phrase role="comment">// construct from the SmartPtr type</phrase>
   <phrase role="identifier">pointer_holder</phrase><phrase role="special">(</phrase><phrase role="identifier">SmartPtr</phrase> <phrase role="identifier">p</phrase><phrase role="special">)</phrase>
       <phrase role="special">:</phrase><phrase role="identifier">m_p</phrase><phrase role="special">(</phrase><phrase role="identifier">p</phrase><phrase role="special">)</phrase>

   <phrase role="comment">// Forwarding constructors for the held type</phrase>
   <phrase role="identifier">pointer_holder</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*)</phrase>
       <phrase role="special">:</phrase><phrase role="identifier">m_p</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">Value</phrase><phrase role="special">())</phrase>
   <phrase role="special">{</phrase>
   <phrase role="special">}</phrase>

   <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">&gt;</phrase>
   <phrase role="identifier">pointer_holder</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*,</phrase><phrase role="identifier">A0</phrase> <phrase role="identifier">a0</phrase><phrase role="special">)</phrase>
       <phrase role="special">:</phrase><phrase role="identifier">m_p</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">Value</phrase><phrase role="special">(</phrase><phrase role="identifier">a0</phrase><phrase role="special">))</phrase>
   <phrase role="special">{</phrase>
   <phrase role="special">}</phrase>

   <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A0</phrase><phrase role="special">,</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">A1</phrase><phrase role="special">&gt;</phrase>
   <phrase role="identifier">pointer_holder</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*,</phrase><phrase role="identifier">A0</phrase> <phrase role="identifier">a0</phrase><phrase role="special">,</phrase><phrase role="identifier">A1</phrase> <phrase role="identifier">a1</phrase><phrase role="special">)</phrase>
       <phrase role="special">:</phrase><phrase role="identifier">m_p</phrase><phrase role="special">(</phrase><phrase role="keyword">new</phrase> <phrase role="identifier">Value</phrase><phrase role="special">(</phrase><phrase role="identifier">a0</phrase><phrase role="special">,</phrase><phrase role="identifier">a1</phrase><phrase role="special">))</phrase>
   <phrase role="special">{</phrase>
   <phrase role="special">}</phrase>
   <phrase role="special">...</phrase>

 <phrase role="keyword">private</phrase><phrase role="special">:</phrase> <phrase role="comment">// required holder implementation</phrase>
   <phrase role="keyword">void</phrase><phrase role="special">*</phrase> <phrase role="identifier">holds</phrase><phrase role="special">(</phrase><phrase role="identifier">type_info</phrase> <phrase role="identifier">dst_t</phrase><phrase role="special">)</phrase>
   <phrase role="special">{</phrase>
       <phrase role="comment">// holds an instance of the SmartPtr type...</phrase>
       <phrase role="keyword">if</phrase> <phrase role="special">(</phrase><phrase role="identifier">dst_t</phrase> <phrase role="special">==</phrase> <phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">type_id</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">SmartPtr</phrase><phrase role="special">&gt;())</phrase>
           <phrase role="keyword">return</phrase> <phrase role="special">&amp;</phrase><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">m_p</phrase><phrase role="special">;</phrase>

       <phrase role="comment">// ...and an instance of the SmartPtr's element_type, if the</phrase>
       <phrase role="comment">// pointer is non-null</phrase>
       <phrase role="keyword">return</phrase> <phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">type_id</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Value</phrase><phrase role="special">&gt;()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">dst_t</phrase> <phrase role="special">?</phrase> <phrase role="special">&amp;*</phrase><phrase role="keyword">this</phrase><phrase role="special">-&gt;</phrase><phrase role="identifier">m_p</phrase> <phrase role="special">:</phrase> <phrase role="number">0</phrase><phrase role="special">;</phrase>
   <phrase role="special">}</phrase>

 <phrase role="keyword">private</phrase><phrase role="special">:</phrase> <phrase role="comment">// data members</phrase>
   <phrase role="identifier">SmartPtr</phrase> <phrase role="identifier">m_p</phrase><phrase role="special">;</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </section>
    </section>
    <section id="utility_and_infrastructure.boost_python_pointee_hpp">
      <title><link linkend="utility_and_infrastructure.boost_python_pointee_hpp">boost/python/pointee.hpp</link></title>
      <section id="utility_and_infrastructure.boost_python_pointee_hpp.introduction">
        <title><link linkend="utility_and_infrastructure.boost_python_pointee_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/pointee.hpp&gt; introduces a traits metafunction <code><phrase
          role="keyword">template</phrase> <phrase role="identifier">pointee</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
          role="special">&gt;</phrase></code> that can be used to extract the &quot;pointed-to&quot;
          type from the type of a pointer or smart pointer.
        </para>
      </section>
      <section id="utility_and_infrastructure.boost_python_pointee_hpp.class_template_pointee">
        <title><link linkend="utility_and_infrastructure.boost_python_pointee_hpp.class_template_pointee">Class
        template <code><phrase role="identifier">pointee</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">pointee</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">T</phrase><phrase role="special">&gt;</phrase></code>
          is used by the <link linkend="high_level_components.boost_python_class_hpp.class_template_class_t_bases_hel"><code><phrase
          role="identifier">class_</phrase><phrase role="special">&lt;...&gt;</phrase></code></link>
          template to deduce the type being held when a pointer or smart pointer
          type is used as its HeldType argument.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">pointee</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">T</phrase><phrase role="special">::</phrase><phrase role="identifier">element_type</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
   <phrase role="special">};</phrase>

   <phrase role="comment">// specialization for pointers</phrase>
   <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">pointee</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">*&gt;</phrase>
   <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">T</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
   <phrase role="special">};</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
      <section id="utility_and_infrastructure.boost_python_pointee_hpp.examples">
        <title><link linkend="utility_and_infrastructure.boost_python_pointee_hpp.examples">Examples</link></title>
        <para>
          Given a 3rd-party smart pointer type <code><phrase role="identifier">smart_pointer</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
          role="special">&gt;</phrase></code>, one might partially specialize <code><phrase
          role="identifier">pointee</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">smart_pointer</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase
          role="special">&gt;</phrase></code> so that it can be used as the HeldType
          for a class wrapper:
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">pointee</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="keyword">class</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>
<phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">third_party_lib</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">pointee</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">smart_pointer</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;</phrase>
  <phrase role="special">{</phrase>
     <phrase role="keyword">typedef</phrase> <phrase role="identifier">T</phrase> <phrase role="identifier">type</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>

<phrase role="identifier">BOOST_PYTHON_MODULE</phrase><phrase role="special">(</phrase><phrase role="identifier">pointee_demo</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">third_party_class</phrase><phrase role="special">,</phrase> <phrase role="identifier">smart_pointer</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">third_party_class</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;third_party_class&quot;</phrase><phrase role="special">)</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(...)</phrase>
      <phrase role="special">...</phrase>
      <phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="utility_and_infrastructure.boost_python_handle_hpp">
      <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp">boost/python/handle.hpp</link></title>
      <section id="utility_and_infrastructure.boost_python_handle_hpp.introduction">
        <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/handle.hpp&gt; provides class template <code><phrase role="identifier">handle</phrase></code>,
          a smart pointer for managing reference-counted Python objects.
        </para>
      </section>
      <section id="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle">
        <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle">Class
        template <code><phrase role="identifier">handle</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">handle</phrase></code> is a smart pointer
          to a Python object type; it holds a pointer of type <code><phrase role="identifier">T</phrase><phrase
          role="special">*</phrase></code>, where <code><phrase role="identifier">T</phrase></code>
          is its template parameter. T must be either a type derived from <code><phrase
          role="identifier">PyObject</phrase></code> or a <link linkend="pod">POD</link>
          type whose initial <code><phrase role="keyword">sizeof</phrase><phrase
          role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase
          role="special">)</phrase></code> bytes are layout-compatible with <code><phrase
          role="identifier">PyObject</phrase></code>. Use <code><phrase role="identifier">handle</phrase><phrase
          role="special">&lt;&gt;</phrase></code> at the boundary between the Python/'C'
          API and high-level code; prefer object for a generalized interface to Python
          objects.
        </para>
        <para>
          In this document, the term &quot;upcast&quot; refers to an operation which
          converts a pointer <code><phrase role="identifier">Y</phrase><phrase role="special">*</phrase></code>
          to a base class <code><phrase role="identifier">pointer</phrase> <phrase
          role="identifier">T</phrase><phrase role="special">*</phrase></code> via
          <code><phrase role="keyword">static_cast</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">T</phrase><phrase role="special">*&gt;</phrase></code>
          if <code><phrase role="identifier">Y</phrase></code> is derived from <code><phrase
          role="identifier">T</phrase></code>, or via C-style cast (<code><phrase
          role="identifier">T</phrase><phrase role="special">*</phrase></code>) if
          it is not. However, in the latter case the &quot;upcast&quot; is ill-formed
          if the initial <code><phrase role="keyword">sizeof</phrase><phrase role="special">(</phrase><phrase
          role="identifier">PyObject</phrase><phrase role="special">)</phrase></code>
          bytes of <code><phrase role="identifier">Y</phrase></code> are not layout-compatible
          with <code><phrase role="identifier">PyObject</phrase></code>.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">handle</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">unspecified</phrase><phrase role="special">-</phrase><phrase role="identifier">member</phrase><phrase role="special">-</phrase><phrase role="identifier">function</phrase><phrase role="special">-</phrase><phrase role="identifier">pointer</phrase> <phrase role="identifier">bool_type</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">public</phrase><phrase role="special">:</phrase> <phrase role="comment">// types</phrase>
      <phrase role="keyword">typedef</phrase> <phrase role="identifier">T</phrase> <phrase role="identifier">element_type</phrase><phrase role="special">;</phrase>

   <phrase role="keyword">public</phrase><phrase role="special">:</phrase> <phrase role="comment">// member functions</phrase>
      <phrase role="special">~</phrase><phrase role="identifier">handle</phrase><phrase role="special">();</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
      <phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">Y</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">handle</phrase><phrase role="special">();</phrase>

      <phrase role="identifier">handle</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">handle</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>

      <phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">handle</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase> <phrase role="comment">// never throws</phrase>


      <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
      <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">handle</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>

      <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">T</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
      <phrase role="keyword">void</phrase> <phrase role="identifier">reset</phrase><phrase role="special">();</phrase>
      <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">release</phrase><phrase role="special">();</phrase>

      <phrase role="keyword">operator</phrase> <phrase role="identifier">bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase> <phrase role="comment">// never throws</phrase>
   <phrase role="keyword">private</phrase><phrase role="special">:</phrase>
      <phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">m_p</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>

  <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">null_ok</phrase><phrase role="special">;</phrase>
  <phrase role="keyword">namespace</phrase> <phrase role="identifier">detail</phrase> <phrase role="special">{</phrase> <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">struct</phrase> <phrase role="identifier">borrowed</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle.class_template_handle_constructo">
          <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle.class_template_handle_constructo">Class
          template <code><phrase role="identifier">handle</phrase></code> constructors
          and destructor</link></title>
<programlisting><phrase role="keyword">virtual</phrase> <phrase role="special">~</phrase><phrase role="identifier">handle</phrase><phrase role="special">();</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">Py_XDECREF</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase
                  role="identifier">PyObject</phrase><phrase role="special">*&gt;(</phrase><phrase
                  role="identifier">m_p</phrase><phrase role="special">))</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
<programlisting><phrase role="identifier">Py_XINCREF</phrase><phrase role="special">(</phrase><phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">p</phrase><phrase role="special">));</phrase>
<phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase> <phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">p</phrase><phrase role="special">);</phrase>
</programlisting>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
<programlisting><phrase role="identifier">Py_XINCREF</phrase><phrase role="special">(</phrase><phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">p</phrase><phrase role="special">));</phrase>
      <phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase> <phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">p</phrase><phrase role="special">);</phrase>
</programlisting>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
<programlisting><phrase role="identifier">Py_XINCREF</phrase><phrase role="special">(</phrase><phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">p</phrase><phrase role="special">));</phrase>
      <phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase> <phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">*&gt;(</phrase><phrase role="identifier">expect_non_null</phrase><phrase role="special">(</phrase><phrase role="identifier">p</phrase><phrase role="special">));</phrase>
</programlisting>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase>
                  <phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase
                  role="identifier">T</phrase><phrase role="special">*&gt;(</phrase><phrase
                  role="identifier">p</phrase><phrase role="special">);</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">explicit</phrase> <phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">Y</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase>
                  <phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase
                  role="identifier">T</phrase><phrase role="special">*&gt;(</phrase><phrase
                  role="identifier">expect_non_null</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">p</phrase><phrase role="special">));</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">handle</phrase><phrase role="special">();</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase>
                  <phrase role="number">0</phrase><phrase role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">(</phrase><phrase role="identifier">handle</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  m_p = r.m_p; Py_XINCREF(upcast&lt;PyObject*&gt;(m_p));
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle.class_template_handle_modifiers">
          <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle.class_template_handle_modifiers">Class
          template <code><phrase role="identifier">handle</phrase></code> modifiers</link></title>
<programlisting><phrase role="identifier">handle</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">handle</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase>
<phrase role="keyword">template</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">typename</phrase> <phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">handle</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">=(</phrase><phrase role="identifier">handle</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">Y</phrase><phrase role="special">&gt;</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase> <phrase role="identifier">r</phrase><phrase role="special">);</phrase> <phrase role="comment">// never throws</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">Py_XINCREF</phrase><phrase role="special">(</phrase><phrase
                  role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase
                  role="identifier">PyObject</phrase><phrase role="special">*&gt;(</phrase><phrase
                  role="identifier">r</phrase><phrase role="special">.</phrase><phrase
                  role="identifier">m_p</phrase><phrase role="special">));</phrase>
                  <phrase role="identifier">Py_XDECREF</phrase><phrase role="special">(</phrase>
                  <phrase role="identifier">upcast</phrase><phrase role="special">&lt;</phrase><phrase
                  role="identifier">PyObject</phrase><phrase role="special">*&gt;(</phrase><phrase
                  role="identifier">m_p</phrase><phrase role="special">));</phrase>
                  <phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase>
                  <phrase role="identifier">r</phrase><phrase role="special">.</phrase><phrase
                  role="identifier">m_p</phrase><phrase role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">release</phrase><phrase role="special">();</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">T</phrase><phrase role="special">*</phrase>
                  <phrase role="identifier">x</phrase> <phrase role="special">=</phrase>
                  <phrase role="identifier">m_p</phrase><phrase role="special">;</phrase>
                  <phrase role="identifier">m_p</phrase> <phrase role="special">=</phrase>
                  <phrase role="number">0</phrase><phrase role="special">;</phrase>
                  <phrase role="keyword">return</phrase> <phrase role="identifier">x</phrase><phrase
                  role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">void</phrase> <phrase role="identifier">reset</phrase><phrase role="special">();</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="keyword">this</phrase>
                  <phrase role="special">=</phrase> <phrase role="identifier">handle</phrase><phrase
                  role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase
                  role="special">&gt;();</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle.class_template_handle_observers">
          <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp.class_template_handle.class_template_handle_observers">Class
          template <code><phrase role="identifier">handle</phrase></code> observers</link></title>
<programlisting><phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="keyword">operator</phrase><phrase role="special">-&gt;</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
<phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">get</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="identifier">m_p</phrase><phrase role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="identifier">T</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">*</phrase> <phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="special">*</phrase><phrase role="identifier">m_p</phrase><phrase
                  role="special">;</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">operator</phrase> <phrase role="identifier">bool_type</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase> <phrase role="comment">// never throws</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="number">0</phrase></code> if <code><phrase
                  role="identifier">m_p</phrase> <phrase role="special">==</phrase>
                  <phrase role="number">0</phrase></code>, a pointer convertible
                  to true otherwise.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="utility_and_infrastructure.boost_python_handle_hpp.function_borrowed">
        <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp.function_borrowed">Function
        <code><phrase role="identifier">borrowed</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;*</phrase> <phrase role="identifier">borrowed</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="special">(</phrase><phrase role="identifier">detail</phrase><phrase role="special">::</phrase><phrase role="identifier">borrowed</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;*)</phrase><phrase role="identifier">p</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
      <section id="utility_and_infrastructure.boost_python_handle_hpp.function_allow_null">
        <title><link linkend="utility_and_infrastructure.boost_python_handle_hpp.function_allow_null">Function
        <code><phrase role="identifier">allow_null</phrase></code></link></title>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;*</phrase> <phrase role="identifier">allow_null</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase><phrase role="special">*</phrase> <phrase role="identifier">p</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
    <phrase role="keyword">return</phrase> <phrase role="special">(</phrase><phrase role="identifier">null_ok</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;*)</phrase><phrase role="identifier">p</phrase><phrase role="special">;</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="utility_and_infrastructure.boost_python_type_id_hpp">
      <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp">boost/python/type_id.hpp</link></title>
      <section id="utility_and_infrastructure.boost_python_type_id_hpp.introduction">
        <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp.introduction">Introduction</link></title>
        <para>
          &lt;boost/python/type_id.hpp&gt; provides types and functions for runtime
          type identification like those of of <code><phrase role="special">&lt;</phrase><phrase
          role="identifier">typeinfo</phrase><phrase role="special">&gt;</phrase></code>.
          It exists mostly to work around certain compiler bugs and platform-dependent
          interactions with shared libraries.
        </para>
      </section>
      <section id="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info">
        <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info">Class
        template <code><phrase role="identifier">type_info</phrase></code></link></title>
        <para>
          <code><phrase role="identifier">type_info</phrase></code> instances identify
          a type. As <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
          role="identifier">type_info</phrase></code> is specified to (but unlike
          its implementation in some compilers), <code><phrase role="identifier">boost</phrase><phrase
          role="special">::</phrase><phrase role="identifier">python</phrase><phrase
          role="special">::</phrase><phrase role="identifier">type_info</phrase></code>
          never represents top-level references or cv-qualification (see section
          5.2.8 in the C++ standard). Unlike <code><phrase role="identifier">std</phrase><phrase
          role="special">::</phrase><phrase role="identifier">type_info</phrase></code>,
          <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
          role="identifier">python</phrase><phrase role="special">::</phrase><phrase
          role="identifier">type_info</phrase></code> instances are copyable, and
          comparisons always work reliably across shared library boundaries.
        </para>
<programlisting><phrase role="keyword">namespace</phrase> <phrase role="identifier">boost</phrase> <phrase role="special">{</phrase> <phrase role="keyword">namespace</phrase> <phrase role="identifier">python</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">class</phrase> <phrase role="identifier">type_info</phrase> <phrase role="special">:</phrase> <phrase role="identifier">totally_ordered</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">type_info</phrase><phrase role="special">&gt;</phrase>
  <phrase role="special">{</phrase>
  <phrase role="keyword">public</phrase><phrase role="special">:</phrase>
    <phrase role="comment">// constructor</phrase>
    <phrase role="identifier">type_info</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">type_info</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="special">=</phrase> <phrase role="keyword">typeid</phrase><phrase role="special">(</phrase><phrase role="keyword">void</phrase><phrase role="special">));</phrase>

    <phrase role="comment">// comparisons</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;(</phrase><phrase role="identifier">type_info</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">type_info</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">rhs</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>

    <phrase role="comment">// observers</phrase>
    <phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
  <phrase role="special">};</phrase>
<phrase role="special">}}</phrase>
</programlisting>
        <section id="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info.class_template_type_info_constru">
          <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info.class_template_type_info_constru">Class
          template <code><phrase role="identifier">type_info</phrase></code> constructor</link></title>
<programlisting><phrase role="identifier">type_info</phrase><phrase role="special">(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">type_info</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="special">=</phrase> <phrase role="keyword">typeid</phrase><phrase role="special">(</phrase><phrase role="keyword">void</phrase><phrase role="special">));</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  constructs a <code><phrase role="identifier">type_info</phrase></code>
                  object which identifies the same type as its argument.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Rationale</term>
              <listitem>
                <para>
                  Since it is occasionally necessary to make an array of <code><phrase
                  role="identifier">type_info</phrase></code> objects a benign default
                  argument is supplied. Note: this constructor does not correct for
                  non-conformance of compiler <code><phrase role="keyword">typeid</phrase><phrase
                  role="special">()</phrase></code> implementations. See <code><phrase
                  role="identifier">type_id</phrase></code>, below.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info.class_template_type_info_compari">
          <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info.class_template_type_info_compari">Class
          template <code><phrase role="identifier">type_info</phrase></code> comparison</link></title>
<programlisting><phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;(</phrase><phrase role="identifier">type_info</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">rhs</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Effects</term>
              <listitem>
                <para>
                  yields a total order over <code><phrase role="identifier">type_info</phrase></code>
                  objects.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<programlisting><phrase role="keyword">bool</phrase> <phrase role="keyword">operator</phrase><phrase role="special">==(</phrase><phrase role="identifier">type_info</phrase> <phrase role="keyword">const</phrase> <phrase role="special">&amp;</phrase><phrase role="identifier">rhs</phrase><phrase role="special">)</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase></programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  <code><phrase role="keyword">true</phrase></code> iff the two values
                  describe the same type.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Note</term>
              <listitem>
                <para>
                  The use of <code><phrase role="identifier">totally_ordered</phrase><phrase
                  role="special">&lt;</phrase><phrase role="identifier">type_info</phrase><phrase
                  role="special">&gt;</phrase></code> as a private base class supplies
                  operators <code><phrase role="special">&lt;=</phrase></code>,
                  <code><phrase role="special">&gt;=</phrase></code>, <code><phrase
                  role="special">&gt;</phrase></code>, and <code><phrase role="special">!=</phrase></code>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section id="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info.class_template_type_info_observe">
          <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp.class_template_type_info.class_template_type_info_observe">Class
          template <code><phrase role="identifier">type_info</phrase></code> observers</link></title>
<programlisting><phrase role="keyword">char</phrase> <phrase role="keyword">const</phrase><phrase role="special">*</phrase> <phrase role="identifier">name</phrase><phrase role="special">()</phrase> <phrase role="keyword">const</phrase><phrase role="special">;</phrase>
</programlisting>
          <variablelist>
            <title></title>
            <varlistentry>
              <term>Returns</term>
              <listitem>
                <para>
                  The result of calling <code><phrase role="identifier">name</phrase><phrase
                  role="special">()</phrase></code> on the argument used to construct
                  the object.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section id="utility_and_infrastructure.boost_python_type_id_hpp.functions">
        <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp.functions">Functions</link></title>
<programlisting><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">ostream</phrase><phrase role="special">&amp;</phrase> <phrase role="keyword">operator</phrase><phrase role="special">&lt;&lt;(</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">ostream</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">s</phrase><phrase role="special">,</phrase> <phrase role="identifier">type_info</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase><phrase role="identifier">x</phrase><phrase role="special">);</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Effects</term>
            <listitem>
              <para>
                Writes a description of the type described by to <code><phrase role="identifier">x</phrase></code>
                into s.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Rationale</term>
            <listitem>
              <para>
                Not every C++ implementation provides a truly human-readable <code><phrase
                role="identifier">type_info</phrase><phrase role="special">::</phrase><phrase
                role="identifier">name</phrase><phrase role="special">()</phrase></code>
                string, but for some we may be able to decode the string and produce
                a reasonable representation.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Note</term>
            <listitem>
              <para>
                On some non-conforming C++ implementations, the code is not actually
                as simple as described above; the semantics are adjusted to work
                as-if the C++ implementation were conforming.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase> <phrase role="identifier">type_info</phrase> <phrase role="identifier">type_id</phrase><phrase role="special">()</phrase>
</programlisting>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>Returns</term>
            <listitem>
              <para>
                <code><phrase role="identifier">type_info</phrase><phrase role="special">(</phrase><phrase
                role="keyword">typeid</phrase><phrase role="special">(</phrase><phrase
                role="identifier">T</phrase><phrase role="special">))</phrase></code>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Note</term>
            <listitem>
              <para>
                On some non-conforming C++ implementations, the code is not actually
                as simple as described above; the semantics are adjusted to work
                as-if the C++ implementation were conforming.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="utility_and_infrastructure.boost_python_type_id_hpp.example">
        <title><link linkend="utility_and_infrastructure.boost_python_type_id_hpp.example">Example</link></title>
        <para>
          The following example, though silly, illustrates how the type_id facility
          might be used
        </para>
<programlisting><phrase role="preprocessor">#include</phrase> <phrase role="special">&lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">python</phrase><phrase role="special">/</phrase><phrase role="identifier">type_id</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase>

<phrase role="comment">// Returns true iff the user passes an int argument</phrase>
<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">bool</phrase> <phrase role="identifier">is_int</phrase><phrase role="special">(</phrase><phrase role="identifier">T</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="keyword">using</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">type_id</phrase><phrase role="special">;</phrase>
   <phrase role="keyword">return</phrase> <phrase role="identifier">type_id</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;()</phrase> <phrase role="special">==</phrase> <phrase role="identifier">type_id</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;();</phrase>
<phrase role="special">}</phrase>
</programlisting>
      </section>
    </section>
    <section id="utility_and_infrastructure.boost_python_ssize_t_hpp">
      <title><link linkend="utility_and_infrastructure.boost_python_ssize_t_hpp">boost/python/ssize_t.hpp</link></title>
      <section id="utility_and_infrastructure.boost_python_ssize_t_hpp.introduction">
        <title><link linkend="utility_and_infrastructure.boost_python_ssize_t_hpp.introduction">Introduction</link></title>
        <para>
          Python 2.5 introduces a new <code><phrase role="identifier">Py_ssize_t</phrase></code>
          typedef and two related macros (<ulink url="http://www.python.org/dev/peps/pep-0353/">PEP
          353</ulink>). The &lt;boost/python/ssize_t.hpp&gt; header imports these
          definitions into the <code><phrase role="identifier">boost</phrase><phrase
          role="special">::</phrase><phrase role="identifier">python</phrase></code>
          namespace as <code><phrase role="identifier">ssize_t</phrase></code>,
          <code><phrase role="identifier">ssize_t_max</phrase></code>, and <code><phrase
          role="identifier">ssize_t_min</phrase></code>. Appropriate definitions
          are provided for backward compatibility with previous Python versions.
        </para>
      </section>
      <section id="utility_and_infrastructure.boost_python_ssize_t_hpp.typedefs">
        <title><link linkend="utility_and_infrastructure.boost_python_ssize_t_hpp.typedefs">Typedefs</link></title>
        <para>
          Imports <code><phrase role="identifier">Py_ssize_t</phrase></code> into
          the <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
          role="identifier">python</phrase></code> namespace if available, or provides
          an appropriate typedef for backward compatibility:
        </para>
<programlisting><phrase role="preprocessor">#if</phrase> <phrase role="identifier">PY_VERSION_HEX</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0x02050000</phrase>
<phrase role="keyword">typedef</phrase> <phrase role="identifier">Py_ssize_t</phrase> <phrase role="identifier">ssize_t</phrase><phrase role="special">;</phrase>
<phrase role="preprocessor">#else</phrase>
<phrase role="keyword">typedef</phrase> <phrase role="keyword">int</phrase> <phrase role="identifier">ssize_t</phrase><phrase role="special">;</phrase>
<phrase role="preprocessor">#endif</phrase>
</programlisting>
      </section>
      <section id="utility_and_infrastructure.boost_python_ssize_t_hpp.constants">
        <title><link linkend="utility_and_infrastructure.boost_python_ssize_t_hpp.constants">Constants</link></title>
        <para>
          Imports <code><phrase role="identifier">PY_SSIZE_T_MAX</phrase></code>
          and <code><phrase role="identifier">PY_SSIZE_T_MIN</phrase></code> as constants
          into the <code><phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
          role="identifier">python</phrase></code> namespace if available, or provides
          appropriate constants for backward compatibility:
        </para>
<programlisting><phrase role="preprocessor">#if</phrase> <phrase role="identifier">PY_VERSION_HEX</phrase> <phrase role="special">&gt;=</phrase> <phrase role="number">0x02050000</phrase>
<phrase role="identifier">ssize_t</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">ssize_t_max</phrase> <phrase role="special">=</phrase> <phrase role="identifier">PY_SSIZE_T_MAX</phrase><phrase role="special">;</phrase>
<phrase role="identifier">ssize_t</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">ssize_t_min</phrase> <phrase role="special">=</phrase> <phrase role="identifier">PY_SSIZE_T_MIN</phrase><phrase role="special">;</phrase>
<phrase role="preprocessor">#else</phrase>
<phrase role="identifier">ssize_t</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">ssize_t_max</phrase> <phrase role="special">=</phrase> <phrase role="identifier">INT_MAX</phrase><phrase role="special">;</phrase>
<phrase role="identifier">ssize_t</phrase> <phrase role="keyword">const</phrase> <phrase role="identifier">ssize_t_min</phrase> <phrase role="special">=</phrase> <phrase role="identifier">INT_MIN</phrase><phrase role="special">;</phrase>
<phrase role="preprocessor">#endif</phrase>
</programlisting>
      </section>
    </section>
  </chapter>
  <chapter id="topics" last-revision="$Date: 2016/08/05 20:23:10 $" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Topics</title>
    <section id="topics.calling_python_functions_and_met">
      <title><link linkend="topics.calling_python_functions_and_met">Calling Python
      Functions and Methods</link></title>
      <section id="topics.calling_python_functions_and_met.introduction">
        <title><link linkend="topics.calling_python_functions_and_met.introduction">Introduction</link></title>
        <para>
          The simplest way to call a Python function from C++, given an <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link> instance f holding the
          function, is simply to invoke its function call operator.
        </para>
<programlisting><phrase role="identifier">f</phrase><phrase role="special">(</phrase><phrase role="string">&quot;tea&quot;</phrase><phrase role="special">,</phrase> <phrase role="number">4</phrase><phrase role="special">,</phrase> <phrase role="number">2</phrase><phrase role="special">)</phrase> <phrase role="comment">// In Python: f('tea', 4, 2)</phrase></programlisting>
        <para>
          And of course, a method of an <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link> instance <code><phrase
          role="identifier">x</phrase></code> can be invoked by using the function-call
          operator of the corresponding attribute:
        </para>
<programlisting><phrase role="identifier">x</phrase><phrase role="special">.</phrase><phrase role="identifier">attr</phrase><phrase role="special">(</phrase><phrase role="string">&quot;tea&quot;</phrase><phrase role="special">)(</phrase><phrase role="number">4</phrase><phrase role="special">,</phrase> <phrase role="number">2</phrase><phrase role="special">);</phrase> <phrase role="comment">// In Python: x.tea(4, 2)</phrase></programlisting>
        <para>
          If you don't have an <link linkend="object_wrappers.boost_python_object_hpp.class_object"><code><phrase
          role="identifier">object</phrase></code></link> instance, <code><phrase
          role="identifier">Boost</phrase><phrase role="special">.</phrase><phrase
          role="identifier">Python</phrase></code> provides two families of function
          templates, <link linkend="function_invocation_and_creation.boost_python_call_hpp.function_call"><code><phrase
          role="identifier">call</phrase></code></link> and <link linkend="function_invocation_and_creation.boost_python_call_method_hpp.function_call_method"><code><phrase
          role="identifier">call_method</phrase></code></link>, for invoking Python
          functions and methods respectively on <code><phrase role="identifier">PyObject</phrase><phrase
          role="special">*</phrase></code>s. The interface for calling a Python function
          object (or any Python callable object) looks like:
        </para>
<programlisting><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">ResultType</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">callable_object</phrase><phrase role="special">,</phrase> <phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">a2</phrase><phrase role="special">...</phrase> <phrase role="identifier">aN</phrase><phrase role="special">);</phrase></programlisting>
        <para>
          Calling a method of a Python object is similarly easy:
        </para>
<programlisting><phrase role="identifier">call_method</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">ResultType</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">self_object</phrase><phrase role="special">,</phrase> <phrase role="string">&quot;method-name&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">a1</phrase><phrase role="special">,</phrase> <phrase role="identifier">a2</phrase><phrase role="special">...</phrase> <phrase role="identifier">aN</phrase><phrase role="special">);</phrase></programlisting>
        <para>
          This comparitively low-level interface is the one you'll use when implementing
          C++ virtual functions that can be overridden in Python.
        </para>
      </section>
      <section id="topics.calling_python_functions_and_met.argument_handling">
        <title><link linkend="topics.calling_python_functions_and_met.argument_handling">Argument
        Handling</link></title>
        <para>
          Arguments are converted to Python according to their type. By default,
          the arguments <code><phrase role="identifier">a1</phrase><phrase role="special">...</phrase><phrase
          role="identifier">aN</phrase></code> are copied into new Python objects,
          but this behavior can be overridden by the use of <link linkend="function_invocation_and_creation.boost_python_ptr_hpp.functions"><code><phrase
          role="identifier">ptr</phrase><phrase role="special">()</phrase></code></link>
          and <code><phrase role="identifier">ref</phrase><phrase role="special">()</phrase></code>:
        </para>
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">X</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">noncopyable</phrase>
<phrase role="special">{</phrase>
   <phrase role="special">...</phrase>
<phrase role="special">};</phrase>

<phrase role="keyword">void</phrase> <phrase role="identifier">apply</phrase><phrase role="special">(</phrase><phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">callable</phrase><phrase role="special">,</phrase> <phrase role="identifier">X</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">x</phrase><phrase role="special">)</phrase>
<phrase role="special">{</phrase>
   <phrase role="comment">// Invoke callable, passing a Python object which holds a reference to x</phrase>
   <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">void</phrase><phrase role="special">&gt;(</phrase><phrase role="identifier">callable</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">ref</phrase><phrase role="special">(</phrase><phrase role="identifier">x</phrase><phrase role="special">));</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <para>
          In the table below, x denotes the actual argument object and cv denotes
          an optional cv-qualification: &quot;const&quot;, &quot;volatile&quot;,
          or &quot;const volatile&quot;.
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>
                    Argument Type
                  </para>
                </entry>
                <entry>
                  <para>
                    Behavior
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <code><phrase role="identifier">T</phrase> <phrase role="identifier">cv</phrase>
                    <phrase role="special">&amp;</phrase></code> <code><phrase role="identifier">T</phrase>
                    <phrase role="identifier">cv</phrase></code>
                  </para>
                </entry>
                <entry>
                  <para>
                    The Python argument is created by the same means used for the
                    return value of a wrapped C++ function returning T. When T is
                    a class type, that normally means *x is copy-constructed into
                    the new Python object.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    T*
                  </para>
                </entry>
                <entry>
                  <para>
                    If x == 0, the Python argument will be None. Otherwise, the Python
                    argument is created by the same means used for the return value
                    of a wrapped C++ function returning T. When T is a class type,
                    that normally means *x is copy-constructed into the new Python
                    object.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    boost::reference_wrapper&lt;T&gt;
                  </para>
                </entry>
                <entry>
                  <para>
                    The Python argument contains a pointer to, rather than a copy
                    of, x.get(). Note: failure to ensure that no Python code holds
                    a reference to the resulting object beyond the lifetime of *x.get()
                    may result in a crash!
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    pointer_wrapper&lt;T&gt;
                  </para>
                </entry>
                <entry>
                  <para>
                    If x.get() == 0, the Python argument will be None. Otherwise,
                    the Python argument contains a pointer to, rather than a copy
                    of, *x.get(). Note: failure to ensure that no Python code holds
                    a reference to the resulting object beyond the lifetime of *x.get()
                    may result in a crash!
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      <section id="topics.calling_python_functions_and_met.result_handling">
        <title><link linkend="topics.calling_python_functions_and_met.result_handling">Result
        Handling</link></title>
        <para>
          In general, <code><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">ResultType</phrase><phrase role="special">&gt;()</phrase></code>
          and call_method&lt;ResultType&gt;() return ResultType by exploiting all
          lvalue and rvalue from_python converters registered for ResultType and
          returning a copy of the result. However, when ResultType is a pointer or
          reference type, Boost.Python searches only for lvalue converters. To prevent
          dangling pointers and references, an exception will be thrown if the Python
          result object has only a single reference count.
        </para>
      </section>
      <section id="topics.calling_python_functions_and_met.rationale">
        <title><link linkend="topics.calling_python_functions_and_met.rationale">Rationale</link></title>
        <para>
          In general, to get Python arguments corresponding to a1...aN, a new Python
          object must be created for each one; should the C++ object be copied into
          that Python object, or should the Python object simply hold a reference/pointer
          to the C++ object? In general, the latter approach is unsafe, since the
          called function may store a reference to the Python object somewhere. If
          the Python object is used after the C++ object is destroyed, we'll crash
          Python.
        </para>
        <para>
          In keeping with the philosophy that users on the Python side shouldn't
          have to worry about crashing the interpreter, the default behavior is to
          copy the C++ object, and to allow a non-copying behavior only if the user
          writes boost::ref(a1) instead of a1 directly. At least this way, the user
          doesn't get dangerous behavior &quot;by accident&quot;. It's also worth
          noting that the non-copying (&quot;by-reference&quot;) behavior is in general
          only available for class types, and will fail at runtime with a Python
          exception if used otherwise[1].
        </para>
        <para>
          However, pointer types present a problem: one approach is to refuse to
          compile if any aN has pointer type: after all, a user can always pass *aN
          to pass &quot;by-value&quot; or ref(*aN) to indicate a pass-by-reference
          behavior. However, this creates a problem for the expected null pointer
          to None conversion: it's illegal to dereference a null pointer value.
        </para>
        <para>
          The compromise I've settled on is this:
        </para>
        <orderedlist>
          <listitem>
            <simpara>
              The default behavior is pass-by-value. If you pass a non-null pointer,
              the pointee is copied into a new Python object; otherwise the corresponding
              Python argument will be None.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              if you want by-reference behavior, use ptr(aN) if aN is a pointer and
              ref(aN) otherwise. If a null pointer is passed to ptr(aN), the corresponding
              Python argument will be None.
            </simpara>
          </listitem>
        </orderedlist>
        <para>
          As for results, we have a similar problem: if ResultType is allowed to
          be a pointer or reference type, the lifetime of the object it refers to
          is probably being managed by a Python object. When that Python object is
          destroyed, our pointer dangles. The problem is particularly bad when the
          ResultType is char const* - the corresponding Python String object is typically
          uniquely-referenced, meaning that the pointer dangles as soon as call&lt;char
          const*&gt;(...) returns.
        </para>
        <para>
          The old Boost.Python v1 deals with this issue by refusing to compile any
          uses of call&lt;char const*&gt;(), but this goes both too far and not far
          enough. It goes too far because there are cases where the owning Python
          string object survives beyond the call (just for instance, when it's the
          name of a Python class), and it goes not far enough because we might just
          as well have the same problem with a returned pointer or reference of any
          other type.
        </para>
        <para>
          In Boost.Python this is dealt with by:
        </para>
        <orderedlist>
          <listitem>
            <simpara>
              lifting the compile-time restriction on <code><phrase role="keyword">char</phrase>
              <phrase role="keyword">const</phrase> <phrase role="special">*</phrase></code>
              callback returns
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              detecting the case when the reference count on the result Python object
              is 1 and throwing an exception inside of <code><phrase role="identifier">call</phrase><phrase
              role="special">&lt;</phrase><phrase role="identifier">U</phrase><phrase
              role="special">&gt;(...)</phrase></code> when <code><phrase role="identifier">U</phrase></code>
              is a pointer or reference type.
            </simpara>
          </listitem>
        </orderedlist>
        <para>
          This should be acceptably safe because users have to explicitly specify
          a pointer/reference for <code><phrase role="identifier">U</phrase></code>
          in <code><phrase role="identifier">call</phrase><phrase role="special">&lt;</phrase><phrase
          role="identifier">U</phrase><phrase role="special">&gt;</phrase></code>,
          and they will be protected against dangles at runtime, at least long enough
          to get out of the <code><phrase role="identifier">call</phrase><phrase
          role="special">&lt;</phrase><phrase role="identifier">U</phrase><phrase
          role="special">&gt;(...)</phrase></code> invocation.
        </para>
      </section>
    </section>
    <section id="topics.pickle_support">
      <title><link linkend="topics.pickle_support">Pickle support</link></title>
      <section id="topics.pickle_support.introduction">
        <title><link linkend="topics.pickle_support.introduction">Introduction</link></title>
        <para>
          Pickle is a Python module for object serialization, also known as persistence,
          marshalling, or flattening.
        </para>
        <para>
          It is often necessary to save and restore the contents of an object to
          a file. One approach to this problem is to write a pair of functions that
          read and write data from a file in a special format. A powerful alternative
          approach is to use Python's pickle module. Exploiting Python's ability
          for introspection, the pickle module recursively converts nearly arbitrary
          Python objects into a stream of bytes that can be written to a file.
        </para>
        <para>
          The Boost Python Library supports the pickle module through the interface
          as described in detail in the <ulink url="http://www.python.org/doc/current/lib/module-pickle.html">Python
          Library Reference for pickle</ulink>. This interface involves the special
          methods <code><phrase role="identifier">__getinitargs__</phrase></code>,
          <code><phrase role="identifier">__getstate__</phrase></code> and <code><phrase
          role="identifier">__setstate__</phrase></code> as described in the following.
          Note that <code><phrase role="identifier">Boost</phrase><phrase role="special">.</phrase><phrase
          role="identifier">Python</phrase></code> is also fully compatible with
          Python's cPickle module.
        </para>
      </section>
      <section id="topics.pickle_support.the_pickle_interface">
        <title><link linkend="topics.pickle_support.the_pickle_interface">The Pickle
        Interface</link></title>
        <para>
          At the user level, the Boost.Python pickle interface involves three special
          methods:
        </para>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>__getinitargs__</term>
            <listitem>
              <para>
                When an instance of a Boost.Python extension class is pickled, the
                pickler tests if the instance has a <code><phrase role="identifier">__getinitargs__</phrase></code>
                method. This method must return a Python <code><phrase role="identifier">tuple</phrase></code>
                (it is most convenient to use a <link linkend="object_wrappers.boost_python_tuple_hpp.class_tuple"><code><phrase
                role="identifier">boost</phrase><phrase role="special">::</phrase><phrase
                role="identifier">python</phrase><phrase role="special">::</phrase><phrase
                role="identifier">tuple</phrase></code></link>). When the instance
                is restored by the unpickler, the contents of this tuple are used
                as the arguments for the class constructor.
              </para>
              <para>
                If <code><phrase role="identifier">__getinitargs__</phrase></code>
                is not defined, <code><phrase role="identifier">pickle</phrase><phrase
                role="special">.</phrase><phrase role="identifier">load</phrase></code>
                will call the constructor (<code><phrase role="identifier">__init__</phrase></code>)
                without arguments; i.e., the object must be default-constructible.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>__getstate__</term>
            <listitem>
              <para>
                When an instance of a <code><phrase role="identifier">Boost</phrase><phrase
                role="special">.</phrase><phrase role="identifier">Python</phrase></code>
                extension class is pickled, the pickler tests if the instance has
                a <code><phrase role="identifier">__getstate__</phrase></code> method.
                This method should return a Python object representing the state
                of the instance.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>__setstate__</term>
            <listitem>
              <para>
                When an instance of a <code><phrase role="identifier">Boost</phrase><phrase
                role="special">.</phrase><phrase role="identifier">Python</phrase></code>
                extension class is restored by the unpickler (<code><phrase role="identifier">pickle</phrase><phrase
                role="special">.</phrase><phrase role="identifier">load</phrase></code>),
                it is first constructed using the result of <code><phrase role="identifier">__getinitargs__</phrase></code>
                as arguments (see above). Subsequently the unpickler tests if the
                new instance has a <code><phrase role="identifier">__setstate__</phrase></code>
                method. If so, this method is called with the result of <code><phrase
                role="identifier">__getstate__</phrase></code> (a Python object)
                as the argument.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          The three special methods described above may be <code><phrase role="special">.</phrase><phrase
          role="identifier">def</phrase><phrase role="special">()</phrase></code>'ed
          individually by the user. However, <code><phrase role="identifier">Boost</phrase><phrase
          role="special">.</phrase><phrase role="identifier">Python</phrase></code>
          provides an easy to use high-level interface via the <code><phrase role="identifier">boost</phrase><phrase
          role="special">::</phrase><phrase role="identifier">python</phrase><phrase
          role="special">::</phrase><phrase role="identifier">pickle_suite</phrase></code>
          class that also enforces consistency: <code><phrase role="identifier">__getstate__</phrase></code>
          and <code><phrase role="identifier">__setstate__</phrase></code> must be
          defined as pairs. Use of this interface is demonstrated by the following
          examples.
        </para>
      </section>
      <section id="topics.pickle_support.example">
        <title><link linkend="topics.pickle_support.example">Example</link></title>
        <para>
          There are three files in <code><phrase role="identifier">python</phrase><phrase
          role="special">/</phrase><phrase role="identifier">test</phrase></code>
          that show how to provide pickle support.
        </para>
        <section id="topics.pickle_support.example.pickle1_cpp">
          <title><link linkend="topics.pickle_support.example.pickle1_cpp">pickle1.cpp</link></title>
          <para>
            The C++ class in this example can be fully restored by passing the appropriate
            argument to the constructor. Therefore it is sufficient to define the
            pickle interface method <code><phrase role="identifier">__getinitargs__</phrase></code>.
            This is done in the following way: Definition of the C++ pickle function:
          </para>
<programlisting><phrase role="keyword">struct</phrase> <phrase role="identifier">world_pickle_suite</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">pickle_suite</phrase>
<phrase role="special">{</phrase>
  <phrase role="keyword">static</phrase>
  <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase>
  <phrase role="identifier">getinitargs</phrase><phrase role="special">(</phrase><phrase role="identifier">world</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">w</phrase><phrase role="special">)</phrase>
  <phrase role="special">{</phrase>
      <phrase role="keyword">return</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">make_tuple</phrase><phrase role="special">(</phrase><phrase role="identifier">w</phrase><phrase role="special">.</phrase><phrase role="identifier">get_country</phrase><phrase role="special">());</phrase>
  <phrase role="special">}</phrase>
<phrase role="special">};</phrase>
</programlisting>
          <para>
            Establishing the Python binding:
          </para>
<programlisting><phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">world</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;world&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">args</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&amp;&gt;())</phrase>
      <phrase role="comment">// ...</phrase>
      <phrase role="special">.</phrase><phrase role="identifier">def_pickle</phrase><phrase role="special">(</phrase><phrase role="identifier">world_pickle_suite</phrase><phrase role="special">())</phrase>
      <phrase role="comment">// ...</phrase>
</programlisting>
        </section>
        <section id="topics.pickle_support.example.pickle2_cpp">
          <title><link linkend="topics.pickle_support.example.pickle2_cpp">pickle2.cpp</link></title>
          <para>
            The C++ class in this example contains member data that cannot be restored
            by any of the constructors. Therefore it is necessary to provide the
            <code><phrase role="identifier">__getstate__</phrase></code>/<code><phrase
            role="identifier">__setstate__</phrase></code> pair of pickle interface
            methods:
          </para>
          <para>
            Definition of the C++ pickle functions:
          </para>
<programlisting><phrase role="keyword">struct</phrase> <phrase role="identifier">world_pickle_suite</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">pickle_suite</phrase>
  <phrase role="special">{</phrase>
    <phrase role="keyword">static</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase>
    <phrase role="identifier">getinitargs</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">world</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">w</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
      <phrase role="comment">// ...</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase>
    <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase>
    <phrase role="identifier">getstate</phrase><phrase role="special">(</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">world</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">w</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
      <phrase role="comment">// ...</phrase>
    <phrase role="special">}</phrase>

    <phrase role="keyword">static</phrase>
    <phrase role="keyword">void</phrase>
    <phrase role="identifier">setstate</phrase><phrase role="special">(</phrase><phrase role="identifier">world</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">w</phrase><phrase role="special">,</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">tuple</phrase> <phrase role="identifier">state</phrase><phrase role="special">)</phrase>
    <phrase role="special">{</phrase>
      <phrase role="comment">// ...</phrase>
    <phrase role="special">}</phrase>
  <phrase role="special">};</phrase>
</programlisting>
          <para>
            Establishing the Python bindings for the entire suite:
          </para>
<programlisting><phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">world</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;world&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">args</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&amp;&gt;())</phrase>
    <phrase role="comment">// ...</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">def_pickle</phrase><phrase role="special">(</phrase><phrase role="identifier">world_pickle_suite</phrase><phrase role="special">())</phrase>
    <phrase role="comment">// ...</phrase>
</programlisting>
          <para>
            For simplicity, the <code><phrase role="identifier">__dict__</phrase></code>
            is not included in the result of <code><phrase role="identifier">__getstate__</phrase></code>.
            This is not generally recommended, but a valid approach if it is anticipated
            that the object's <code><phrase role="identifier">__dict__</phrase></code>
            will always be empty. Note that the safety guard described below will
            catch the cases where this assumption is violated.
          </para>
        </section>
        <section id="topics.pickle_support.example.pickle3_cpp">
          <title><link linkend="topics.pickle_support.example.pickle3_cpp">pickle3.cpp</link></title>
          <para>
            This example is similar to pickle2.cpp. However, the object's <code><phrase
            role="identifier">__dict__</phrase></code> is included in the result
            of <code><phrase role="identifier">__getstate__</phrase></code>. This
            requires a little more code but is unavoidable if the object's <code><phrase
            role="identifier">__dict__</phrase></code> is not always empty.
          </para>
        </section>
      </section>
      <section id="topics.pickle_support.pitfall_and_safety_guard">
        <title><link linkend="topics.pickle_support.pitfall_and_safety_guard">Pitfall
        and Safety Guard</link></title>
        <para>
          The pickle protocol described above has an important pitfall that the end
          user of a Boost.Python extension module might not be aware of:
        </para>
        <para>
          <emphasis role="bold"><code><phrase role="identifier">__getstate__</phrase></code>
          is defined and the instance's <code><phrase role="identifier">__dict__</phrase></code>
          is not empty.</emphasis>
        </para>
        <para>
          The author of a <code><phrase role="identifier">Boost</phrase><phrase role="special">.</phrase><phrase
          role="identifier">Python</phrase></code> extension class might provide
          a <code><phrase role="identifier">__getstate__</phrase></code> method without
          considering the possibilities that: * his class is used in Python as a
          base class. Most likely the <code><phrase role="identifier">__dict__</phrase></code>
          of instances of the derived class needs to be pickled in order to restore
          the instances correctly. * the user adds items to the instance's <code><phrase
          role="identifier">__dict__</phrase></code> directly. Again, the <code><phrase
          role="identifier">__dict__</phrase></code> of the instance then needs to
          be pickled.
        </para>
        <para>
          To alert the user to this highly unobvious problem, a safety guard is provided.
          If <code><phrase role="identifier">__getstate__</phrase></code> is defined
          and the instance's <code><phrase role="identifier">__dict__</phrase></code>
          is not empty, <code><phrase role="identifier">Boost</phrase><phrase role="special">.</phrase><phrase
          role="identifier">Python</phrase></code> tests if the class has an attribute
          <code><phrase role="identifier">__getstate_manages_dict__</phrase></code>.
          An exception is raised if this attribute is not defined:
        </para>
<programlisting><phrase role="identifier">RuntimeError</phrase><phrase role="special">:</phrase> <phrase role="identifier">Incomplete</phrase> <phrase role="identifier">pickle</phrase> <phrase role="identifier">support</phrase> <phrase role="special">(</phrase><phrase role="identifier">__getstate_manages_dict__</phrase> <phrase role="keyword">not</phrase> <phrase role="identifier">set</phrase><phrase role="special">)</phrase>
</programlisting>
        <para>
          To resolve this problem, it should first be established that the <code><phrase
          role="identifier">__getstate__</phrase></code> and <code><phrase role="identifier">__setstate__</phrase></code>
          methods manage the instances's <code><phrase role="identifier">__dict__</phrase></code>
          correctly. Note that this can be done either at the C++ or the Python level.
          Finally, the safety guard should intentionally be overridden. E.g. in C++
          (from pickle3.cpp):
        </para>
<programlisting><phrase role="keyword">struct</phrase> <phrase role="identifier">world_pickle_suite</phrase> <phrase role="special">:</phrase> <phrase role="identifier">boost</phrase><phrase role="special">::</phrase><phrase role="identifier">python</phrase><phrase role="special">::</phrase><phrase role="identifier">pickle_suite</phrase>
<phrase role="special">{</phrase>
  <phrase role="comment">// ...</phrase>

  <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase> <phrase role="identifier">getstate_manages_dict</phrase><phrase role="special">()</phrase> <phrase role="special">{</phrase> <phrase role="keyword">return</phrase> <phrase role="keyword">true</phrase><phrase role="special">;</phrase> <phrase role="special">}</phrase>
<phrase role="special">};</phrase>
</programlisting>
        <para>
          Alternatively in Python:
        </para>
<programlisting><phrase role="identifier">import</phrase> <phrase role="identifier">your_bpl_module</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">your_class</phrase><phrase role="special">(</phrase><phrase role="identifier">your_bpl_module</phrase><phrase role="special">.</phrase><phrase role="identifier">your_class</phrase><phrase role="special">):</phrase>
  <phrase role="identifier">__getstate_manages_dict__</phrase> <phrase role="special">=</phrase> <phrase role="number">1</phrase>
  <phrase role="identifier">def</phrase> <phrase role="identifier">__getstate__</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">):</phrase>
    <phrase role="preprocessor"># your</phrase> <phrase role="identifier">code</phrase> <phrase role="identifier">here</phrase>
  <phrase role="identifier">def</phrase> <phrase role="identifier">__setstate__</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">,</phrase> <phrase role="identifier">state</phrase><phrase role="special">):</phrase>
    <phrase role="preprocessor"># your</phrase> <phrase role="identifier">code</phrase> <phrase role="identifier">here</phrase>
</programlisting>
      </section>
      <section id="topics.pickle_support.practical_advice">
        <title><link linkend="topics.pickle_support.practical_advice">Practical Advice</link></title>
        <itemizedlist>
          <listitem>
            <simpara>
              In <code><phrase role="identifier">Boost</phrase><phrase role="special">.</phrase><phrase
              role="identifier">Python</phrase></code> extension modules with many
              extension classes, providing complete pickle support for all classes
              would be a significant overhead. In general complete pickle support
              should only be implemented for extension classes that will eventually
              be pickled.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              Avoid using <code><phrase role="identifier">__getstate__</phrase></code>
              if the instance can also be reconstructed by way of <code><phrase role="identifier">__getinitargs__</phrase></code>.
              This automatically avoids the pitfall described above.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              If <code><phrase role="identifier">__getstate__</phrase></code> is
              required, include the instance's <code><phrase role="identifier">__dict__</phrase></code>
              in the Python object that is returned.
            </simpara>
          </listitem>
        </itemizedlist>
      </section>
      <section id="topics.pickle_support.light_weight_alternative_pickle_">
        <title><link linkend="topics.pickle_support.light_weight_alternative_pickle_">Light-weight
        alternative: pickle support implemented in Python</link></title>
        <para>
          The pickle4.cpp example demonstrates an alternative technique for implementing
          pickle support. First we direct Boost.Python via the class_::enable_pickling()
          member function to define only the basic attributes required for pickling:
        </para>
<programlisting><phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">world</phrase><phrase role="special">&gt;(</phrase><phrase role="string">&quot;world&quot;</phrase><phrase role="special">,</phrase> <phrase role="identifier">args</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">const</phrase> <phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">string</phrase><phrase role="special">&amp;&gt;())</phrase>
    <phrase role="comment">// ...</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">enable_pickling</phrase><phrase role="special">()</phrase>
    <phrase role="comment">// ...</phrase>
</programlisting>
        <para>
          This enables the standard Python pickle interface as described in the Python
          documentation. By &quot;injecting&quot; a <code><phrase role="identifier">__getinitargs__</phrase></code>
          method into the definition of the wrapped class we make all instances pickleable:
        </para>
<programlisting><phrase role="preprocessor"># import</phrase> <phrase role="identifier">the</phrase> <phrase role="identifier">wrapped</phrase> <phrase role="identifier">world</phrase> <phrase role="keyword">class</phrase>
<phrase role="identifier">from</phrase> <phrase role="identifier">pickle4_ext</phrase> <phrase role="identifier">import</phrase> <phrase role="identifier">world</phrase>

<phrase role="preprocessor"># definition</phrase> <phrase role="identifier">of</phrase> <phrase role="identifier">__getinitargs__</phrase>
<phrase role="identifier">def</phrase> <phrase role="identifier">world_getinitargs</phrase><phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">):</phrase>
  <phrase role="keyword">return</phrase> <phrase role="special">(</phrase><phrase role="identifier">self</phrase><phrase role="special">.</phrase><phrase role="identifier">get_country</phrase><phrase role="special">(),)</phrase>

<phrase role="preprocessor"># now</phrase> <phrase role="identifier">inject</phrase> <phrase role="identifier">__getinitargs__</phrase> <phrase role="special">(</phrase><phrase role="identifier">Python</phrase> <phrase role="identifier">is</phrase> <phrase role="identifier">a</phrase> <phrase role="identifier">dynamic</phrase> <phrase role="identifier">language</phrase><phrase role="special">!)</phrase>
<phrase role="identifier">world</phrase><phrase role="special">.</phrase><phrase role="identifier">__getinitargs__</phrase> <phrase role="special">=</phrase> <phrase role="identifier">world_getinitargs</phrase>
</programlisting>
        <para>
          See also the tutorial section on injecting additional methods from Python.
        </para>
      </section>
    </section>
    <section id="topics.indexing_support">
      <title><link linkend="topics.indexing_support">Indexing support</link></title>
      <section id="topics.indexing_support.introduction">
        <title><link linkend="topics.indexing_support.introduction">Introduction</link></title>
        <para>
          Indexing is a <code><phrase role="identifier">Boost</phrase> <phrase role="identifier">Python</phrase></code>
          facility for easy exportation of indexable C++ containers to Python. Indexable
          containers are containers that allow random access through the <code><phrase
          role="keyword">operator</phrase><phrase role="special">[]</phrase></code>
          (e.g. <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
          role="identifier">vector</phrase></code>).
        </para>
        <para>
          While <code><phrase role="identifier">Boost</phrase> <phrase role="identifier">Python</phrase></code>
          has all the facilities needed to expose indexable C++ containers such as
          the ubiquitous std::vector to Python, the procedure is not as straightforward
          as we'd like it to be. Python containers do not map easily to C++ containers.
          Emulating Python containers in C++ (see Python Reference Manual, <ulink
          url="http://www.python.org/doc/current/ref/sequence-types.html">Emulating
          container types</ulink>) using <code><phrase role="identifier">Boost</phrase><phrase
          role="special">.</phrase><phrase role="identifier">Python</phrase></code>
          is non trivial. There are a lot of issues to consider before we can map
          a C++ container to Python. These involve implementing wrapper functions
          for the methods <code><phrase role="identifier">__len__</phrase></code>,
          <code><phrase role="identifier">__getitem__</phrase></code>, <code><phrase
          role="identifier">__setitem__</phrase></code>, <code><phrase role="identifier">__delitem__</phrase></code>,
          <code><phrase role="identifier">__iter__</phrase></code> and <code><phrase
          role="identifier">__contains__</phrase></code>.
        </para>
        <para>
          The goals:
        </para>
        <itemizedlist>
          <listitem>
            <simpara>
              Make indexable C++ containers behave exactly as one would expect a
              Python container to behave.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              Provide default reference semantics for container element indexing
              (<code><phrase role="identifier">__getitem__</phrase></code>) such
              that c[i] can be mutable. Require:
<programlisting><phrase role="identifier">val</phrase> <phrase role="special">=</phrase> <phrase role="identifier">c</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase>
<phrase role="identifier">c</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">].</phrase><phrase role="identifier">m</phrase><phrase role="special">()</phrase>
<phrase role="identifier">val</phrase> <phrase role="special">==</phrase> <phrase role="identifier">c</phrase><phrase role="special">[</phrase><phrase role="identifier">i</phrase><phrase role="special">]</phrase>
</programlisting>
              <para>
                where m is a non-const (mutating) member function (method).
              </para>
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              Return safe references from <code><phrase role="identifier">__getitem__</phrase></code>
              such that subsequent adds and deletes to and from the container will
              not result in dangling references (will not crash Python).
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              Support slice indexes.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              Accept Python container arguments (e.g. <code><phrase role="identifier">lists</phrase></code>,
              <code><phrase role="identifier">tuples</phrase></code>) wherever appropriate.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              Allow for extensibility through re-definable policy classes.
            </simpara>
          </listitem>
          <listitem>
            <simpara>
              Provide predefined support for the most common STL and STL-like indexable
              containers.
            </simpara>
          </listitem>
        </itemizedlist>
      </section>
      <section id="topics.indexing_support.the_indexing_interface">
        <title><link linkend="topics.indexing_support.the_indexing_interface">The
        Indexing Interface</link></title>
        <para>
          The <code><phrase role="identifier">indexing_suite</phrase></code> class
          is the base class for the management of C++ containers intended to be integrated
          to Python. The objective is make a C++ container look and feel and behave
          exactly as we'd expect a Python container. The class automatically wraps
          these special Python methods (taken from the Python reference: Emulating
          container types):
        </para>
        <variablelist>
          <title></title>
          <varlistentry>
            <term>__len__(self)</term>
            <listitem>
              <para>
                Called to implement the built-in function <code><phrase role="identifier">len</phrase><phrase
                role="special">()</phrase></code>. Should return the length of the
                object, an integer <code><phrase role="special">&gt;=</phrase> <phrase
                role="number">0</phrase></code>. Also, an object that doesn't define
                a <code><phrase role="identifier">__nonzero__</phrase><phrase role="special">()</phrase></code>
                method and whose <code><phrase role="identifier">__len__</phrase><phrase
                role="special">()</phrase></code> method returns zero is considered
                to be false in a Boolean context.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>__getitem__(self, key)</term>
            <listitem>
              <para>
                Called to implement evaluation of <code><phrase role="identifier">self</phrase><phrase
                role="special">[</phrase><phrase role="identifier">key</phrase><phrase
                role="special">]</phrase></code>. For sequence types, the accepted
                keys should be integers and slice objects. Note that the special
                interpretation of negative indexes (if the class wishes to emulate
                a sequence type) is up to the <code><phrase role="identifier">__getitem__</phrase><phrase
                role="special">()</phrase></code> method. If key is of an inappropriate
                type, <code><phrase role="identifier">TypeError</phrase></code> may
                be raised; if of a value outside the set of indexes for the sequence
                (after any special interpretation of negative values), IndexError
                should be raised. [Note: for loops expect that an IndexError will
                be raised for illegal indexes to allow proper detection of the end
                of the sequence.]
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>__setitem__(self, key, value)</term>
            <listitem>
              <para>
                Called to implement assignment to self[key]. Same note as for __getitem__().
                This should only be implemented for mappings if the objects support
                changes to the values for keys, or if new keys can be added, or for
                sequences if elements can be replaced. The same exceptions should
                be raised for improper key values as for the __getitem__() method.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>__delitem__(self, key)</term>
            <listitem>
              <para>
                Called to implement deletion of self[key]. Same note as for __getitem__().
                This should only be implemented for mappings if the objects support
                removal of keys, or for sequences if elements can be removed from
                the sequence. The same exceptions should be raised for improper key
                values as for the __getitem__() method.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>__iter__(self)</term>
            <listitem>
              <para>
                This method is called when an iterator is required for a container.
                This method should return a new iterator object that can iterate
                over all the objects in the container. For mappings, it should iterate
                over the keys of the container, and should also be made available
                as the method iterkeys().
              </para>
              <para>
                Iterator objects also need to implement this method; they are required
                to return themselves. For more information on iterator objects, see
                <ulink url="http://www.python.org/doc/current/lib/typeiter.html">Iterator
                Types</ulink> in the <ulink url="http://www.python.org/doc/current/lib/lib.html">Python
                Library Reference</ulink>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>__contains__(self, item)</term>
            <listitem>
              <para>
                Called to implement membership test operators. Should return true
                if item is in self, false otherwise. For mapping objects, this should
                consider the keys of the mapping rather than the values or the key-item
                pairs.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="topics.indexing_support.index_suite_sub_classes">
        <title><link linkend="topics.indexing_support.index_suite_sub_classes">index_suite
        sub-classes</link></title>
        <para>
          The <code><phrase role="identifier">indexing_suite</phrase></code> is not
          meant to be used as is. A couple of policy functions must be supplied by
          subclasses of <code><phrase role="identifier">indexing_suite</phrase></code>.
          However, a set of indexing_suite subclasses for the standard indexable
          STL containers will be provided, In most cases, we can simply use the available
          predefined suites. In some cases, we can refine the predefined suites to
          suit our needs.
        </para>
        <section id="topics.indexing_support.index_suite_sub_classes.vector_index_suite">
          <title><link linkend="topics.indexing_support.index_suite_sub_classes.vector_index_suite">vector_index_suite</link></title>
          <para>
            The <code><phrase role="identifier">vector_indexing_suite</phrase></code>
            class is a predefined <code><phrase role="identifier">indexing_suite</phrase></code>
            derived class designed to wrap <code><phrase role="identifier">std</phrase><phrase
            role="special">::</phrase><phrase role="identifier">vector</phrase></code>
            (and <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
            role="identifier">vector</phrase></code>-like [i.e. a class with <code><phrase
            role="identifier">std</phrase><phrase role="special">::</phrase><phrase
            role="identifier">vector</phrase></code> interface]) classes. It provides
            all the policies required by the <code><phrase role="identifier">indexing_suite</phrase></code>.
          </para>
          <para>
            Example usage:
          </para>
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">X</phrase> <phrase role="special">{...};</phrase>
<phrase role="special">...</phrase>
<phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;XVec&quot;</phrase><phrase role="special">)</phrase>
  <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">vector_indexing_suite</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">vector</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;())</phrase>
<phrase role="special">;</phrase>
</programlisting>
          <para>
            XVec is now a full-fledged Python container (see the example in full,
            along with its python test).
          </para>
        </section>
        <section id="topics.indexing_support.index_suite_sub_classes.map_index_suite">
          <title><link linkend="topics.indexing_support.index_suite_sub_classes.map_index_suite">map_index_suite</link></title>
          <para>
            The <code><phrase role="identifier">map_indexing_suite</phrase></code>
            class is a predefined <code><phrase role="identifier">indexing_suite</phrase></code>
            derived class designed to wrap <code><phrase role="identifier">std</phrase><phrase
            role="special">::</phrase><phrase role="identifier">map</phrase></code>
            (and <code><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase
            role="identifier">map</phrase></code>-like [i.e. a class with <code><phrase
            role="identifier">std</phrase><phrase role="special">::</phrase><phrase
            role="identifier">map</phrase></code> interface]) classes. It provides
            all the policies required by the <code><phrase role="identifier">indexing_suite</phrase></code>.
          </para>
          <para>
            Example usage:
          </para>
<programlisting><phrase role="keyword">class</phrase> <phrase role="identifier">X</phrase> <phrase role="special">{...};</phrase>
<phrase role="special">...</phrase>

<phrase role="identifier">class_</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">map</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;(</phrase><phrase role="string">&quot;XMap&quot;</phrase><phrase role="special">)</phrase>
    <phrase role="special">.</phrase><phrase role="identifier">def</phrase><phrase role="special">(</phrase><phrase role="identifier">map_indexing_suite</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">std</phrase><phrase role="special">::</phrase><phrase role="identifier">map</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">X</phrase><phrase role="special">&gt;</phrase> <phrase role="special">&gt;())</phrase>
<phrase role="special">;</phrase>
</programlisting>
          <para>
            By default indexed elements are returned by proxy. This can be disabled
            by supplying <code><phrase role="keyword">true</phrase></code> in the
            <code><phrase role="identifier">NoProxy</phrase></code> template parameter.
            XMap is now a full-fledged Python container (see the example in full,
            along with its python test).
          </para>
        </section>
      </section>
      <section id="topics.indexing_support.indexing_suite_class">
        <title><link linkend="topics.indexing_support.indexing_suite_class"><code><phrase
        role="identifier">indexing_suite</phrase></code> class</link></title>
        <informaltable frame="all">
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Template Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
                <entry>
                  <para>
                    Default
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    Container
                  </para>
                </entry>
                <entry>
                  <para>
                    A class type
                  </para>
                </entry>
                <entry>
                  <para>
                    The container type to be wrapped to Python.
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    DerivedPolicies
                  </para>
                </entry>
                <entry>
                  <para>
                    A subclass of indexing_suite
                  </para>
                </entry>
                <entry>
                  <para>
                    Derived classes provide the policy hooks. See DerivedPolicies
                    below.
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    NoProxy
                  </para>
                </entry>
                <entry>
                  <para>
                    A boolean
                  </para>
                </entry>
                <entry>
                  <para>
                    By default indexed elements have Python reference semantics and
                    are returned by proxy. This can be disabled by supplying true
                    in the NoProxy template parameter.
                  </para>
                </entry>
                <entry>
                  <para>
                    false
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    NoSlice
                  </para>
                </entry>
                <entry>
                  <para>
                    A boolean
                  </para>
                </entry>
                <entry>
                  <para>
                    Do not allow slicing.
                  </para>
                </entry>
                <entry>
                  <para>
                    false
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Data
                  </para>
                </entry>
                <entry>
                </entry>
                <entry>
                  <para>
                    The container's data type.
                  </para>
                </entry>
                <entry>
                  <para>
                    Container::value_type
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Index
                  </para>
                </entry>
                <entry>
                </entry>
                <entry>
                  <para>
                    The container's index type.
                  </para>
                </entry>
                <entry>
                  <para>
                    Container::size_type
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    Key
                  </para>
                </entry>
                <entry>
                </entry>
                <entry>
                  <para>
                    The container's key type.
                  </para>
                </entry>
                <entry>
                  <para>
                    Container::value_type
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Container</phrase><phrase role="special">,</phrase>
	  <phrase role="keyword">class</phrase> <phrase role="identifier">DerivedPolicies</phrase><phrase role="special">,</phrase>
	   <phrase role="keyword">bool</phrase> <phrase role="identifier">NoProxy</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">,</phrase>
	   <phrase role="keyword">bool</phrase> <phrase role="identifier">NoSlice</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">,</phrase>
	   <phrase role="keyword">class</phrase> <phrase role="identifier">Data</phrase> <phrase role="special">=</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">value_type</phrase><phrase role="special">,</phrase>
	   <phrase role="keyword">class</phrase> <phrase role="identifier">Index</phrase> <phrase role="special">=</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">size_type</phrase><phrase role="special">,</phrase>
	   <phrase role="keyword">class</phrase> <phrase role="identifier">Key</phrase> <phrase role="special">=</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">value_type</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">indexing_suite</phrase> <phrase role="special">:</phrase> <phrase role="identifier">unspecified</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>
  <phrase role="identifier">indexing_suite</phrase><phrase role="special">();</phrase> <phrase role="comment">// default constructor</phrase>
<phrase role="special">}</phrase>
</programlisting>
        <section id="topics.indexing_support.indexing_suite_class.derivedpolicies">
          <title><link linkend="topics.indexing_support.indexing_suite_class.derivedpolicies">DerivedPolicies</link></title>
          <para>
            Derived classes provide the hooks needed by the indexing_suite:
          </para>
<programlisting><phrase role="identifier">data_type</phrase><phrase role="special">&amp;</phrase>
<phrase role="identifier">get_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase>
<phrase role="identifier">get_slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
<phrase role="identifier">set_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">,</phrase> <phrase role="identifier">data_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">v</phrase><phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
<phrase role="identifier">set_slice</phrase><phrase role="special">(</phrase>
    <phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase>
    <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">,</phrase> <phrase role="identifier">data_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">v</phrase>
<phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Iter</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
<phrase role="identifier">set_slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase>
    <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iter</phrase> <phrase role="identifier">last</phrase>
<phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
<phrase role="identifier">delete_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
<phrase role="identifier">delete_slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="identifier">size_t</phrase>
<phrase role="identifier">size</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">);</phrase>

<phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase>
<phrase role="identifier">contains</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">T</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">val</phrase><phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="identifier">index_type</phrase>
<phrase role="identifier">convert_index</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

<phrase role="keyword">static</phrase> <phrase role="identifier">index_type</phrase>
<phrase role="identifier">adjust_index</phrase><phrase role="special">(</phrase><phrase role="identifier">index_type</phrase> <phrase role="identifier">current</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase>
    <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">,</phrase> <phrase role="identifier">size_type</phrase> <phrase role="identifier">len</phrase><phrase role="special">);</phrase>
</programlisting>
          <para>
            Most of these policies are self explanatory. However, convert_index and
            adjust_index deserve some explanation.
          </para>
          <para>
            convert_index converts a Python index into a C++ index that the container
            can handle. For instance, negative indexes in Python, by convention,
            start counting from the right(e.g. C<emphasis role="strikethrough">1</emphasis>
            indexes the rightmost element in C). convert_index should handle the
            necessary conversion for the C++ container (e.g. convert -1 to C.size()-1).
            convert_index should also be able to convert the type of the index (A
            dynamic Python type) to the actual type that the C++ container expects.
          </para>
          <para>
            When a container expands or contracts, held indexes to its elements must
            be adjusted to follow the movement of data. For instance, if we erase
            3 elements, starting from index 0 from a 5 element vector, what used
            to be at index 4 will now be at index 1:
          </para>
<programlisting><phrase role="special">[</phrase><phrase role="identifier">a</phrase><phrase role="special">][</phrase><phrase role="identifier">b</phrase><phrase role="special">][</phrase><phrase role="identifier">c</phrase><phrase role="special">][</phrase><phrase role="identifier">d</phrase><phrase role="special">][</phrase><phrase role="identifier">e</phrase><phrase role="special">]</phrase> <phrase role="special">---&gt;</phrase> <phrase role="special">[</phrase><phrase role="identifier">d</phrase><phrase role="special">][</phrase><phrase role="identifier">e</phrase><phrase role="special">]</phrase>
              <phrase role="special">^</phrase>           <phrase role="special">^</phrase>
              <phrase role="number">4</phrase>           <phrase role="number">1</phrase>
</programlisting>
          <para>
            adjust_index takes care of the adjustment. Given a current index, the
            function should return the adjusted index when data in the container
            at index from..to is replaced by len elements.
          </para>
        </section>
      </section>
      <section id="topics.indexing_support.class_vector_indexing_suite">
        <title><link linkend="topics.indexing_support.class_vector_indexing_suite">class
        <code><phrase role="identifier">vector_indexing_suite</phrase></code></link></title>
        <informaltable frame="all">
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Template Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
                <entry>
                  <para>
                    Default
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    Container
                  </para>
                </entry>
                <entry>
                  <para>
                    A class type
                  </para>
                </entry>
                <entry>
                  <para>
                    The container type to be wrapped to Python.
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    NoProxy
                  </para>
                </entry>
                <entry>
                  <para>
                    A boolean
                  </para>
                </entry>
                <entry>
                  <para>
                    By default indexed elements have Python reference semantics and
                    are returned by proxy. This can be disabled by supplying true
                    in the NoProxy template parameter.
                  </para>
                </entry>
                <entry>
                  <para>
                    false
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    DerivedPolicies
                  </para>
                </entry>
                <entry>
                  <para>
                    A subclass of indexing_suite
                  </para>
                </entry>
                <entry>
                  <para>
                    The vector_indexing_suite may still be derived to further tweak
                    any of the predefined policies. Static polymorphism through CRTP
                    (James Coplien. &quot;Curiously Recurring Template Pattern&quot;.
                    C++ Report, Feb. 1995) enables the base indexing_suite class
                    to call policy function of the most derived class
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Container</phrase><phrase role="special">,</phrase>
	  <phrase role="keyword">bool</phrase> <phrase role="identifier">NoProxy</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">,</phrase>
          <phrase role="keyword">class</phrase> <phrase role="identifier">DerivedPolicies</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified_default</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">vector_indexing_suite</phrase> <phrase role="special">:</phrase> <phrase role="identifier">unspecified_base</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>

    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">value_type</phrase> <phrase role="identifier">data_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">value_type</phrase> <phrase role="identifier">key_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">index_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">size_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">difference_type</phrase> <phrase role="identifier">difference_type</phrase><phrase role="special">;</phrase>

    <phrase role="identifier">data_type</phrase><phrase role="special">&amp;</phrase>
    <phrase role="identifier">get_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="identifier">object</phrase>
    <phrase role="identifier">get_slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
    <phrase role="identifier">set_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">,</phrase> <phrase role="identifier">data_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">v</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
    <phrase role="identifier">set_slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">,</phrase> <phrase role="identifier">data_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">v</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Iter</phrase><phrase role="special">&gt;</phrase>
    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
    <phrase role="identifier">set_slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iter</phrase> <phrase role="identifier">first</phrase><phrase role="special">,</phrase> <phrase role="identifier">Iter</phrase> <phrase role="identifier">last</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
    <phrase role="identifier">delete_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
    <phrase role="identifier">delete_slice</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="identifier">size_t</phrase>
    <phrase role="identifier">size</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase>
    <phrase role="identifier">contains</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="identifier">index_type</phrase>
    <phrase role="identifier">convert_index</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="identifier">index_type</phrase>
    <phrase role="identifier">adjust_index</phrase><phrase role="special">(</phrase><phrase role="identifier">index_type</phrase> <phrase role="identifier">current</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">from</phrase><phrase role="special">,</phrase>
        <phrase role="identifier">index_type</phrase> <phrase role="identifier">to</phrase><phrase role="special">,</phrase> <phrase role="identifier">size_type</phrase> <phrase role="identifier">len</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </section>
      <section id="topics.indexing_support.class_map_indexing_suite">
        <title><link linkend="topics.indexing_support.class_map_indexing_suite">class
        <code><phrase role="identifier">map_indexing_suite</phrase></code></link></title>
        <informaltable frame="all">
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Template Parameter
                  </para>
                </entry>
                <entry>
                  <para>
                    Requirements
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics
                  </para>
                </entry>
                <entry>
                  <para>
                    Default
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    Container
                  </para>
                </entry>
                <entry>
                  <para>
                    A class type
                  </para>
                </entry>
                <entry>
                  <para>
                    The container type to be wrapped to Python.
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    NoProxy
                  </para>
                </entry>
                <entry>
                  <para>
                    A boolean
                  </para>
                </entry>
                <entry>
                  <para>
                    By default indexed elements have Python reference semantics and
                    are returned by proxy. This can be disabled by supplying true
                    in the NoProxy template parameter.
                  </para>
                </entry>
                <entry>
                  <para>
                    false
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    DerivedPolicies
                  </para>
                </entry>
                <entry>
                  <para>
                    A subclass of indexing_suite
                  </para>
                </entry>
                <entry>
                  <para>
                    The vector_indexing_suite may still be derived to further tweak
                    any of the predefined policies. Static polymorphism through CRTP
                    (James Coplien. &quot;Curiously Recurring Template Pattern&quot;.
                    C++ Report, Feb. 1995) enables the base indexing_suite class
                    to call policy function of the most derived class
                  </para>
                </entry>
                <entry>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
<programlisting><phrase role="keyword">template</phrase> <phrase role="special">&lt;</phrase><phrase role="keyword">class</phrase> <phrase role="identifier">Container</phrase><phrase role="special">,</phrase>
          <phrase role="keyword">bool</phrase> <phrase role="identifier">NoProxy</phrase> <phrase role="special">=</phrase> <phrase role="keyword">false</phrase><phrase role="special">,</phrase>
          <phrase role="keyword">class</phrase> <phrase role="identifier">DerivedPolicies</phrase> <phrase role="special">=</phrase> <phrase role="identifier">unspecified_default</phrase><phrase role="special">&gt;</phrase>
<phrase role="keyword">class</phrase> <phrase role="identifier">map_indexing_suite</phrase> <phrase role="special">:</phrase> <phrase role="identifier">unspecified_base</phrase>
<phrase role="special">{</phrase>
<phrase role="keyword">public</phrase><phrase role="special">:</phrase>

    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">value_type</phrase> <phrase role="identifier">value_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">value_type</phrase><phrase role="special">::</phrase><phrase role="identifier">second_type</phrase> <phrase role="identifier">data_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">key_type</phrase> <phrase role="identifier">key_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">key_type</phrase> <phrase role="identifier">index_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">size_type</phrase> <phrase role="identifier">size_type</phrase><phrase role="special">;</phrase>
    <phrase role="keyword">typedef</phrase> <phrase role="keyword">typename</phrase> <phrase role="identifier">Container</phrase><phrase role="special">::</phrase><phrase role="identifier">difference_type</phrase> <phrase role="identifier">difference_type</phrase><phrase role="special">;</phrase>

    <phrase role="keyword">static</phrase> <phrase role="identifier">data_type</phrase><phrase role="special">&amp;</phrase>
    <phrase role="identifier">get_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
    <phrase role="identifier">set_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">,</phrase> <phrase role="identifier">data_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">v</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">void</phrase>
    <phrase role="identifier">delete_item</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="identifier">size_t</phrase>
    <phrase role="identifier">size</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase>
    <phrase role="identifier">contains</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">key_type</phrase> <phrase role="keyword">const</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">key</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="keyword">bool</phrase>
    <phrase role="identifier">compare_index</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">a</phrase><phrase role="special">,</phrase> <phrase role="identifier">index_type</phrase> <phrase role="identifier">b</phrase><phrase role="special">);</phrase>

    <phrase role="keyword">static</phrase> <phrase role="identifier">index_type</phrase>
    <phrase role="identifier">convert_index</phrase><phrase role="special">(</phrase><phrase role="identifier">Container</phrase><phrase role="special">&amp;</phrase> <phrase role="identifier">container</phrase><phrase role="special">,</phrase> <phrase role="identifier">PyObject</phrase><phrase role="special">*</phrase> <phrase role="identifier">i</phrase><phrase role="special">);</phrase>
<phrase role="special">};</phrase>
</programlisting>
      </section>
    </section>
  </chapter>
  <chapter id="glossary" last-revision="$Date: 2016/08/05 20:23:10 $" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Glossary</title>
    <variablelist>
      <title></title>
      <varlistentry>
        <term>arity <anchor id="arity"/></term>
        <listitem>
          <para>
            The number of argumnts accepted by a function or member function. Unless
            otherwise specified, the hidden <code><phrase role="keyword">this</phrase></code>
            argument to member functions is not counted when specifying arity.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ntbs <anchor id="ntbs"/></term>
        <listitem>
          <para>
            Null-Terminated Byte String, or 'C'-string. C++ string literals are
            <emphasis role="bold">ntbs</emphasis>es. An <emphasis role="bold">ntbs</emphasis>
            must never be null.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>raise <anchor id="raise"/></term>
        <listitem>
          <para>
            Exceptions in Python are &quot;raised&quot;, not &quot;thrown&quot;,
            as they are in C++. When this documentation says that some Python exception
            is &quot;raised&quot; in the context of C++ code, it means that the corresponding
            Python exception is set via the <ulink url="http://www.python.org/doc/current/api/exceptionHandling.html">Python/'C'
            API</ulink>, and <code><phrase role="identifier">throw_error_already_set</phrase><phrase
            role="special">()</phrase></code> is called.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>POD <anchor id="pod"/></term>
        <listitem>
          <para>
            A technical term from the C++ standard. Short for &quot;Plain Ol'Data&quot;:
            A POD-struct is an aggregate class that has no non-static data members
            of type pointer to member, non-POD-struct, non-POD-union (or array of
            such types) or reference, and has no user-defined copy assign- ment operator
            and no user-defined destructor. Similarly, a POD-union is an aggregate
            union that has no non-static data members of type pointer to member,
            non-POD-struct, non-POD-union (or array of such types) or reference,
            and has no user-defined copy assignment operator and no user-defined
            destructor. A POD class is a class that is either a POD-struct or a POD-union.
            An aggregate is an array or a class (clause 9) with no user-declared
            constructors (12.1), no private or protected non-static data members
            (clause 11), no base classes (clause 10), and no virtual functions (10.3).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ODR <anchor id="odr"/></term>
        <listitem>
          <para>
            The &quot;One Definition Rule&quot;, which says that any entity in a
            C++ program must have the same definition in all translation units (object
            files) which make up a program.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </chapter>
</book>
